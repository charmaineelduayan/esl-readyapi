<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="678eead8-830a-4baa-86c7-512fd15eed93" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RetrieveConnectingStateroomCategories_TestCase" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="678eead8-830a-4baa-86c7-512fd15eed93fileName">RetrieveConnectingStateroomCategories_TestCase</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="datasource" name="DataSource" id="d8d933bd-47c7-4066-8912-346ddf74fdc7">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration><file>Booking_REST_Input.xls</file><worksheet>RetrieveConnectStateroomCategor</worksheet><cell>A2</cell><ignoreEmpty>false</ignoreEmpty><evaluateFormulas>false</evaluateFormulas></con:configuration>
      </con:dataSource>
      <con:shared>false</con:shared>
      <con:restartShared>false</con:restartShared>
      <con:property>S.No</con:property>
      <con:property>ServiceName</con:property>
      <con:property>Operation Name</con:property>
      <con:property>ExecutionFlag</con:property>
      <con:property>TestCaseName</con:property>
      <con:property>TestCaseDescription</con:property>
      <con:property>application</con:property>
      <con:property>brand</con:property>
      <con:property>domainId</con:property>
      <con:property>language</con:property>
      <con:property>uuid</con:property>
      <con:property>countryCode</con:property>
      <con:property>agencyId</con:property>
      <con:property>bookingAccessToken</con:property>
      <con:property>shipCode</con:property>
      <con:property>sailDate</con:property>
      <con:property>packageId</con:property>
      <con:property>stateroomType</con:property>
      <con:property>currency</con:property>
      <con:property>fareCode</con:property>
      <con:property>selectedFareCode</con:property>
      <con:property>includeAllStaterooms</con:property>
      <con:property>primary_guestAge</con:property>
      <con:property>primary_accessibleReqd</con:property>
      <con:property>primary_seniorReqd</con:property>
      <con:property>primary_militaryReqd</con:property>
      <con:property>primary_policeReqd</con:property>
      <con:property>primary_fireFighterReqd</con:property>
      <con:property>primary_stateCode</con:property>
      <con:property>primary_loyaltyId</con:property>
      <con:property>primary_couponCodes</con:property>
      <con:property>secondary_guestAge</con:property>
      <con:property>secondary_accessibleReqd</con:property>
      <con:property>secondary_seniorReqd</con:property>
      <con:property>secondary_militaryReqd</con:property>
      <con:property>secondary_policeReqd</con:property>
      <con:property>secondary_fireFighterReqd</con:property>
      <con:property>secondary_stateCode</con:property>
      <con:property>secondary_loyaltyId</con:property>
      <con:property>secondary_couponCodes</con:property>
      <con:property>Orchestration_application</con:property>
      <con:property>Orchestration_brand</con:property>
      <con:property>Orchestration_office</con:property>
      <con:property>Orchestration_countryCode</con:property>
      <con:property>Orchestration_currencyCode</con:property>
      <con:property>Orchestration_channel</con:property>
      <con:property>Orchestration_bookingType</con:property>
      <con:property>Orchestration_cruiseType</con:property>
      <con:property>Orchestration_accessibleCabins</con:property>
      <con:property>Orchestration_results</con:property>
      <con:property>Orchestration_pagination</con:property>
      <con:property>Orchestration_Prices</con:property>
      <con:startRow>0</con:startRow>
      <con:endRow>0</con:endRow>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:trimValues>false</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
      <con:stopDatasourceExhausted>false</con:stopDatasourceExhausted>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CruiseSearch" id="c608f412-bd05-4344-8976-406cb61a2cb4">
    <con:settings/>
    <con:config service="CruiseSearch" resourcePath="/cruiseSearch?" methodName="CruiseSearch" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="CruiseSearch" id="311d37c2-2066-49ea-aeb4-3adc006be12d" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://eslbservicestst01.rccl.com:13000</con:endpoint>
        <con:request/>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/search/rest/cruiseSearch</con:originalUri>
        <con:assertion type="Simple Contains" id="97dab890-455e-48e0-a3d3-d6229f7a3abd" name="Contains">
          <con:configuration>
            <token>Success</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="criteria.channel" value="${DataSource#Orchestration_channel}"/>
          <con:entry key="header.brand" value="${DataSource#Orchestration_brand}"/>
          <con:entry key="header.application" value="${DataSource#Orchestration_application}"/>
          <con:entry key="criteria.office" value="${DataSource#Orchestration_office}"/>
          <con:entry key="criteria.cruiseType.value" value="${DataSource#Orchestration_cruiseType}"/>
          <con:entry key="resultsPreference.pagination.count" value="${DataSource#Orchestration_pagination}"/>
          <con:entry key="criteria.country" value="${DataSource#Orchestration_countryCode}"/>
          <con:entry key="resultsPreference.includeResults" value="${DataSource#Orchestration_results}"/>
          <con:entry key="resultsPreference.includePrices" value="${DataSource#Orchestration_Prices}"/>
          <con:entry key="criteria.currency" value="${DataSource#Orchestration_currencyCode}"/>
          <con:entry key="criteria.brand.value" value="${DataSource#Orchestration_brand}"/>
          <con:entry key="criteria.bookingType" value="${DataSource#Orchestration_bookingType}"/>
          <con:entry key="criteria.accessibleCabins" value="${DataSource#Orchestration_accessibleCabins}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>criteria.office</con:entry>
          <con:entry>criteria.country</con:entry>
          <con:entry>criteria.currency</con:entry>
          <con:entry>criteria.channel</con:entry>
          <con:entry>criteria.bookingType</con:entry>
          <con:entry>criteria.cruiseType.value</con:entry>
          <con:entry>criteria.brand.value</con:entry>
          <con:entry>criteria.ship.value</con:entry>
          <con:entry>criteria.port.value</con:entry>
          <con:entry>criteria.portOfCall.value</con:entry>
          <con:entry>criteria.tourCity.value</con:entry>
          <con:entry>criteria.region.value</con:entry>
          <con:entry>criteria.duration.value</con:entry>
          <con:entry>criteria.packageId.value</con:entry>
          <con:entry>criteria.marketingPromotionType.value</con:entry>
          <con:entry>criteria.marketingPromotionId.value</con:entry>
          <con:entry>criteria.onboardActivity.value</con:entry>
          <con:entry>criteria.sailingDate.dateRange.from</con:entry>
          <con:entry>criteria.sailingDate.dateRange.to</con:entry>
          <con:entry>criteria.startDate.dateRange.from</con:entry>
          <con:entry>criteria.startDate.dateRange.to</con:entry>
          <con:entry>criteria.occupancy.adult</con:entry>
          <con:entry>criteria.occupancy.child</con:entry>
          <con:entry>criteria.occupancy.infant</con:entry>
          <con:entry>criteria.priceRange.min</con:entry>
          <con:entry>criteria.priceRange.max</con:entry>
          <con:entry>criteria.priceRange.cabinClass</con:entry>
          <con:entry>criteria.accessibleCabins</con:entry>
          <con:entry>qualifiers.priceId.value</con:entry>
          <con:entry>qualifiers.promotionId.value</con:entry>
          <con:entry>qualifiers.promotionType.value</con:entry>
          <con:entry>qualifiers.residentType.promotionType</con:entry>
          <con:entry>qualifiers.residentType.state</con:entry>
          <con:entry>qualifiers.loyaltyType.promotionType</con:entry>
          <con:entry>qualifiers.loyaltyType.loyaltyTier.name</con:entry>
          <con:entry>qualifiers.loyaltyType.loyaltyTier.value</con:entry>
          <con:entry>qualifiers.airType.promotionType</con:entry>
          <con:entry>qualifiers.airType.gateway</con:entry>
          <con:entry>qualifiers.priceScope</con:entry>
          <con:entry>qualifiers.qualifierScope</con:entry>
          <con:entry>qualifiers.searchScope</con:entry>
          <con:entry>resultsPreference.includeFacets</con:entry>
          <con:entry>resultsPreference.includeResults</con:entry>
          <con:entry>resultsPreference.includeOnlyIfPriceAvailable</con:entry>
          <con:entry>resultsPreference.sortBy</con:entry>
          <con:entry>resultsPreference.sortOrder</con:entry>
          <con:entry>resultsPreference.pagination.count</con:entry>
          <con:entry>resultsPreference.pagination.offset</con:entry>
          <con:entry>resultsPreference.strictSearch</con:entry>
          <con:entry>resultsPreference.groupBy</con:entry>
          <con:entry>resultsPreference.guestPricing</con:entry>
          <con:entry>resultsPreference.priceLevel.bestPricedCategory</con:entry>
          <con:entry>resultsPreference.priceLevel.cabinClass</con:entry>
          <con:entry>resultsPreference.bundleComponent.value</con:entry>
          <con:entry>resultsPreference.includePrices</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="FetchValues" id="9417be5e-bd85-4b99-9ca2-b225afc03681">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*
def tc = testRunner.testCase.testSuite.testCases["RetrieveConnectingStateroomCategories_TestCase"];

def ts = testRunner.testCase.getTestStepByName("CruiseSearch")
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

def packageCode = res.resultsBySailing.sailingSummaryWithClassLevelPricing[0].sailingRef.@package.text();
testRunner.testCase.setPropertyValue("PackageCode",packageCode)

String shipCode= packageCode.substring(0,2);
testRunner.testCase.setPropertyValue("ShipCode",shipCode)

def sailDate = res.resultsBySailing.sailingSummaryWithClassLevelPricing[0].sailingRef.@saildate.text();
testRunner.testCase.setPropertyValue("SailDate",sailDate)

def id = res.resultsBySailing.sailingSummaryWithClassLevelPricing[0].cabinClassPricing[0].price[0].@priceId.text();
if(id.equals('')){
	def fareCode = res.resultsBySailing.sailingSummaryWithClassLevelPricing[0].cabinClassPricing[0].price[0].promotion.@id.text();
	testRunner.testCase.setPropertyValue("FareCode",fareCode)
}
else{
	testRunner.testCase.setPropertyValue("FareCode",id)
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Groovy Script" id="e06716ce-9226-4051-a30b-221df05daa03" disabled="true">
    <con:settings/>
    <con:config>
      <script><![CDATA[import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*

def alert = com.eviware.soapui.support.UISupport;
def tc= testRunner.testCase.testSuite.testCases["RetrieveConnectingStateroomCategories_TestCase"];
       
def stepResult;
def req_status;
def TCpointer = context.expand('${DataSource#TestCaseName}') ;
def ExecutionFlag = context.expand('${DataSource#ExecutionFlag}') ;
tc.setPropertyValue("Request","");
tc.setPropertyValue("Response","");

def orc1 = testRunner.testCase.getTestStepByName("CruiseSearch");
def orc1_assertion_data = orc1.getAssertionStatus();

List<String> orc_assertion_data = Arrays.asList(orc1_assertion_data);

if(!orc_assertion_data.toString().contains("FAILED"))
{
//For FunctionalTest1
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC1")
	{
		stepResult = testRunner.runTestStepByName( "FunctionalTest1");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest1");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Success is expected in Response when all valid inputs are given to the request**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Success in status is shown as expected when all the valid inputs are given to the request**");
				     tc.setPropertyValue("Description2"," ");
				}							
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest1_International
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC2")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		stepResult = testRunner.runTestStepByName( "FunctionalTest1_International");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest1_International");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Success is expected in Response when all valid inputs are given to the request**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Success in status is shown as expected when all the valid inputs are given to the request**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest2
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC3")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		stepResult = testRunner.runTestStepByName("FunctionalTest2");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest2");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Success is expected in Response when all valid inputs are given to the request**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Success in status is shown as expected when all the valid inputs are given to the request**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest3
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC4" || TCpointer == "RetrieveConnectingStateroomCategories_TC7")
	{
		stepResult = testRunner.runTestStepByName( "FunctionalTest3");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest3");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Success is expected in Response when all valid inputs are given to the request**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Success in status is shown as expected when all the valid inputs are given to the request**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**The response should have only the given fareCode value in request**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**The response has only the given fareCode value in request**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest4
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC5")
	{
		stepResult = testRunner.runTestStepByName( "FunctionalTest4");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest4");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed when both the choice fields are not given**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when both the choice fields are not given**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed when both the choice fields are not given**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed when any both choice fields are not given**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest5
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC6")
	{
		stepResult = testRunner.runTestStepByName( "FunctionalTest5");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest5");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed when any one of the choice fields are not given**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when any one of the choice fields are not given**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed when any one of the choice fields are not given**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed when any one of the choice fields are not given**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest6
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC8")
	{
		stepResult = testRunner.runTestStepByName( "FunctionalTest6");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest6");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed when any one of the choice fields are not given**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when any one of the choice fields are not given**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed when any one of the choice fields are not given**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed when any one of the choice fields are not given**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest7
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC9")
	{
		stepResult = testRunner.runTestStepByName( "FunctionalTest7");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest7");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed when guestAge is less than 21yrs**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when guestAge is less than 21yrs**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed when guestAge is less than 21yrs**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed when guestAge is less than 21yrs**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest8
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC10")
	{
		stepResult = testRunner.runTestStepByName( "FunctionalTest8");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest8");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed when guestAge is less than 50yrs and seniorReqd is true**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when guestAge is less than 50yrs and seniorReqd is true**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed when guestAge is less than 50yrs and seniorReqd is true**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed when guestAge is less than 50yrs and seniorReqd is true**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest9
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC11")
	{
		stepResult = testRunner.runTestStepByName( "FunctionalTest9");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest9");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed when guestAge is 60 yrs and seniorReqd is false**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when guestAge is 60 yrs and seniorReqd is false**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest1
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC12")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest1");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest1");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no brand**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no brand**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest2
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC13")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest2");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest2");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid brand**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid brand**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest3
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC14")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest3");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest3");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no countryCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no countryCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest4
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC15")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest4");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest4");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid countryCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid countryCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest5
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC16")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest5");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest5");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no shipCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no shipCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest6
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC17")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest6");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest6");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid shipCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid shipCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest7
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC18" || TCpointer == "RetrieveConnectingStateroomCategories_TC19")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest7");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest7");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid sailDate**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no or invalid sailDate**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no or invalid sailDate**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no or invalid sailDate**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest8
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC20")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest8");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest8");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no packageId**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no packageId**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest9
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC21")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest9");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest9");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid packageId**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid packageId**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid packageId**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid packageId**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest10
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC22")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest10");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest10");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no currencyCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no currencyCode**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest11
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC23")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest11");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest11");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid currency**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid currency**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid currency**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid currency**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest12
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC24")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest12");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest12");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid selectedFareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid selectedFareCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid selectedFareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid selectedFareCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest13
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveConnectingStateroomCategories_TC25")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest13");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest13");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no guestAge**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no guestAge**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no guestAge**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no guestAge**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

if(ExecutionFlag == "No")
{
	tc.setPropertyValue("Status","NA");
	tc.setPropertyValue("Validation","NA")
	tc.setPropertyValue("Description","NA")
}
}

if(orc_assertion_data.toString().contains("FAILED"))
{
	tc.setPropertyValue("Description","Error in the services used for orchestration")
	tc.setPropertyValue("Validation","")
	tc.setPropertyValue("Status","Fail")
}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasource" name="DataSource1" id="db63ad32-c665-47cd-8bcc-f1b268ccdffd">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration><file>Booking_REST_Input.xls</file><worksheet>RetrieveConnectStateroomCategor</worksheet><cell>A2</cell><ignoreEmpty>false</ignoreEmpty><evaluateFormulas>false</evaluateFormulas></con:configuration>
      </con:dataSource>
      <con:shared>false</con:shared>
      <con:restartShared>false</con:restartShared>
      <con:property>S.No</con:property>
      <con:property>ServiceName</con:property>
      <con:property>Operation Name</con:property>
      <con:property>ExecutionFlag</con:property>
      <con:property>TestCaseName</con:property>
      <con:property>TestCaseDescription</con:property>
      <con:property>application</con:property>
      <con:property>brand</con:property>
      <con:property>domainId</con:property>
      <con:property>language</con:property>
      <con:property>uuid</con:property>
      <con:property>countryCode</con:property>
      <con:property>agencyId</con:property>
      <con:property>bookingAccessToken</con:property>
      <con:property>shipCode</con:property>
      <con:property>sailDate</con:property>
      <con:property>packageId</con:property>
      <con:property>stateroomType</con:property>
      <con:property>currency</con:property>
      <con:property>fareCode</con:property>
      <con:property>selectedFareCode</con:property>
      <con:property>includeAllStaterooms</con:property>
      <con:property>primary_guestAge</con:property>
      <con:property>primary_accessibleReqd</con:property>
      <con:property>primary_seniorReqd</con:property>
      <con:property>primary_militaryReqd</con:property>
      <con:property>primary_policeReqd</con:property>
      <con:property>primary_fireFighterReqd</con:property>
      <con:property>primary_stateCode</con:property>
      <con:property>primary_loyaltyId</con:property>
      <con:property>primary_couponCodes</con:property>
      <con:property>secondary_guestAge</con:property>
      <con:property>secondary_accessibleReqd</con:property>
      <con:property>secondary_seniorReqd</con:property>
      <con:property>secondary_militaryReqd</con:property>
      <con:property>secondary_policeReqd</con:property>
      <con:property>secondary_fireFighterReqd</con:property>
      <con:property>secondary_stateCode</con:property>
      <con:property>secondary_loyaltyId</con:property>
      <con:property>secondary_couponCodes</con:property>
      <con:property>Orchestration_application</con:property>
      <con:property>Orchestration_brand</con:property>
      <con:property>Orchestration_office</con:property>
      <con:property>Orchestration_countryCode</con:property>
      <con:property>Orchestration_currencyCode</con:property>
      <con:property>Orchestration_channel</con:property>
      <con:property>Orchestration_bookingType</con:property>
      <con:property>Orchestration_cruiseType</con:property>
      <con:property>Orchestration_accessibleCabins</con:property>
      <con:property>Orchestration_results</con:property>
      <con:property>Orchestration_pagination</con:property>
      <con:property>Orchestration_Prices</con:property>
      <con:startRow>2</con:startRow>
      <con:endRow>2</con:endRow>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:trimValues>false</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
      <con:stopDatasourceExhausted>false</con:stopDatasourceExhausted>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest1-invalid brand" id="70ebab76-a418-4da8-8a44-9562b72f2a81">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveConnectingStateroomCategories" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest1-invalid brand" id="5cbc4209-70c0-4f32-8a55-09a73e8a3f01" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://stg1.mesos.rccl.com/booking-stg1/v4/booking/rest/v3/</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst1/rest/v3/retrieveConnectingStateroomCategories?header.application=royalcaribbean.com&header.brand=R&header.domainId=1&header.language=en_US&countryCode=USA&shipCode=AD&sailDate=2022-11-10&packageId=AD04W115&stateroomType=BALCONY&currency=USD&fareCode=BESTRATE&primaryOccupancy.guestAge=25&primaryOccupancy.accessibleReqd=false&primaryOccupancy.seniorReqd=false&primaryOccupancy.militaryReqd=false&primaryOccupancy.policeReqd=false&primaryOccupancy.fireFighterReqd=false&secondaryOccupancy.guestAge=25&secondaryOccupancy.accessibleReqd=false&secondaryOccupancy.seniorReqd=false&secondaryOccupancy.militaryReqd=false&secondaryOccupancy.policeReqd=false&secondaryOccupancy.fireFighterReqd=false]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveConnectingStateroomCategories</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="de5192c2-7df4-43f1-a57d-b39421d5bbec" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="908d76f8-06d2-4628-bcac-77b1e9755918" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="438949b7-5c0d-47d2-b8be-bc47fcc8e7db" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ef0d13d4-a897-4a55-bbdc-8debb3e18ae1" name="Match content of [code]">
          <con:configuration>
            <path>$['header']['error'][0]['code']</path>
            <content>CATL-005</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.application" value="${DataSource1#application}"/>
          <con:entry key="primaryOccupancy.seniorReqd" value="${DataSource#primary_seniorReqd}"/>
          <con:entry key="primaryOccupancy.militaryReqd" value="${DataSource#primary_militaryReqd}"/>
          <con:entry key="includeAllStaterooms" value="${DataSource#includeAllStaterooms}"/>
          <con:entry key="header.brand" value="${DataSource1#brand}"/>
          <con:entry key="primaryOccupancy.guestAge" value="${DataSource#primary_guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="fareCode" value="${DataSource#fareCode}"/>
          <con:entry key="secondaryOccupancy.accessibleReqd" value="${DataSource#secondary_accessibleReqd}"/>
          <con:entry key="currency" value="${DataSource#currency}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="primaryOccupancy.accessibleReqd" value="${DataSource#primary_accessibleReqd}"/>
          <con:entry key="secondaryOccupancy.guestAge" value="${DataSource#secondary_guestAge}"/>
          <con:entry key="primaryOccupancy.fireFighterReqd" value="${DataSource#primary_fireFighterReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="secondaryOccupancy.fireFighterReqd" value="${DataSource#secondary_fireFighterReqd}"/>
          <con:entry key="stateroomType" value="${DataSource#stateroomType}"/>
          <con:entry key="secondaryOccupancy.policeReqd" value="${DataSource#secondary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.seniorReqd" value="${DataSource#secondary_seniorReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="primaryOccupancy.policeReqd" value="${DataSource#primary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.militaryReqd" value="${DataSource#secondary_militaryReqd}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest2-blank countryCode, agencyId" id="f4089433-af70-43a3-a27e-78a6971f9a47">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveConnectingStateroomCategories" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest2-blank countryCode, agencyId" id="5cbc4209-70c0-4f32-8a55-09a73e8a3f01" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://stg1.mesos.rccl.com/booking-stg1/v4/booking/rest/v3/</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst1/rest/v3/retrieveConnectingStateroomCategories?header.application=royalcaribbean.com&header.brand=R&header.domainId=1&header.language=en_US&shipCode=AD&sailDate=2022-11-10&packageId=AD04W115&stateroomType=BALCONY&currency=USD&fareCode=BESTRATE&primaryOccupancy.guestAge=25&primaryOccupancy.accessibleReqd=false&primaryOccupancy.seniorReqd=false&primaryOccupancy.militaryReqd=false&primaryOccupancy.policeReqd=false&primaryOccupancy.fireFighterReqd=false&secondaryOccupancy.guestAge=25&secondaryOccupancy.accessibleReqd=false&secondaryOccupancy.seniorReqd=false&secondaryOccupancy.militaryReqd=false&secondaryOccupancy.policeReqd=false&secondaryOccupancy.fireFighterReqd=false]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveConnectingStateroomCategories</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="3d3585b2-32fe-4703-b356-a508ffd4d8b7" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="d0c91741-1aaf-413f-87d0-38ad69b98e70" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f9f2069a-81b2-4537-b9a0-99bcbc01735e" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1a225e7a-1a7e-4852-8b2b-cebea85fe424" name="Match content of [description]">
          <con:configuration>
            <path>$['header']['error'][0]['description']</path>
            <content>One of these is required. [countryCode, agencyId]</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="primaryOccupancy.seniorReqd" value="${DataSource#primary_seniorReqd}"/>
          <con:entry key="primaryOccupancy.militaryReqd" value="${DataSource#primary_militaryReqd}"/>
          <con:entry key="includeAllStaterooms" value="${DataSource#includeAllStaterooms}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="primaryOccupancy.guestAge" value="${DataSource#primary_guestAge}"/>
          <con:entry key="fareCode" value="${DataSource#fareCode}"/>
          <con:entry key="secondaryOccupancy.accessibleReqd" value="${DataSource#secondary_accessibleReqd}"/>
          <con:entry key="currency" value="${DataSource#currency}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="primaryOccupancy.accessibleReqd" value="${DataSource#primary_accessibleReqd}"/>
          <con:entry key="secondaryOccupancy.guestAge" value="${DataSource#secondary_guestAge}"/>
          <con:entry key="primaryOccupancy.fireFighterReqd" value="${DataSource#primary_fireFighterReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="secondaryOccupancy.fireFighterReqd" value="${DataSource#secondary_fireFighterReqd}"/>
          <con:entry key="stateroomType" value="${DataSource#stateroomType}"/>
          <con:entry key="secondaryOccupancy.policeReqd" value="${DataSource#secondary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.seniorReqd" value="${DataSource#secondary_seniorReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="primaryOccupancy.policeReqd" value="${DataSource#primary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.militaryReqd" value="${DataSource#secondary_militaryReqd}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest3-invalid countryCode" id="9cee04d0-05f8-4bfa-8a08-b3cb2cd9b3f4">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveConnectingStateroomCategories" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest3-invalid countryCode" id="5cbc4209-70c0-4f32-8a55-09a73e8a3f01" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst1/rest/v3/retrieveConnectingStateroomCategories?header.application=royalcaribbean.com&header.brand=R&header.domainId=1&header.language=en_US&countryCode=AUS&shipCode=AD&sailDate=2022-11-10&packageId=AD04W115&stateroomType=BALCONY&currency=USD&fareCode=BESTRATE&primaryOccupancy.guestAge=25&primaryOccupancy.accessibleReqd=false&primaryOccupancy.seniorReqd=false&primaryOccupancy.militaryReqd=false&primaryOccupancy.policeReqd=false&primaryOccupancy.fireFighterReqd=false&secondaryOccupancy.guestAge=25&secondaryOccupancy.accessibleReqd=false&secondaryOccupancy.seniorReqd=false&secondaryOccupancy.militaryReqd=false&secondaryOccupancy.policeReqd=false&secondaryOccupancy.fireFighterReqd=false]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveConnectingStateroomCategories</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="b59eecf9-43b5-4f40-b133-e89788827b36" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="3a6f9346-7fd0-4c45-b6b8-265a973bea50" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d164b5ca-6439-4908-a61f-ca0b64420336" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="primaryOccupancy.seniorReqd" value="${DataSource#primary_seniorReqd}"/>
          <con:entry key="primaryOccupancy.militaryReqd" value="${DataSource#primary_militaryReqd}"/>
          <con:entry key="includeAllStaterooms" value="${DataSource#includeAllStaterooms}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="primaryOccupancy.guestAge" value="${DataSource#primary_guestAge}"/>
          <con:entry key="countryCode" value="${DataSource1#countryCode}"/>
          <con:entry key="fareCode" value="${DataSource#fareCode}"/>
          <con:entry key="secondaryOccupancy.accessibleReqd" value="${DataSource#secondary_accessibleReqd}"/>
          <con:entry key="currency" value="${DataSource#currency}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="primaryOccupancy.accessibleReqd" value="${DataSource#primary_accessibleReqd}"/>
          <con:entry key="secondaryOccupancy.guestAge" value="${DataSource#secondary_guestAge}"/>
          <con:entry key="primaryOccupancy.fireFighterReqd" value="${DataSource#primary_fireFighterReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="secondaryOccupancy.fireFighterReqd" value="${DataSource#secondary_fireFighterReqd}"/>
          <con:entry key="stateroomType" value="${DataSource#stateroomType}"/>
          <con:entry key="secondaryOccupancy.policeReqd" value="${DataSource#secondary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.seniorReqd" value="${DataSource#secondary_seniorReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="primaryOccupancy.policeReqd" value="${DataSource#primary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.militaryReqd" value="${DataSource#secondary_militaryReqd}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest4-invalid shipCode, packageCode" id="ac2c029f-ed97-4b15-98ca-54b23827dced">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveConnectingStateroomCategories" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest4-invalid shipCode, packageCode" id="5cbc4209-70c0-4f32-8a55-09a73e8a3f01" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst1/rest/v3/retrieveConnectingStateroomCategories?header.application=royalcaribbean.com&header.brand=R&header.domainId=1&header.language=en_US&countryCode=USA&agencyId=108869&shipCode=AD&sailDate=2022-11-10&packageId=AD05R006&stateroomType=BALCONY&currency=USD&selectedFareCode=J2161620&primaryOccupancy.guestAge=25&primaryOccupancy.accessibleReqd=false&primaryOccupancy.seniorReqd=false&primaryOccupancy.militaryReqd=false&primaryOccupancy.policeReqd=false&primaryOccupancy.fireFighterReqd=false&secondaryOccupancy.guestAge=25&secondaryOccupancy.accessibleReqd=false&secondaryOccupancy.seniorReqd=false&secondaryOccupancy.militaryReqd=false&secondaryOccupancy.policeReqd=false&secondaryOccupancy.fireFighterReqd=false]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveConnectingStateroomCategories</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="78282ab7-276e-4087-a944-2257488e7f80" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="f2c459e7-17ca-477a-9436-8f6a5750a37b" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="06db49b6-dab3-4d21-840f-f3972982ed38" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e6f35239-5653-495d-9c46-a369727d2b2a" name="Match content of [code]">
          <con:configuration>
            <path>$['header']['error'][0]['code']</path>
            <content>CSE0608</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a8bb4c73-9cc8-42e6-86d7-439ba13dba64" name="Match content of [description]">
          <con:configuration>
            <path>$['header']['error'][0]['description']</path>
            <content>SHIP IS NOT IN THE SHIP MASTER FILE - ICSHPD</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="primaryOccupancy.seniorReqd" value="${DataSource#primary_seniorReqd}"/>
          <con:entry key="primaryOccupancy.militaryReqd" value="${DataSource#primary_militaryReqd}"/>
          <con:entry key="includeAllStaterooms" value="${DataSource#includeAllStaterooms}"/>
          <con:entry key="agencyId" value="${DataSource#agencyId}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="primaryOccupancy.guestAge" value="${DataSource#primary_guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="secondaryOccupancy.accessibleReqd" value="${DataSource#secondary_accessibleReqd}"/>
          <con:entry key="currency" value="${DataSource#currency}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="selectedFareCode" value="${#TestCase#FareCode}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="packageId" value="${DataSource1#packageId}"/>
          <con:entry key="primaryOccupancy.accessibleReqd" value="${DataSource#primary_accessibleReqd}"/>
          <con:entry key="secondaryOccupancy.guestAge" value="${DataSource#secondary_guestAge}"/>
          <con:entry key="primaryOccupancy.fireFighterReqd" value="${DataSource#primary_fireFighterReqd}"/>
          <con:entry key="shipCode" value="${DataSource1#shipCode}"/>
          <con:entry key="secondaryOccupancy.fireFighterReqd" value="${DataSource#secondary_fireFighterReqd}"/>
          <con:entry key="stateroomType" value="${DataSource#stateroomType}"/>
          <con:entry key="secondaryOccupancy.policeReqd" value="${DataSource#secondary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.seniorReqd" value="${DataSource#secondary_seniorReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="primaryOccupancy.policeReqd" value="${DataSource#primary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.militaryReqd" value="${DataSource#secondary_militaryReqd}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest5-blank shipCode, packageCode" id="116d6447-53f4-4c21-90be-4821897ae08b">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveConnectingStateroomCategories" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest5-blank shipCode, packageCode" id="5cbc4209-70c0-4f32-8a55-09a73e8a3f01" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst1/rest/v3/retrieveConnectingStateroomCategories?header.application=royalcaribbean.com&header.brand=R&header.domainId=1&header.language=en_US&countryCode=USA&agencyId=108869&sailDate=2022-11-10&stateroomType=BALCONY&currency=USD&fareCode=BESTRATE&primaryOccupancy.guestAge=25&primaryOccupancy.accessibleReqd=false&primaryOccupancy.seniorReqd=false&primaryOccupancy.militaryReqd=false&primaryOccupancy.policeReqd=false&primaryOccupancy.fireFighterReqd=false&secondaryOccupancy.guestAge=25&secondaryOccupancy.accessibleReqd=false&secondaryOccupancy.seniorReqd=false&secondaryOccupancy.militaryReqd=false&secondaryOccupancy.policeReqd=false&secondaryOccupancy.fireFighterReqd=false]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveConnectingStateroomCategories</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="21502574-740b-45cc-8f6e-d09cd7251f43" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="Simple Contains" id="95f64819-5e46-42fa-8956-928342e24da7" name="Contains">
          <con:configuration>
            <token>Failure</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="e9a746c1-241a-4036-8431-0d28cbadfdab" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="primaryOccupancy.seniorReqd" value="${DataSource#primary_seniorReqd}"/>
          <con:entry key="primaryOccupancy.militaryReqd" value="${DataSource#primary_militaryReqd}"/>
          <con:entry key="includeAllStaterooms" value="${DataSource#includeAllStaterooms}"/>
          <con:entry key="agencyId" value="${DataSource#agencyId}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="primaryOccupancy.guestAge" value="${DataSource#primary_guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="fareCode" value="${DataSource#fareCode}"/>
          <con:entry key="secondaryOccupancy.accessibleReqd" value="${DataSource#secondary_accessibleReqd}"/>
          <con:entry key="currency" value="${DataSource#currency}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="primaryOccupancy.accessibleReqd" value="${DataSource#primary_accessibleReqd}"/>
          <con:entry key="secondaryOccupancy.guestAge" value="${DataSource#secondary_guestAge}"/>
          <con:entry key="primaryOccupancy.fireFighterReqd" value="${DataSource#primary_fireFighterReqd}"/>
          <con:entry key="secondaryOccupancy.fireFighterReqd" value="${DataSource#secondary_fireFighterReqd}"/>
          <con:entry key="stateroomType" value="${DataSource#stateroomType}"/>
          <con:entry key="secondaryOccupancy.policeReqd" value="${DataSource#secondary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.seniorReqd" value="${DataSource#secondary_seniorReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="primaryOccupancy.policeReqd" value="${DataSource#primary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.militaryReqd" value="${DataSource#secondary_militaryReqd}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest6-invalid sailDate" id="b1fb7299-23c3-493c-93b9-da4c46aa2847" disabled="true">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveConnectingStateroomCategories" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest6-invalid sailDate" id="5cbc4209-70c0-4f32-8a55-09a73e8a3f01" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[http://stg1.mesos.rccl.com/booking-stg1/v4/booking/rest/v3//retrieveConnectingStateroomCategories?header.application=royalcaribbean.com&header.brand=R&header.domainId=1&header.language=en_US&countryCode=USA&shipCode=BR&sailDate=08-05-2019&packageId=BR07M428&stateroomType=INTERIOR&currency=USD&fareCode=BESTRATE&primaryOccupancy.guestAge=25&primaryOccupancy.accessibleReqd=false&primaryOccupancy.seniorReqd=false&primaryOccupancy.militaryReqd=false&primaryOccupancy.policeReqd=false&primaryOccupancy.fireFighterReqd=false&secondaryOccupancy.guestAge=25&secondaryOccupancy.accessibleReqd=false&secondaryOccupancy.seniorReqd=false&secondaryOccupancy.militaryReqd=false&secondaryOccupancy.policeReqd=false&secondaryOccupancy.fireFighterReqd=false]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveConnectingStateroomCategories</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="a7fa5b8a-1b60-4127-9291-667b061ed077" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="Simple Contains" id="a8e94dd0-0923-422c-a40d-580859a5c478" name="Contains">
          <con:configuration>
            <token>Failure</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="87595918-3aa4-45ca-a9d4-1784d0ac59be" name="JsonPath Match">
          <con:configuration>
            <path>$.header.error[0].description</path>
            <content>Stateroom type required when not selecting all staterooms</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="cabae53e-131e-4099-a6dd-d505aba74017" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="primaryOccupancy.seniorReqd" value="${DataSource#primary_seniorReqd}"/>
          <con:entry key="primaryOccupancy.militaryReqd" value="${DataSource#primary_militaryReqd}"/>
          <con:entry key="includeAllStaterooms" value="${DataSource#includeAllStaterooms}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="primaryOccupancy.guestAge" value="${DataSource#primary_guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="fareCode" value="${DataSource#fareCode}"/>
          <con:entry key="secondaryOccupancy.accessibleReqd" value="${DataSource#secondary_accessibleReqd}"/>
          <con:entry key="currency" value="${DataSource#currency}"/>
          <con:entry key="sailDate" value="${DataSource1#sailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="primaryOccupancy.accessibleReqd" value="${DataSource#primary_accessibleReqd}"/>
          <con:entry key="secondaryOccupancy.guestAge" value="${DataSource#secondary_guestAge}"/>
          <con:entry key="primaryOccupancy.fireFighterReqd" value="${DataSource#primary_fireFighterReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="secondaryOccupancy.fireFighterReqd" value="${DataSource#secondary_fireFighterReqd}"/>
          <con:entry key="stateroomType" value="${DataSource#stateroomType}"/>
          <con:entry key="secondaryOccupancy.policeReqd" value="${DataSource#secondary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.seniorReqd" value="${DataSource#secondary_seniorReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="primaryOccupancy.policeReqd" value="${DataSource#primary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.militaryReqd" value="${DataSource#secondary_militaryReqd}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest7-blank sailDate" id="69566c5d-3e5d-4b1a-ade0-d0f83b4c1be3">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveConnectingStateroomCategories" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest7-blank sailDate" id="5cbc4209-70c0-4f32-8a55-09a73e8a3f01" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst1/rest/v3/retrieveConnectingStateroomCategories?header.application=royalcaribbean.com&header.brand=R&header.domainId=1&header.language=en_US&countryCode=USA&agencyId=108869&shipCode=AD&packageId=AD04W115&stateroomType=BALCONY&currency=USD&primaryOccupancy.guestAge=25&primaryOccupancy.accessibleReqd=false&primaryOccupancy.seniorReqd=false&primaryOccupancy.militaryReqd=false&primaryOccupancy.policeReqd=false&primaryOccupancy.fireFighterReqd=false&secondaryOccupancy.guestAge=25&secondaryOccupancy.accessibleReqd=false&secondaryOccupancy.seniorReqd=false&secondaryOccupancy.militaryReqd=false&secondaryOccupancy.policeReqd=false&secondaryOccupancy.fireFighterReqd=false]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveConnectingStateroomCategories</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="b94d351e-701a-4551-bb1c-4c8d459112d5" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="abea0305-a179-4dba-96cc-b16a7b91b7bd" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="32ea08f2-6bae-419d-b1e0-21302b12bf58" name="Match content of [header]">
          <con:configuration>
            <path>$['header']</path>
            <content>{"status":"Failure","error":[{"code":"InvalidDate","description":"Sail date invalid.","component":"sailDate"}]}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="4be35cd2-8b1a-4bc8-a1d5-12c6b2942b61" name="Match content of [code]">
          <con:configuration>
            <path>$['header']['error'][0]['code']</path>
            <content>InvalidDate</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="primaryOccupancy.seniorReqd" value="${DataSource#primary_seniorReqd}"/>
          <con:entry key="primaryOccupancy.militaryReqd" value="${DataSource#primary_militaryReqd}"/>
          <con:entry key="includeAllStaterooms" value="${DataSource#includeAllStaterooms}"/>
          <con:entry key="agencyId" value="${DataSource#agencyId}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="primaryOccupancy.guestAge" value="${DataSource#primary_guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="secondaryOccupancy.accessibleReqd" value="${DataSource#secondary_accessibleReqd}"/>
          <con:entry key="currency" value="${DataSource#currency}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="primaryOccupancy.accessibleReqd" value="${DataSource#primary_accessibleReqd}"/>
          <con:entry key="secondaryOccupancy.guestAge" value="${DataSource#secondary_guestAge}"/>
          <con:entry key="primaryOccupancy.fireFighterReqd" value="${DataSource#primary_fireFighterReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="secondaryOccupancy.fireFighterReqd" value="${DataSource#secondary_fireFighterReqd}"/>
          <con:entry key="stateroomType" value="${DataSource#stateroomType}"/>
          <con:entry key="secondaryOccupancy.policeReqd" value="${DataSource#secondary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.seniorReqd" value="${DataSource#secondary_seniorReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="primaryOccupancy.policeReqd" value="${DataSource#primary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.militaryReqd" value="${DataSource#secondary_militaryReqd}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest8-invalid fareCode" id="033f4864-f472-4a86-8d3e-f8d05baa308c">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveConnectingStateroomCategories" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest8-invalid fareCode" id="5cbc4209-70c0-4f32-8a55-09a73e8a3f01" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst1/rest/v3/retrieveConnectingStateroomCategories?header.application=royalcaribbean.com&header.brand=R&header.domainId=1&header.language=en_US&countryCode=USA&shipCode=AD&sailDate=2022-11-10&packageId=AD04W115&stateroomType=BALCONY&currency=USD&fareCode=BESTRATE&primaryOccupancy.guestAge=25&primaryOccupancy.accessibleReqd=false&primaryOccupancy.seniorReqd=false&primaryOccupancy.militaryReqd=false&primaryOccupancy.policeReqd=false&primaryOccupancy.fireFighterReqd=false&secondaryOccupancy.guestAge=25&secondaryOccupancy.accessibleReqd=false&secondaryOccupancy.seniorReqd=false&secondaryOccupancy.militaryReqd=false&secondaryOccupancy.policeReqd=false&secondaryOccupancy.fireFighterReqd=false]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveConnectingStateroomCategories</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="b94d351e-701a-4551-bb1c-4c8d459112d5" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="abea0305-a179-4dba-96cc-b16a7b91b7bd" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="primaryOccupancy.seniorReqd" value="${DataSource#primary_seniorReqd}"/>
          <con:entry key="primaryOccupancy.militaryReqd" value="${DataSource#primary_militaryReqd}"/>
          <con:entry key="includeAllStaterooms" value="${DataSource#includeAllStaterooms}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="primaryOccupancy.guestAge" value="${DataSource#primary_guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="secondaryOccupancy.accessibleReqd" value="${DataSource#secondary_accessibleReqd}"/>
          <con:entry key="fareCode" value="${DataSource1#fareCode}"/>
          <con:entry key="currency" value="${DataSource#currency}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="primaryOccupancy.accessibleReqd" value="${DataSource#primary_accessibleReqd}"/>
          <con:entry key="secondaryOccupancy.guestAge" value="${DataSource#secondary_guestAge}"/>
          <con:entry key="primaryOccupancy.fireFighterReqd" value="${DataSource#primary_fireFighterReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="secondaryOccupancy.fireFighterReqd" value="${DataSource#secondary_fireFighterReqd}"/>
          <con:entry key="stateroomType" value="${DataSource#stateroomType}"/>
          <con:entry key="secondaryOccupancy.policeReqd" value="${DataSource#secondary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.seniorReqd" value="${DataSource#secondary_seniorReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="primaryOccupancy.policeReqd" value="${DataSource#primary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.militaryReqd" value="${DataSource#secondary_militaryReqd}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest9-blank secondary guestAge" id="3aea487b-8dca-4201-9d2a-fb9d2a31ced9">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveConnectingStateroomCategories" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest9-blank secondary guestAge" id="5cbc4209-70c0-4f32-8a55-09a73e8a3f01" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst1/rest/v3/retrieveConnectingStateroomCategories?header.application=royalcaribbean.com&header.brand=R&header.domainId=1&header.language=en_US&countryCode=USA&shipCode=AD&sailDate=2022-11-10&packageId=AD04W115&stateroomType=BALCONY&currency=USD&fareCode=BESTRATE&primaryOccupancy.guestAge=25&primaryOccupancy.accessibleReqd=false&primaryOccupancy.seniorReqd=false&primaryOccupancy.militaryReqd=false&primaryOccupancy.policeReqd=false&primaryOccupancy.fireFighterReqd=false&secondaryOccupancy.accessibleReqd=false&secondaryOccupancy.seniorReqd=false&secondaryOccupancy.militaryReqd=false&secondaryOccupancy.policeReqd=false&secondaryOccupancy.fireFighterReqd=false]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveConnectingStateroomCategories</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="b94d351e-701a-4551-bb1c-4c8d459112d5" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="abea0305-a179-4dba-96cc-b16a7b91b7bd" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="f1499a0d-9b81-4dc7-b92c-414563b8bd7c" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="primaryOccupancy.seniorReqd" value="${DataSource#primary_seniorReqd}"/>
          <con:entry key="primaryOccupancy.militaryReqd" value="${DataSource#primary_militaryReqd}"/>
          <con:entry key="includeAllStaterooms" value="${DataSource#includeAllStaterooms}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="primaryOccupancy.guestAge" value="${DataSource#primary_guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="secondaryOccupancy.accessibleReqd" value="${DataSource#secondary_accessibleReqd}"/>
          <con:entry key="fareCode" value="${DataSource#fareCode}"/>
          <con:entry key="currency" value="${DataSource#currency}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="primaryOccupancy.accessibleReqd" value="${DataSource#primary_accessibleReqd}"/>
          <con:entry key="primaryOccupancy.fireFighterReqd" value="${DataSource#primary_fireFighterReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="secondaryOccupancy.fireFighterReqd" value="${DataSource#secondary_fireFighterReqd}"/>
          <con:entry key="stateroomType" value="${DataSource#stateroomType}"/>
          <con:entry key="secondaryOccupancy.policeReqd" value="${DataSource#secondary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.seniorReqd" value="${DataSource#secondary_seniorReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="primaryOccupancy.policeReqd" value="${DataSource#primary_policeReqd}"/>
          <con:entry key="secondaryOccupancy.militaryReqd" value="${DataSource#secondary_militaryReqd}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>Request</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Response</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>PackageCode</con:name>
      <con:value>AD04W115</con:value>
    </con:property>
    <con:property>
      <con:name>ShipCode</con:name>
      <con:value>AD</con:value>
    </con:property>
    <con:property>
      <con:name>SailDate</con:name>
      <con:value>2022-11-10</con:value>
    </con:property>
    <con:property>
      <con:name>FareCode</con:name>
      <con:value>J2161620</con:value>
    </con:property>
    <con:property>
      <con:name>Status</con:name>
      <con:value>PASS</con:value>
    </con:property>
    <con:property>
      <con:name>Validation1</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Validation2</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Validation</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Description</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Description1</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Description2</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Validation3</con:name>
      <con:value>**Error description is displayed for no guestAge**</con:value>
    </con:property>
    <con:property>
      <con:name>Description3</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Request1</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Response1</con:name>
      <con:value/>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>db63ad32-c665-47cd-8bcc-f1b268ccdffd</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:environmentSpec>
    <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
</con:testCase>