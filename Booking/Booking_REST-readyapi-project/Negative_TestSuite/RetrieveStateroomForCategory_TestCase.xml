<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="0ffdb8a5-bf32-494f-9887-0e673aff1626" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RetrieveStateroomForCategory_TestCase" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="0ffdb8a5-bf32-494f-9887-0e673aff1626fileName">RetrieveStateroomForCategory_TestCase</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="datasource" name="DataSource" id="14ecb327-0e09-4d0c-a74b-b04610aeb559">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration>
          <file>Booking_REST_Input.xls</file>
          <worksheet>RetrieveStateroomsForCategory</worksheet>
          <cell>A2</cell>
          <ignoreEmpty>false</ignoreEmpty>
          <evaluateFormulas>false</evaluateFormulas>
        </con:configuration>
      </con:dataSource>
      <con:shared>false</con:shared>
      <con:restartShared>false</con:restartShared>
      <con:property>S.No</con:property>
      <con:property>ServiceName</con:property>
      <con:property>Operation Name</con:property>
      <con:property>ExecutionFlag</con:property>
      <con:property>TestCaseName</con:property>
      <con:property>TestCaseDescription</con:property>
      <con:property>application</con:property>
      <con:property>brand</con:property>
      <con:property>domainId</con:property>
      <con:property>language</con:property>
      <con:property>uuid</con:property>
      <con:property>countryCode</con:property>
      <con:property>agencyId</con:property>
      <con:property>bookingAccessToken</con:property>
      <con:property>shipCode</con:property>
      <con:property>sailDate</con:property>
      <con:property>currencyCode</con:property>
      <con:property>packageId</con:property>
      <con:property>categoryCode</con:property>
      <con:property>guestAge</con:property>
      <con:property>fareCode</con:property>
      <con:property>seniorReqd</con:property>
      <con:property>accessibleReqd</con:property>
      <con:property>airportCityCode</con:property>
      <con:property>airportCityName</con:property>
      <con:property>status</con:property>
      <con:property>deckCode</con:property>
      <con:property>Orchestration_application</con:property>
      <con:property>Orchestration_brand</con:property>
      <con:property>Orchestration_office</con:property>
      <con:property>Orchestration_country</con:property>
      <con:property>Orchestration_currency</con:property>
      <con:property>Orchestration_channel</con:property>
      <con:property>Orchestration_bookingType</con:property>
      <con:property>Orchestration_cruiseType</con:property>
      <con:property>Orchestration_accessibleCabins</con:property>
      <con:property>Orchestration_Facets</con:property>
      <con:property>Orchestration_results</con:property>
      <con:property>Orchestration_pagination</con:property>
      <con:property>Orchestration_Prices</con:property>
      <con:property>Orchestration_guestAge</con:property>
      <con:property>Orchestration_includeDeckInfo</con:property>
      <con:property>Orchestration_seniorReqd</con:property>
      <con:property>Orchestration_militaryReqd</con:property>
      <con:property>Orchestration_policeReqd</con:property>
      <con:property>Orchestration_fireFighterReqd</con:property>
      <con:property>Orchestration_includeAllStaterooms</con:property>
      <con:property>Orchestration_includeUpsell</con:property>
      <con:property>Orchestration_includePromoContent</con:property>
      <con:property>Orchestration_includeCategory</con:property>
      <con:property>Orchestration_accessibleReqd</con:property>
      <con:startRow>1</con:startRow>
      <con:endRow>2</con:endRow>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:trimValues>false</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
      <con:stopDatasourceExhausted>false</con:stopDatasourceExhausted>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CruiseSearch" id="ac2fa05d-44c2-455c-8e7d-a4625b797eee">
    <con:settings/>
    <con:config service="CruiseSearch" resourcePath="/cruiseSearch?" methodName="CruiseSearch" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="CruiseSearch" id="311d37c2-2066-49ea-aeb4-3adc006be12d" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://eslbservicestst01.rccl.com:13000</con:endpoint>
        <con:request/>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/search/rest/cruiseSearch</con:originalUri>
        <con:assertion type="XPath Match" id="63395426-ef62-4ad5-b84f-92c0cf663d5c" name="Match content of [status]">
          <con:configuration>
            <path>declare namespace ns2='http://www.rccl.com/esl/services/search/v2';
//ns2:CruiseSearchResponse[1]/header[1]/status[1]/text()</path>
            <content>Success</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="criteria.channel" value="${DataSource#Orchestration_channel}"/>
          <con:entry key="header.brand" value="${DataSource#Orchestration_brand}"/>
          <con:entry key="header.application" value="${DataSource#Orchestration_application}"/>
          <con:entry key="criteria.office" value="${DataSource#Orchestration_office}"/>
          <con:entry key="criteria.cruiseType.value" value="${DataSource#Orchestration_cruiseType}"/>
          <con:entry key="resultsPreference.pagination.count" value="${DataSource#Orchestration_pagination}"/>
          <con:entry key="criteria.country" value="${DataSource#Orchestration_country}"/>
          <con:entry key="resultsPreference.includeResults" value="${DataSource#Orchestration_results}"/>
          <con:entry key="resultsPreference.includePrices" value="${DataSource#Orchestration_Prices}"/>
          <con:entry key="criteria.currency" value="${DataSource#Orchestration_currency}"/>
          <con:entry key="criteria.brand.value" value="${DataSource#Orchestration_brand}"/>
          <con:entry key="resultsPreference.includeFacets" value="${DataSource#Orchestration_Facets}"/>
          <con:entry key="criteria.bookingType" value="${DataSource#Orchestration_bookingType}"/>
          <con:entry key="criteria.accessibleCabins" value="${DataSource#Orchestration_accessibleCabins}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>criteria.office</con:entry>
          <con:entry>criteria.country</con:entry>
          <con:entry>criteria.currency</con:entry>
          <con:entry>criteria.channel</con:entry>
          <con:entry>criteria.bookingType</con:entry>
          <con:entry>criteria.cruiseType.value</con:entry>
          <con:entry>criteria.brand.value</con:entry>
          <con:entry>criteria.ship.value</con:entry>
          <con:entry>criteria.port.value</con:entry>
          <con:entry>criteria.portOfCall.value</con:entry>
          <con:entry>criteria.tourCity.value</con:entry>
          <con:entry>criteria.region.value</con:entry>
          <con:entry>criteria.duration.value</con:entry>
          <con:entry>criteria.packageId.value</con:entry>
          <con:entry>criteria.marketingPromotionType.value</con:entry>
          <con:entry>criteria.marketingPromotionId.value</con:entry>
          <con:entry>criteria.onboardActivity.value</con:entry>
          <con:entry>criteria.sailingDate.dateRange.from</con:entry>
          <con:entry>criteria.sailingDate.dateRange.to</con:entry>
          <con:entry>criteria.startDate.dateRange.from</con:entry>
          <con:entry>criteria.startDate.dateRange.to</con:entry>
          <con:entry>criteria.occupancy.adult</con:entry>
          <con:entry>criteria.occupancy.child</con:entry>
          <con:entry>criteria.occupancy.infant</con:entry>
          <con:entry>criteria.priceRange.min</con:entry>
          <con:entry>criteria.priceRange.max</con:entry>
          <con:entry>criteria.priceRange.cabinClass</con:entry>
          <con:entry>criteria.accessibleCabins</con:entry>
          <con:entry>qualifiers.priceId.value</con:entry>
          <con:entry>qualifiers.promotionId.value</con:entry>
          <con:entry>qualifiers.promotionType.value</con:entry>
          <con:entry>qualifiers.residentType.promotionType</con:entry>
          <con:entry>qualifiers.residentType.state</con:entry>
          <con:entry>qualifiers.loyaltyType.promotionType</con:entry>
          <con:entry>qualifiers.loyaltyType.loyaltyTier.name</con:entry>
          <con:entry>qualifiers.loyaltyType.loyaltyTier.value</con:entry>
          <con:entry>qualifiers.airType.promotionType</con:entry>
          <con:entry>qualifiers.airType.gateway</con:entry>
          <con:entry>qualifiers.priceScope</con:entry>
          <con:entry>qualifiers.qualifierScope</con:entry>
          <con:entry>qualifiers.searchScope</con:entry>
          <con:entry>resultsPreference.includeFacets</con:entry>
          <con:entry>resultsPreference.includeResults</con:entry>
          <con:entry>resultsPreference.includeOnlyIfPriceAvailable</con:entry>
          <con:entry>resultsPreference.sortBy</con:entry>
          <con:entry>resultsPreference.sortOrder</con:entry>
          <con:entry>resultsPreference.pagination.count</con:entry>
          <con:entry>resultsPreference.pagination.offset</con:entry>
          <con:entry>resultsPreference.strictSearch</con:entry>
          <con:entry>resultsPreference.groupBy</con:entry>
          <con:entry>resultsPreference.guestPricing</con:entry>
          <con:entry>resultsPreference.priceLevel.bestPricedCategory</con:entry>
          <con:entry>resultsPreference.priceLevel.cabinClass</con:entry>
          <con:entry>resultsPreference.bundleComponent.value</con:entry>
          <con:entry>resultsPreference.includePrices</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="FetchValues" id="4b6c269d-43a7-41d0-8645-aca2a6662b39">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*
def tc = testRunner.testCase.testSuite.testCases["RetrieveStateroomForCategory_TestCase"];

def ts = testRunner.testCase.getTestStepByName("CruiseSearch")
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

def packageCode = res.resultsBySailing.sailingSummaryWithClassLevelPricing[0].sailingRef.@package.text();
testRunner.testCase.setPropertyValue("PackageCode",packageCode)

String shipCode= packageCode.substring(0,2);
testRunner.testCase.setPropertyValue("ShipCode",shipCode)

def sailDate = res.resultsBySailing.sailingSummaryWithClassLevelPricing[0].sailingRef.@saildate.text();
testRunner.testCase.setPropertyValue("SailDate",sailDate)

def id = res.resultsBySailing.sailingSummaryWithClassLevelPricing[0].cabinClassPricing[0].price[0].@priceId.text();
if(id.equals('')){
	def fareCode = res.resultsBySailing.sailingSummaryWithClassLevelPricing[0].cabinClassPricing[0].price[0].promotion.@id.text();
	testRunner.testCase.setPropertyValue("FareCode",fareCode)
}
else{
	testRunner.testCase.setPropertyValue("FareCode",id)
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="RetrieveStateroomCategories" id="c2e74b03-82ea-4c1a-99e2-d46fcb1c672d">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroomCategories" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="RetrieveStateroomCategories" id="5fba8706-403e-4671-b10c-17fe0c3f35b3" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="AppKey" value="${#Project#AppKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://stg1.mesos.rccl.com/booking-stg1/v4/booking/rest/v3/</con:endpoint>
        <con:request/>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroomCategories</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="93da5785-2c7d-4a72-916d-30c090caa0a5" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="Simple Contains" id="4a8da4a7-ccf5-4f22-998a-18ea0f33bb0a" name="Contains">
          <con:configuration>
            <token>Success</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:assertion type="Simple Contains" id="fac3c05f-e8da-4c41-84e0-6a5d787f3bfb" name="Contains 1">
          <con:configuration>
            <token>"stateroomCategoryTypes"</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:assertion type="Simple Contains" id="bc1019af-2e73-4c66-a7fb-bf3e6116c239" name="Contains 2">
          <con:configuration>
            <token>"categories"</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="accessibleReqd" value="${DataSource#accessibleReqd}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="header.application" value="${DataSource#Orchestration_application}"/>
          <con:entry key="policeReqd" value="${DataSource#Orchestration_policeReqd}"/>
          <con:entry key="includeDeckInfo" value="${DataSource#Orchestration_includeDeckInfo}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="militaryReqd" value="${DataSource#Orchestration_militaryReqd}"/>
          <con:entry key="includeAllStaterooms" value="${DataSource#Orchestration_includeAllStaterooms}"/>
          <con:entry key="debugId" value=""/>
          <con:entry key="header.brand" value="${DataSource#Orchestration_brand}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="seniorReqd" value="${DataSource#Orchestration_seniorReqd}"/>
          <con:entry key="guestAge[0]" value="${DataSource#Orchestration_guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="fareCode" value="${DataSource#fareCode}"/>
          <con:entry key="fireFighterReqd" value="${DataSource#Orchestration_fireFighterReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>countryCode</con:entry>
          <con:entry>agencyId</con:entry>
          <con:entry>bookingAccessToken</con:entry>
          <con:entry>bookingId</con:entry>
          <con:entry>shipCode</con:entry>
          <con:entry>sailDate</con:entry>
          <con:entry>packageId</con:entry>
          <con:entry>stateroomType</con:entry>
          <con:entry>currency</con:entry>
          <con:entry>guestAge[0]</con:entry>
          <con:entry>fareCode</con:entry>
          <con:entry>selectedFareCode</con:entry>
          <con:entry>numberOfCabins</con:entry>
          <con:entry>includeDeckInfo</con:entry>
          <con:entry>accessibleReqd</con:entry>
          <con:entry>seniorReqd</con:entry>
          <con:entry>militaryReqd</con:entry>
          <con:entry>policeReqd</con:entry>
          <con:entry>fireFighterReqd</con:entry>
          <con:entry>stateCode</con:entry>
          <con:entry>loyaltyId</con:entry>
          <con:entry>couponCodes</con:entry>
          <con:entry>includeAllStaterooms</con:entry>
          <con:entry>includeUpsell</con:entry>
          <con:entry>includePromoContent</con:entry>
          <con:entry>includeCategory</con:entry>
          <con:entry>debugId</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b30addaa-2177-45d9-85a7-b9dc93b7fcdf">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="FetchCategoryCode" id="8c2db0bd-78d9-4c09-bfb6-598b9053befb">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*
def tc = testRunner.testCase.testSuite.testCases["RetrieveStateroomForCategory_TestCase"];

def ts = testRunner.testCase.getTestStepByName("RetrieveStateroomCategories")
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

def categoryCode = res.stateroomCategoryTypes.e[0].categories.e[0].stateroomCategoryCode.text();
testRunner.testCase.setPropertyValue("CategoryCode",categoryCode)

def selectedFareCode = res.stateroomCategoryTypes.e[0].categories.e[0].selectedFareCode.text();
testRunner.testCase.setPropertyValue("FareCode",selectedFareCode)</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Groovy Script" id="80f4a011-a7f2-47ad-b8c0-a13c78154804">
    <con:settings/>
    <con:config>
      <script><![CDATA[import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*

def alert = com.eviware.soapui.support.UISupport;
def tc= testRunner.testCase.testSuite.testCases["RetrieveStateroomForCategory_TestCase"];
       
def stepResult;
def req_status;
def TCpointer = context.expand('${DataSource#TestCaseName}') ;
def ExecutionFlag = context.expand('${DataSource#ExecutionFlag}') ;
tc.setPropertyValue("Request","");
tc.setPropertyValue("Response","");

def orc1 = testRunner.testCase.getTestStepByName("CruiseSearch");
def orc1_assertion_data = orc1.getAssertionStatus();

def orc2 = testRunner.testCase.getTestStepByName("RetrieveStateroomCategories");
def orc2_assertion_data = orc2.getAssertionStatus();

List<String> orc_assertion_data = Arrays.asList(orc1_assertion_data,orc2_assertion_data);

if(!orc_assertion_data.toString().contains("FAILED"))
{

//For FunctionalTest1
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC1" || TCpointer == "RetrieveStateroomsForCategory_TC4")
	{
		stepResult = testRunner.runTestStepByName( "FunctionalTest1");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest1");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Success is expected in Response when all valid inputs are given to the request**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Success in status is shown as expected when all the valid inputs are given to the request**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For contains 1
				if(assertion.assertable.getAssertionByName("Contains 1").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**List of cabins should be displayed when all valid inputs are given to the request**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains 1").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**List of cabins are displayed as expected when all the valid inputs are given to the request**");
				     tc.setPropertyValue("Description3"," ");
				}
				
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest1_International
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC2")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		stepResult = testRunner.runTestStepByName( "FunctionalTest1_International");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
	     {
	     	tc.setPropertyValue("Status","PASS");
		}
	     else if(req_status == "FAILED")
	     {
	     	tc.setPropertyValue("Status","FAIL");
	     }
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	     }
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest1_International");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
		
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Success is expected in Response when all valid inputs are given to the request**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Success in status is shown as expected when all the valid inputs are given to the request**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For contains 1
				if(assertion.assertable.getAssertionByName("Contains 1").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**List of cabins should be displayed when all valid inputs are given to the request**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains 1").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**List of cabins are displayed as expected when all the valid inputs are given to the request**");
				     tc.setPropertyValue("Description3"," ");
				}
				
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest2
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC3")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		stepResult = testRunner.runTestStepByName( "FunctionalTest2");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
	     {
	     	tc.setPropertyValue("Status","PASS");
	     }
	     else if(req_status == "FAILED")
	     {
	     	tc.setPropertyValue("Status","FAIL");
	     }
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	     }
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest2");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected in Response when guestAge is less than 21 years to request**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response when guestAge is less than 21 years to request**");
				     tc.setPropertyValue("Description2"," ");
				}
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed when guestAge is less than 21 years**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed when guestAge is less than 21 years**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest3
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC5")
	{
		stepResult = testRunner.runTestStepByName( "FunctionalTest3");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
	     {
	     	tc.setPropertyValue("Status","PASS");
	     }
	     else if(req_status == "FAILED")
	     {
	     	tc.setPropertyValue("Status","FAIL");
	     }
	     else if(req_status == "UNKNOWN")
	    	{
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	     }
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest3");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected in Response when guestAge is less than 60 years and seniorReqd is true to request**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response when guestAge is less than 60 years and seniorReqd is true to request**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed when guestAge is less than 60 years and seniorReqd is true to request**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed when guestAge is less than 60 years and seniorReqd is true to request**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest4
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC6")
	{
		stepResult = testRunner.runTestStepByName( "FunctionalTest4");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
	     {
	     	tc.setPropertyValue("Status","PASS");
	     }
	     else if(req_status == "FAILED")
	     {
	     	tc.setPropertyValue("Status","FAIL");
	     }
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	     }
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest4");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
		
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed in Response when guestAge is 60 years and seniorReqd is false to request**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response when guestAge is 60 years and seniorReqd is false to request**");
				     tc.setPropertyValue("Description2"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest1
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC7")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest1");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
	     {
	     	tc.setPropertyValue("Status","PASS");
	     }
	     else if(req_status == "FAILED")
	     {
	     	tc.setPropertyValue("Status","FAIL");
	     }
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	     }
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest1");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected for null or invalid application**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for null or invalid application**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For Not Contains
				if(assertion.assertable.getAssertionByName("Not Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**List of cabins should not be displayed for null or invalid application**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Not Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Valid error description is displayed for null or invalid application**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest2
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC9")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest2");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
	     {
	     	tc.setPropertyValue("Status","PASS");
	     }
	     else if(req_status == "FAILED")
	     {
	     	tc.setPropertyValue("Status","FAIL");
	     }
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	     }
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest2");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected for no brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response for no brand**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no brand**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest3
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC10")
	{
		 stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest3");
		 req_status = stepResult.getStatus().toString();
		 if(req_status == "OK")
		 {
	      	tc.setPropertyValue("Status","PASS");
	      }
	      else if(req_status == "FAILED")
	      {
	      	tc.setPropertyValue("Status","FAIL");
	      }
	      else if(req_status == "UNKNOWN")
	      {
	      	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	      }
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest3");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected in Response for invalid brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response for invalid brand**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid brand**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest4
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC11")
	{
		 stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest4");
		 req_status = stepResult.getStatus().toString();
		 if(req_status == "OK")
		 {
	      	tc.setPropertyValue("Status","PASS");
	      }
	      else if(req_status == "FAILED")
	      {
	      	tc.setPropertyValue("Status","FAIL");
	      }
	      else if(req_status == "UNKNOWN")
	      {
	      	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	      }
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest4");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected in Response for no countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response for no countryCode**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no countryCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest5
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC12")
	{
		 stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest5");
		 req_status = stepResult.getStatus().toString();
		 if(req_status == "OK")
		 {
	      	tc.setPropertyValue("Status","PASS");
	      }
	      else if(req_status == "FAILED")
	      {
	      	tc.setPropertyValue("Status","FAIL");
	      }
	      else if(req_status == "UNKNOWN")
	      {
	      	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	      }
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest5");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected in Response for invalid countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response for invalid countryCode**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid countryCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest6
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC13")
	{
		 stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest6");
		 req_status = stepResult.getStatus().toString();
		 if(req_status == "OK")
		 {
	      	tc.setPropertyValue("Status","PASS");
	      }
	      else if(req_status == "FAILED")
	      {
	      	tc.setPropertyValue("Status","FAIL");
	      }
	      else if(req_status == "UNKNOWN")
	      {
	      	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	      }
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest6");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected in Response for null shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response for null shipCode**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for null shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for null shipCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest7
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC15" || TCpointer == "RetrieveStateroomsForCategory_TC16")
	{
		 stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest7");
		 req_status = stepResult.getStatus().toString();
		 if(req_status == "OK")
		 {
	      	tc.setPropertyValue("Status","PASS");
	      }
	      else if(req_status == "FAILED")
	      {
	      	tc.setPropertyValue("Status","FAIL");
	      }
	      else if(req_status == "UNKNOWN")
	      {
	      	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	      }
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest7");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected in Response for no or invalid sailDate**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response for no or invalid sailDate**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no or invalid sailDate**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no or invalid sailDate**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest8
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC17")
	{
		 stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest8");
		 req_status = stepResult.getStatus().toString();
		 if(req_status == "OK")
		 {
	      	tc.setPropertyValue("Status","PASS");
	      }
	      else if(req_status == "FAILED")
	      {
	      	tc.setPropertyValue("Status","FAIL");
	      }
	      else if(req_status == "UNKNOWN")
	      {
	      	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	      }
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest8");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected in Response for no packageCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response for no packageCode**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**List of cabins should not be displayed for no packageCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no packageCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest9
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC18")
	{
		 stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest9");
		 req_status = stepResult.getStatus().toString();
		 if(req_status == "OK")
		 {
	      	tc.setPropertyValue("Status","PASS");
	      }
	      else if(req_status == "FAILED")
	      {
	      	tc.setPropertyValue("Status","FAIL");
	      }
	      else if(req_status == "UNKNOWN")
	      {
	      	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	      }
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest9");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected in Response for invalid packageCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response for invalid packageCode**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid packageCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid packageCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest10
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC19")
	{
		 stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest10");
		 req_status = stepResult.getStatus().toString();
		 if(req_status == "OK")
		 {
	      	tc.setPropertyValue("Status","PASS");
	      }
	      else if(req_status == "FAILED")
	      {
	      	tc.setPropertyValue("Status","FAIL");
	      }
	      else if(req_status == "UNKNOWN")
	      {
	      	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	      }
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest10");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected in Response for no categoryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response for no categoryCode**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no categoryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no categoryCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest11
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC21")
	{
		 stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest11");
		 req_status = stepResult.getStatus().toString();
		 if(req_status == "OK")
		 {
	      	tc.setPropertyValue("Status","PASS");
	      }
	      else if(req_status == "FAILED")
	      {
	      	tc.setPropertyValue("Status","FAIL");
	      }
	      else if(req_status == "UNKNOWN")
	      {
	      	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	      }
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest11");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected in Response for no guestAge**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response for no guestAge**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no guestAge**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no guestAge**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest12
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC22")
	{
		 stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest12");
		 req_status = stepResult.getStatus().toString();
		 if(req_status == "OK")
		 {
	      	tc.setPropertyValue("Status","PASS");
	      }
	      else if(req_status == "FAILED")
	      {
	      	tc.setPropertyValue("Status","FAIL");
	      }
	      else if(req_status == "UNKNOWN")
	      {
	      	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	      }
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest12");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected in Response for null fareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response for null fareCode**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for null fareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for null fareCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest13
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC14")
	{
		 stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest13");
		 req_status = stepResult.getStatus().toString();
		 if(req_status == "OK")
		 {
	      	tc.setPropertyValue("Status","PASS");
	      }
	      else if(req_status == "FAILED")
	      {
	      	tc.setPropertyValue("Status","FAIL");
	      }
	      else if(req_status == "UNKNOWN")
	      {
	      	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	      }
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest13");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected in Response for invalid shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response for invalid shipCode**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid shipCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest14
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC20")
	{
		 stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest14");
		 req_status = stepResult.getStatus().toString();
		 if(req_status == "OK")
		 {
	      	tc.setPropertyValue("Status","PASS");
	      }
	      else if(req_status == "FAILED")
	      {
	      	tc.setPropertyValue("Status","FAIL");
	      }
	      else if(req_status == "UNKNOWN")
	      {
	      	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	      }
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest14");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected in Response for invalid categoryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response for invalid categoryCode**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid categoryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid categoryCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest15
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroomsForCategory_TC23")
	{
		 stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest15");
		 req_status = stepResult.getStatus().toString();
		 if(req_status == "OK")
		 {
	      	tc.setPropertyValue("Status","PASS");
	      }
	      else if(req_status == "FAILED")
	      {
	      	tc.setPropertyValue("Status","FAIL");
	      }
	      else if(req_status == "UNKNOWN")
	      {
	      	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	      }
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest15");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request","");
			tc.setPropertyValue("Response","");
			tc.setPropertyValue("Request1","");
			tc.setPropertyValue("Response1","");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString();
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation1",Val_Prop_Message);
				          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
			
				     tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
				
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected in Response for invalid fareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed in Response for invalid fareCode**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid fareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				                                                    
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid fareCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

if(ExecutionFlag == "No")
{
	tc.setPropertyValue("Status","NA");
	tc.setPropertyValue("Validation","NA")
	tc.setPropertyValue("Description","NA")
}
}

if(orc_assertion_data.toString().contains("FAILED"))
{
	tc.setPropertyValue("Description","Error in the services used for orchestration")
	tc.setPropertyValue("Validation","")
	tc.setPropertyValue("Status","Fail")
}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest1-invalid brand" id="53141516-af4c-4852-a3e2-09e7e7c62ba2">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroomsForCategory" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest1-invalid brand" id="c2271e12-b35c-4d4d-99ab-12aa471a0db9" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://eslbservicestst01.rccl.com:13000</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst1/rest/v3/retrieveStateroomsForCategory?header.application=celebritycruises.com&header.brand=C&header.domainId=1&header.language=en_US&countryCode=USA&shipCode=AX&sailDate=2022-12-17&packageId=AX06W137&stateroomOccupancy.guestAge=24&stateroomOccupancy.fareCode=BESTRATE&stateroomOccupancy.seniorReqd=false&stateroomOccupancy.accessibleReqd=false&categoryCode=11&debugId=]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroomsForCategory</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="f77dcaac-0017-49d8-919b-543b16a80b12" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="04c34f4b-f766-4b33-a535-24779120222d" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6b5979c3-d077-4853-ace5-59fc04df3e88" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="2ff17fc0-29ec-4589-9052-a7c80ce3b3e7" name="Match content of [code]">
          <con:configuration>
            <path>$['header']['error'][0]['code']</path>
            <content>CATL-005</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource#seniorReqd}"/>
          <con:entry key="debugId" value=""/>
          <con:entry key="categoryCode" value="${#TestCase#CategoryCode}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource#accessibleReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource#guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="stateroomOccupancy.fareCode" value="${DataSource#fareCode}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>countryCode</con:entry>
          <con:entry>agencyId</con:entry>
          <con:entry>bookingAccessToken</con:entry>
          <con:entry>shipCode</con:entry>
          <con:entry>sailDate</con:entry>
          <con:entry>packageId</con:entry>
          <con:entry>currencyCode</con:entry>
          <con:entry>stateroomOccupancy.guestAge</con:entry>
          <con:entry>stateroomOccupancy.fareCode</con:entry>
          <con:entry>stateroomOccupancy.seniorReqd</con:entry>
          <con:entry>stateroomOccupancy.accessibleReqd</con:entry>
          <con:entry>deckCode</con:entry>
          <con:entry>categoryCode</con:entry>
          <con:entry>debugId</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="datasource" name="DataSource1" id="1ee467de-5c99-4d17-acd3-5188567d7b3c">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration>
          <file>Booking_REST_Input.xls</file>
          <worksheet>RetrieveStateroomsForCategory</worksheet>
          <cell>A2</cell>
          <ignoreEmpty>false</ignoreEmpty>
          <evaluateFormulas>false</evaluateFormulas>
        </con:configuration>
      </con:dataSource>
      <con:shared>false</con:shared>
      <con:restartShared>false</con:restartShared>
      <con:property>S.No</con:property>
      <con:property>ServiceName</con:property>
      <con:property>Operation Name</con:property>
      <con:property>ExecutionFlag</con:property>
      <con:property>TestCaseName</con:property>
      <con:property>TestCaseDescription</con:property>
      <con:property>application</con:property>
      <con:property>brand</con:property>
      <con:property>domainId</con:property>
      <con:property>language</con:property>
      <con:property>uuid</con:property>
      <con:property>countryCode</con:property>
      <con:property>agencyId</con:property>
      <con:property>bookingAccessToken</con:property>
      <con:property>shipCode</con:property>
      <con:property>sailDate</con:property>
      <con:property>currencyCode</con:property>
      <con:property>packageId</con:property>
      <con:property>categoryCode</con:property>
      <con:property>guestAge</con:property>
      <con:property>fareCode</con:property>
      <con:property>seniorReqd</con:property>
      <con:property>accessibleReqd</con:property>
      <con:property>airportCityCode</con:property>
      <con:property>airportCityName</con:property>
      <con:property>status</con:property>
      <con:property>deckCode</con:property>
      <con:property>Orchestration_application</con:property>
      <con:property>Orchestration_brand</con:property>
      <con:property>Orchestration_office</con:property>
      <con:property>Orchestration_country</con:property>
      <con:property>Orchestration_currency</con:property>
      <con:property>Orchestration_channel</con:property>
      <con:property>Orchestration_bookingType</con:property>
      <con:property>Orchestration_cruiseType</con:property>
      <con:property>Orchestration_accessibleCabins</con:property>
      <con:property>Orchestration_Facets</con:property>
      <con:property>Orchestration_results</con:property>
      <con:property>Orchestration_pagination</con:property>
      <con:property>Orchestration_Prices</con:property>
      <con:property>Orchestration_guestAge</con:property>
      <con:property>Orchestration_includeDeckInfo</con:property>
      <con:property>Orchestration_seniorReqd</con:property>
      <con:property>Orchestration_militaryReqd</con:property>
      <con:property>Orchestration_policeReqd</con:property>
      <con:property>Orchestration_fireFighterReqd</con:property>
      <con:property>Orchestration_includeAllStaterooms</con:property>
      <con:property>Orchestration_includeUpsell</con:property>
      <con:property>Orchestration_includePromoContent</con:property>
      <con:property>Orchestration_includeCategory</con:property>
      <con:property>Orchestration_accessibleReqd</con:property>
      <con:startRow>0</con:startRow>
      <con:endRow>0</con:endRow>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:trimValues>false</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
      <con:stopDatasourceExhausted>false</con:stopDatasourceExhausted>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest2-invalid deckCode" id="a3f3c2dd-f2ed-4a5b-b041-39426a3b09a9">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroomsForCategory" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest2-invalid deckCode" id="c2271e12-b35c-4d4d-99ab-12aa471a0db9" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst1/rest/v3/retrieveStateroomsForCategory?header.application=royalcaribbean.com&header.brand=R&header.domainId=1&header.language=en_US&countryCode=USA&shipCode=AX&sailDate=2022-12-17&packageId=AX06W137&stateroomOccupancy.guestAge=24&stateroomOccupancy.fareCode=BESTRATE&stateroomOccupancy.seniorReqd=false&stateroomOccupancy.accessibleReqd=false&categoryCode=11&debugId=]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroomsForCategory</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="30e6ed07-b630-4364-8e5d-3955d27cbf98" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="7626a496-4bb3-4488-9265-bd2f4c7d6628" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="83a90212-6aec-4f93-8005-25b92ff117f3" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d4c7d0c1-21ef-4236-b03b-2aa277baac69" name="Match content of [code]">
          <con:configuration>
            <path>$['header']['error'][0]['code']</path>
            <content>BKNG-0003</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.language" value="${DataSource1#language}"/>
          <con:entry key="header.application" value="${DataSource1#application}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource1#seniorReqd}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="deckCode" value="${DataSource#deckCode}"/>
          <con:entry key="debugId" value=""/>
          <con:entry key="categoryCode" value="${#TestCase#categoryCode}"/>
          <con:entry key="header.brand" value="${DataSource1#brand}"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource1#accessibleReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource1#guestAge}"/>
          <con:entry key="countryCode" value="${DataSource1#countryCode}"/>
          <con:entry key="header.domainId" value="${DataSource1#domainId}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource1#uuid}"/>
          <con:entry key="stateroomOccupancy.fareCode" value="${DataSource1#fareCode}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>countryCode</con:entry>
          <con:entry>agencyId</con:entry>
          <con:entry>bookingAccessToken</con:entry>
          <con:entry>shipCode</con:entry>
          <con:entry>sailDate</con:entry>
          <con:entry>packageId</con:entry>
          <con:entry>currencyCode</con:entry>
          <con:entry>stateroomOccupancy.guestAge</con:entry>
          <con:entry>stateroomOccupancy.fareCode</con:entry>
          <con:entry>stateroomOccupancy.seniorReqd</con:entry>
          <con:entry>stateroomOccupancy.accessibleReqd</con:entry>
          <con:entry>deckCode</con:entry>
          <con:entry>categoryCode</con:entry>
          <con:entry>debugId</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest3-blank shipCode, packageId" id="1dc17cbe-ec51-4912-bc4a-37f76e06c65d">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroomsForCategory" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest3-blank shipCode, packageId" id="c2271e12-b35c-4d4d-99ab-12aa471a0db9" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst1/rest/v3/retrieveStateroomsForCategory?header.application=royalcaribbean.com&header.brand=R&header.domainId=1&header.language=en_US&countryCode=USA&sailDate=2022-12-17&currencyCode=USD&stateroomOccupancy.guestAge=24&stateroomOccupancy.fareCode=BESTRATE&stateroomOccupancy.seniorReqd=false&stateroomOccupancy.accessibleReqd=false&categoryCode=11&debugId=]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroomsForCategory</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="d270ab60-3290-4e02-b5fb-4dc61819e135" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="b07d2f6f-5fce-4382-81d0-3f6c62d88df0" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="be54f195-ac09-4599-991c-5353c2361363" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="0b40adc1-d545-4f23-9177-1762d7ca9844" name="Match content of [code]">
          <con:configuration>
            <path>$['header']['error'][2]['code']</path>
            <content>BKNG-0003</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.language" value="${DataSource1#language}"/>
          <con:entry key="header.application" value="${DataSource1#application}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource1#seniorReqd}"/>
          <con:entry key="debugId" value=""/>
          <con:entry key="categoryCode" value="${#TestCase#CategoryCode}"/>
          <con:entry key="header.brand" value="${DataSource1#brand}"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource1#accessibleReqd}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource1#guestAge}"/>
          <con:entry key="countryCode" value="${DataSource1#countryCode}"/>
          <con:entry key="header.domainId" value="${DataSource1#domainId}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="currencyCode" value="${DataSource1#currencyCode}"/>
          <con:entry key="header.uuid" value="${DataSource1#uuid}"/>
          <con:entry key="stateroomOccupancy.fareCode" value="${DataSource1#fareCode}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>countryCode</con:entry>
          <con:entry>agencyId</con:entry>
          <con:entry>bookingAccessToken</con:entry>
          <con:entry>shipCode</con:entry>
          <con:entry>sailDate</con:entry>
          <con:entry>packageId</con:entry>
          <con:entry>currencyCode</con:entry>
          <con:entry>stateroomOccupancy.guestAge</con:entry>
          <con:entry>stateroomOccupancy.fareCode</con:entry>
          <con:entry>stateroomOccupancy.seniorReqd</con:entry>
          <con:entry>stateroomOccupancy.accessibleReqd</con:entry>
          <con:entry>deckCode</con:entry>
          <con:entry>categoryCode</con:entry>
          <con:entry>debugId</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest4-invalid shipCode" id="3cf8b6c4-8bd3-4eeb-9317-5363eb85bd5b">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroomsForCategory" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest4-invalid shipCode" id="c2271e12-b35c-4d4d-99ab-12aa471a0db9" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst1/rest/v3/retrieveStateroomsForCategory?header.application=royalcaribbean.com&header.brand=R&header.domainId=1&header.language=en_US&countryCode=USA&shipCode=CS&sailDate=2022-12-17&packageId=AX06W137&stateroomOccupancy.guestAge=24&stateroomOccupancy.fareCode=BESTRATE&stateroomOccupancy.seniorReqd=false&stateroomOccupancy.accessibleReqd=false&categoryCode=11&debugId=]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroomsForCategory</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="b4a3aef1-7c67-4e42-8ff0-ab940a54938a" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="4b46c950-e1c8-4b77-addb-60d056505d11" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="6db3bfbb-5abe-4b19-99c1-d06c14d66941" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="25a09858-9df1-4f32-9212-54ea0bfb03e9" name="Match content of [code]">
          <con:configuration>
            <path>$['header']['error'][0]['code']</path>
            <content>BKNG-0003</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.language" value="${DataSource1#language}"/>
          <con:entry key="header.application" value="${DataSource1#application}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource#seniorReqd}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="debugId" value=""/>
          <con:entry key="categoryCode" value="${#TestCase#categoryCode}"/>
          <con:entry key="header.brand" value="${DataSource1#brand}"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource#accessibleReqd}"/>
          <con:entry key="shipCode" value="${DataSource#shipCode}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource#guestAge}"/>
          <con:entry key="countryCode" value="${DataSource1#countryCode}"/>
          <con:entry key="header.domainId" value="${DataSource1#domainId}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource1#uuid}"/>
          <con:entry key="stateroomOccupancy.fareCode" value="${DataSource#fareCode}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>countryCode</con:entry>
          <con:entry>agencyId</con:entry>
          <con:entry>bookingAccessToken</con:entry>
          <con:entry>shipCode</con:entry>
          <con:entry>sailDate</con:entry>
          <con:entry>packageId</con:entry>
          <con:entry>currencyCode</con:entry>
          <con:entry>stateroomOccupancy.guestAge</con:entry>
          <con:entry>stateroomOccupancy.fareCode</con:entry>
          <con:entry>stateroomOccupancy.seniorReqd</con:entry>
          <con:entry>stateroomOccupancy.accessibleReqd</con:entry>
          <con:entry>deckCode</con:entry>
          <con:entry>categoryCode</con:entry>
          <con:entry>debugId</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest5-invalid sailDate" id="fc72380b-f18d-4092-9033-594de3e15ba6">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroomsForCategory" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest5-invalid sailDate" id="c2271e12-b35c-4d4d-99ab-12aa471a0db9" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst1/rest/v3/retrieveStateroomsForCategory?header.application=royalcaribbean.com&header.brand=R&header.domainId=1&header.language=en_US&countryCode=USA&shipCode=AX&sailDate=2018-05-05&packageId=AX06W137&stateroomOccupancy.guestAge=24&stateroomOccupancy.fareCode=BESTRATE&stateroomOccupancy.seniorReqd=false&stateroomOccupancy.accessibleReqd=false&categoryCode=11&debugId=]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroomsForCategory</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="b4a3aef1-7c67-4e42-8ff0-ab940a54938a" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="4b46c950-e1c8-4b77-addb-60d056505d11" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e0de1323-921f-4341-9075-992d31de16fd" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a083c9e8-911b-4f81-9fbf-df01cb0b74de" name="Match content of [code]">
          <con:configuration>
            <path>$['header']['error'][0]['code']</path>
            <content>BKNG-0003</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.language" value="${DataSource1#language}"/>
          <con:entry key="header.application" value="${DataSource1#application}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource1#seniorReqd}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="debugId" value=""/>
          <con:entry key="categoryCode" value="${#TestCase#categoryCode}"/>
          <con:entry key="header.brand" value="${DataSource1#brand}"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource1#accessibleReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource1#guestAge}"/>
          <con:entry key="countryCode" value="${DataSource1#countryCode}"/>
          <con:entry key="header.domainId" value="${DataSource1#domainId}"/>
          <con:entry key="sailDate" value="${DataSource#sailDate}"/>
          <con:entry key="header.uuid" value="${DataSource1#uuid}"/>
          <con:entry key="stateroomOccupancy.fareCode" value="${DataSource1#fareCode}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>countryCode</con:entry>
          <con:entry>agencyId</con:entry>
          <con:entry>bookingAccessToken</con:entry>
          <con:entry>shipCode</con:entry>
          <con:entry>sailDate</con:entry>
          <con:entry>packageId</con:entry>
          <con:entry>currencyCode</con:entry>
          <con:entry>stateroomOccupancy.guestAge</con:entry>
          <con:entry>stateroomOccupancy.fareCode</con:entry>
          <con:entry>stateroomOccupancy.seniorReqd</con:entry>
          <con:entry>stateroomOccupancy.accessibleReqd</con:entry>
          <con:entry>deckCode</con:entry>
          <con:entry>categoryCode</con:entry>
          <con:entry>debugId</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest6-sailDate" id="0636c022-f4ab-43d1-b330-04b6266a1c4e" disabled="true">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroomsForCategory" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest6-sailDate" id="c2271e12-b35c-4d4d-99ab-12aa471a0db9" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="AppKey" value="${#Project#AppKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[http://stg1.mesos.rccl.com/booking-stg1/v4/booking/rest/v3//retrieveStateroomsForCategory?header.application=royalcaribbean.com&header.brand=R&header.domainId=1&header.language=en_US&countryCode=USA&shipCode=BR&packageId=BR07M428&stateroomOccupancy.guestAge=24&stateroomOccupancy.fareCode=BESTRATE&stateroomOccupancy.seniorReqd=false&stateroomOccupancy.accessibleReqd=false&categoryCode=6V]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroomsForCategory</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="b4a3aef1-7c67-4e42-8ff0-ab940a54938a" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="4b46c950-e1c8-4b77-addb-60d056505d11" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e0de1323-921f-4341-9075-992d31de16fd" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.language" value="${DataSource1#language}"/>
          <con:entry key="header.application" value="${DataSource1#application}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource1#seniorReqd}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="debugId" value=""/>
          <con:entry key="categoryCode" value="${#TestCase#categoryCode}"/>
          <con:entry key="header.brand" value="${DataSource1#brand}"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource1#accessibleReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource1#guestAge}"/>
          <con:entry key="countryCode" value="${DataSource1#countryCode}"/>
          <con:entry key="header.domainId" value="${DataSource1#domainId}"/>
          <con:entry key="header.uuid" value="${DataSource1#uuid}"/>
          <con:entry key="stateroomOccupancy.fareCode" value="${DataSource1#fareCode}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>countryCode</con:entry>
          <con:entry>agencyId</con:entry>
          <con:entry>bookingAccessToken</con:entry>
          <con:entry>shipCode</con:entry>
          <con:entry>sailDate</con:entry>
          <con:entry>packageId</con:entry>
          <con:entry>currencyCode</con:entry>
          <con:entry>stateroomOccupancy.guestAge</con:entry>
          <con:entry>stateroomOccupancy.fareCode</con:entry>
          <con:entry>stateroomOccupancy.seniorReqd</con:entry>
          <con:entry>stateroomOccupancy.accessibleReqd</con:entry>
          <con:entry>deckCode</con:entry>
          <con:entry>categoryCode</con:entry>
          <con:entry>debugId</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest7-invalid agencyId" id="51c79617-f5d1-41b8-a365-21483fe9b7e4">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroomsForCategory" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest7-invalid agencyId" id="c2271e12-b35c-4d4d-99ab-12aa471a0db9" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst1/rest/v3/retrieveStateroomsForCategory?header.application=royalcaribbean.com&header.brand=R&header.domainId=1&header.language=en_US&agencyId=108869&shipCode=AX&sailDate=2022-12-17&packageId=AX06W137&stateroomOccupancy.guestAge=24&stateroomOccupancy.fareCode=BESTRATE&stateroomOccupancy.seniorReqd=false&stateroomOccupancy.accessibleReqd=false&categoryCode=11&debugId=]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroomsForCategory</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="b4a3aef1-7c67-4e42-8ff0-ab940a54938a" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="4b46c950-e1c8-4b77-addb-60d056505d11" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e0de1323-921f-4341-9075-992d31de16fd" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="87a641e8-2123-44cd-8581-3f361bc14c0f" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="117dc05e-307d-4c3c-ab18-6e5b5afb2c4a" name="Match content of [description]">
          <con:configuration>
            <path>$['header']['error'][0]['description']</path>
            <content>If agency provided, it must be numeric.</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.language" value="${DataSource1#language}"/>
          <con:entry key="header.application" value="${DataSource1#application}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource1#seniorReqd}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="agencyId" value="${DataSource#agencyId}"/>
          <con:entry key="debugId" value=""/>
          <con:entry key="categoryCode" value="${#TestCase#categoryCode}"/>
          <con:entry key="header.brand" value="${DataSource1#brand}"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource1#accessibleReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource1#guestAge}"/>
          <con:entry key="header.domainId" value="${DataSource1#domainId}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource1#uuid}"/>
          <con:entry key="stateroomOccupancy.fareCode" value="${DataSource1#fareCode}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>countryCode</con:entry>
          <con:entry>agencyId</con:entry>
          <con:entry>bookingAccessToken</con:entry>
          <con:entry>shipCode</con:entry>
          <con:entry>sailDate</con:entry>
          <con:entry>packageId</con:entry>
          <con:entry>currencyCode</con:entry>
          <con:entry>stateroomOccupancy.guestAge</con:entry>
          <con:entry>stateroomOccupancy.fareCode</con:entry>
          <con:entry>stateroomOccupancy.seniorReqd</con:entry>
          <con:entry>stateroomOccupancy.accessibleReqd</con:entry>
          <con:entry>deckCode</con:entry>
          <con:entry>categoryCode</con:entry>
          <con:entry>debugId</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>PackageCode</con:name>
      <con:value>AX06W137</con:value>
    </con:property>
    <con:property>
      <con:name>ShipCode</con:name>
      <con:value>AX</con:value>
    </con:property>
    <con:property>
      <con:name>SailDate</con:name>
      <con:value>2022-12-17</con:value>
    </con:property>
    <con:property>
      <con:name>FareCode</con:name>
      <con:value>J6035720</con:value>
    </con:property>
    <con:property>
      <con:name>CategoryCode</con:name>
      <con:value>11</con:value>
    </con:property>
    <con:property>
      <con:name>Status</con:name>
      <con:value>PASS</con:value>
    </con:property>
    <con:property>
      <con:name>Validation1</con:name>
      <con:value>**Response schema is validated**</con:value>
    </con:property>
    <con:property>
      <con:name>Validation2</con:name>
      <con:value>**Failure is displayed in Response for invalid fareCode**</con:value>
    </con:property>
    <con:property>
      <con:name>Validation</con:name>
      <con:value>**Response schema is validated**   **Failure is displayed in Response for invalid fareCode**   **Error description is displayed for invalid fareCode**</con:value>
    </con:property>
    <con:property>
      <con:name>Description</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Description1</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Description2</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Validation3</con:name>
      <con:value>**Error description is displayed for invalid fareCode**</con:value>
    </con:property>
    <con:property>
      <con:name>Description3</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Request</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Response</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Request1</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Response1</con:name>
      <con:value/>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>cfacf9c5-6917-404e-9299-a99afbb61354</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>6c60532c-0deb-4846-8a81-a8e23b1d5d6d</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>c0232d60-be3f-4c54-972a-5d2db8b3eef5</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>795474cc-6d25-47de-bec9-e90a85b55f15</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>82adde23-e739-4dda-b2b2-ab86fcd417cb</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>78b4839d-1ca6-499b-8d54-182bb14919c3</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>98697109-dd77-41a9-8c05-f1e1c4ecf9a7</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>f793de93-da0e-4f3b-8e3c-e3470516ebdd</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>e2c2b802-4a62-4950-ba74-cf3e6498d7b6</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>abd708cb-0b5c-4ec5-9f7c-6acd6f6013d7</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>d6830239-467e-46d0-b885-fa31fa01da98</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>186181e8-8f0d-4056-b22a-a69068f2b18e</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>1ee467de-5c99-4d17-acd3-5188567d7b3c</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:environmentSpec>
    <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
</con:testCase>
