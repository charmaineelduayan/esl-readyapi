<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="a5007150-62e6-4fbf-81b4-59447fcbc4ad" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="CreateBooking_TestCase" searchProperties="true" timeout="0" maxResults="0" disabled="true" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="a5007150-62e6-4fbf-81b4-59447fcbc4adfileName">CreateBooking_TestCase</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="datasource" name="DataSource" id="e229b681-fe71-4d39-9740-88c4e56e1a0d">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration><file>Booking_REST_Input.xls</file><worksheet>CreateBooking</worksheet><cell>A1</cell><ignoreEmpty>false</ignoreEmpty><evaluateFormulas>false</evaluateFormulas></con:configuration>
      </con:dataSource>
      <con:shared>true</con:shared>
      <con:restartShared>true</con:restartShared>
      <con:property>S.No</con:property>
      <con:property>ServiceName</con:property>
      <con:property>Operation Name</con:property>
      <con:property>ExecutionFlag</con:property>
      <con:property>TestCaseName</con:property>
      <con:property>TestCaseDescription</con:property>
      <con:property>application</con:property>
      <con:property>brand</con:property>
      <con:property>domainID</con:property>
      <con:property>language</con:property>
      <con:property>uuid</con:property>
      <con:property>countryCode</con:property>
      <con:property>agencyId</con:property>
      <con:property>bookingAccessToken</con:property>
      <con:property>profileId</con:property>
      <con:property>shipCode</con:property>
      <con:property>sailDate</con:property>
      <con:property>packageCode</con:property>
      <con:property>currencyCode</con:property>
      <con:property>vendorCode</con:property>
      <con:property>berthedCategoryCode</con:property>
      <con:property>fareCode</con:property>
      <con:property>pricedCategoryCode</con:property>
      <con:property>waitListed</con:property>
      <con:property>accessible</con:property>
      <con:property>number</con:property>
      <con:property>bedConfigCode</con:property>
      <con:property>sitting</con:property>
      <con:property>sittingType</con:property>
      <con:property>sittingInstance</con:property>
      <con:property>dine waitListed</con:property>
      <con:property>familyTime</con:property>
      <con:property>crossRefAllowed</con:property>
      <con:property>dine language</con:property>
      <con:property>smokingCode</con:property>
      <con:property>tableSize</con:property>
      <con:property>gratuitiesPrepaid</con:property>
      <con:property>code</con:property>
      <con:property>optionIndicator</con:property>
      <con:property>defaultIndicator</con:property>
      <con:property>status</con:property>
      <con:property>offers</con:property>
      <con:property>seniorReqd</con:property>
      <con:property>militaryReqd</con:property>
      <con:property>policeReqd</con:property>
      <con:property>fireFighterReqd</con:property>
      <con:property>guestRefNumber</con:property>
      <con:property>title</con:property>
      <con:property>title2</con:property>
      <con:property>firstName</con:property>
      <con:property>lastName</con:property>
      <con:property>middleName</con:property>
      <con:property>firstName2</con:property>
      <con:property>lastName2</con:property>
      <con:property>MiddleName2</con:property>
      <con:property>nameSuffix</con:property>
      <con:property>nameSuffix2</con:property>
      <con:property>age</con:property>
      <con:property>birthDate</con:property>
      <con:property>gender</con:property>
      <con:property>nationality</con:property>
      <con:property>age2</con:property>
      <con:property>birthDate2</con:property>
      <con:property>gender2</con:property>
      <con:property>nationality2</con:property>
      <con:property>id</con:property>
      <con:property>telephoneNumber</con:property>
      <con:property>telephoneCountryCode</con:property>
      <con:property>telephoneType</con:property>
      <con:property>add id</con:property>
      <con:property>type</con:property>
      <con:property>address1</con:property>
      <con:property>address2</con:property>
      <con:property>address3</con:property>
      <con:property>address4</con:property>
      <con:property>apartment</con:property>
      <con:property>city</con:property>
      <con:property>stateCode</con:property>
      <con:property>postalCode</con:property>
      <con:property>add countryCode</con:property>
      <con:property>countryName</con:property>
      <con:property>mailingAddress</con:property>
      <con:property>email</con:property>
      <con:property>email2</con:property>
      <con:property>deliveryMethod</con:property>
      <con:property>cruise language</con:property>
      <con:property>airportCityCode</con:property>
      <con:property>airportCityName</con:property>
      <con:property>trans status</con:property>
      <con:property>loyaltyId</con:property>
      <con:property>special code</con:property>
      <con:property>description</con:property>
      <con:property>date</con:property>
      <con:property>nbrOfYears</con:property>
      <con:property>sel code</con:property>
      <con:property>message</con:property>
      <con:property>selectedOptionsIndicator</con:property>
      <con:property>autoAddedIndicator</con:property>
      <con:property>mandatoryIndicator</con:property>
      <con:property>cardType</con:property>
      <con:property>cardToken</con:property>
      <con:property>expireDate</con:property>
      <con:property>extendPayments</con:property>
      <con:property>card firstName</con:property>
      <con:property>card lastName</con:property>
      <con:property>card id</con:property>
      <con:property>card type</con:property>
      <con:property>card address1</con:property>
      <con:property>card address2</con:property>
      <con:property>card address3</con:property>
      <con:property>card address4</con:property>
      <con:property>card apartment</con:property>
      <con:property>card city</con:property>
      <con:property>card stateCode</con:property>
      <con:property>card postalCode</con:property>
      <con:property>card countryCode</con:property>
      <con:property>card countryName</con:property>
      <con:property>card mailingAddress</con:property>
      <con:property>cvv</con:property>
      <con:property>payeeId</con:property>
      <con:property>downPaymentPct</con:property>
      <con:property>downPaymentAmt</con:property>
      <con:property>nbrOfPayments</con:property>
      <con:property>card cardType</con:property>
      <con:property>card cardToken</con:property>
      <con:property>card expireDate</con:property>
      <con:property>card amount</con:property>
      <con:property>card currency</con:property>
      <con:property>card extendPayments</con:property>
      <con:property>con firstName</con:property>
      <con:property>con lastName</con:property>
      <con:property>con id</con:property>
      <con:property>con type</con:property>
      <con:property>con address1</con:property>
      <con:property>con address2</con:property>
      <con:property>con address3</con:property>
      <con:property>con address4</con:property>
      <con:property>con apartment</con:property>
      <con:property>con city</con:property>
      <con:property>con stateCode</con:property>
      <con:property>con postalCode</con:property>
      <con:property>con countryCode</con:property>
      <con:property>con countryName</con:property>
      <con:property>con mailingAddress</con:property>
      <con:property>inst cvv</con:property>
      <con:property>inst payeeId</con:property>
      <con:property>bookingType</con:property>
      <con:property>bookingId</con:property>
      <con:property>courtesyHold</con:property>
      <con:property>CC_cardType</con:property>
      <con:property>CCNum_Token</con:property>
      <con:property>CC_expireDate</con:property>
      <con:property>CC_amount</con:property>
      <con:property>CC_currency</con:property>
      <con:property>CC_extendPayments</con:property>
      <con:property>CC_FirstName</con:property>
      <con:property>CC_LastName</con:property>
      <con:property>CC_address</con:property>
      <con:property>CC_city</con:property>
      <con:property>CC_stateCode</con:property>
      <con:property>CC_postalCode</con:property>
      <con:property>CC_countryCode</con:property>
      <con:property>CC_countryName</con:property>
      <con:property>Orchestration_application</con:property>
      <con:property>Orchestration_brand</con:property>
      <con:property>Orchestration_office</con:property>
      <con:property>Orchestration_countryCode</con:property>
      <con:property>Orchestration_currencyCode</con:property>
      <con:property>Orchestration_channel</con:property>
      <con:property>Orchestration_bookingType</con:property>
      <con:property>Orchestration_cruiseType</con:property>
      <con:property>Orchestration_accessibleCabins</con:property>
      <con:property>Orchestration_results</con:property>
      <con:property>Orchestration_pagination</con:property>
      <con:property>Orchestration_Prices</con:property>
      <con:property>Orchestration_guestAge</con:property>
      <con:property>Orchestration_includeDeckInfo</con:property>
      <con:property>Orchestration_accessibleReqd</con:property>
      <con:property>Orchestration_seniorReqd</con:property>
      <con:property>Orchestration_militaryReqd</con:property>
      <con:property>Orchestration_policeReqd</con:property>
      <con:property>Orchestration_fireFighterReqd</con:property>
      <con:property>Orchestration_includeAllStaterooms</con:property>
      <con:property>Orchestration_includeUpsell</con:property>
      <con:property>Orchestration_includePromoContent</con:property>
      <con:property>Orchestration_includeCategory</con:property>
      <con:property>Orchestration_guestCount</con:property>
      <con:property>Orchestration_lockBooking</con:property>
      <con:property>Orchestration_summaryRequested</con:property>
      <con:startRow>1</con:startRow>
      <con:endRow>1</con:endRow>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:trimValues>false</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
      <con:stopDatasourceExhausted>false</con:stopDatasourceExhausted>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CruiseSearch" id="332213b6-e2a2-4fe6-8a80-466f235a2ea4">
    <con:settings/>
    <con:config service="Booking" resourcePath="/createBooking" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="CruiseSearch" id="311d37c2-2066-49ea-aeb4-3adc006be12d" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="AppKey" value="${Stage_AppKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://eslbservicestst01.rccl.com:13000</con:endpoint>
        <con:request/>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/search/rest/cruiseSearch</con:originalUri>
        <con:assertion type="XPath Match" id="6625f75e-8bda-4bcd-b5d8-510d3a241fd5" name="Match content of [status]">
          <con:configuration>
            <path>declare namespace ns2='http://www.rccl.com/esl/services/search/v2';
//ns2:CruiseSearchResponse[1]/header[1]/status[1]/text()</path>
            <content>Success</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="criteria.brand.value" value="${DataSource#Orchestration_brand}"/>
          <con:entry key="header.application" value="${DataSource#Orchestration_application}"/>
          <con:entry key="criteria.channel" value="${DataSource#Orchestration_channel}"/>
          <con:entry key="resultsPreference.includeResults" value="${DataSource#Orchestration_results}"/>
          <con:entry key="criteria.accessibleCabins" value="${DataSource#Orchestration_accessibleCabins}"/>
          <con:entry key="criteria.office" value="${DataSource#Orchestration_office}"/>
          <con:entry key="criteria.currency" value="${DataSource#Orchestration_currencyCode}"/>
          <con:entry key="criteria.ship.value" value="${DataSource#Orchestration_shipCode}"/>
          <con:entry key="header.brand" value="${DataSource#Orchestration_brand}"/>
          <con:entry key="resultsPreference.includePrices" value="${DataSource#Orchestration_Prices}"/>
          <con:entry key="criteria.bookingType" value="${DataSource#Orchestration_bookingType}"/>
          <con:entry key="resultsPreference.pagination.count" value="${DataSource#Orchestration_pagination}"/>
          <con:entry key="resultsPreference.includeFacets" value="${DataSource#Orchestration_Facets}"/>
          <con:entry key="criteria.country" value="${DataSource#Orchestration_countryCode}"/>
          <con:entry key="criteria.cruiseType.value" value="${DataSource#Orchestration_cruiseType}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>criteria.office</con:entry>
          <con:entry>criteria.country</con:entry>
          <con:entry>criteria.currency</con:entry>
          <con:entry>criteria.channel</con:entry>
          <con:entry>criteria.bookingType</con:entry>
          <con:entry>criteria.cruiseType.value</con:entry>
          <con:entry>criteria.brand.value</con:entry>
          <con:entry>criteria.ship.value</con:entry>
          <con:entry>criteria.port.value</con:entry>
          <con:entry>criteria.portOfCall.value</con:entry>
          <con:entry>criteria.tourCity.value</con:entry>
          <con:entry>criteria.region.value</con:entry>
          <con:entry>criteria.duration.value</con:entry>
          <con:entry>criteria.packageId.value</con:entry>
          <con:entry>criteria.marketingPromotionType.value</con:entry>
          <con:entry>criteria.marketingPromotionId.value</con:entry>
          <con:entry>criteria.onboardActivity.value</con:entry>
          <con:entry>criteria.sailingDate.dateRange.from</con:entry>
          <con:entry>criteria.sailingDate.dateRange.to</con:entry>
          <con:entry>criteria.startDate.dateRange.from</con:entry>
          <con:entry>criteria.startDate.dateRange.to</con:entry>
          <con:entry>criteria.occupancy.adult</con:entry>
          <con:entry>criteria.occupancy.child</con:entry>
          <con:entry>criteria.occupancy.infant</con:entry>
          <con:entry>criteria.priceRange.min</con:entry>
          <con:entry>criteria.priceRange.max</con:entry>
          <con:entry>criteria.priceRange.cabinClass</con:entry>
          <con:entry>criteria.accessibleCabins</con:entry>
          <con:entry>qualifiers.priceId.value</con:entry>
          <con:entry>qualifiers.promotionId.value</con:entry>
          <con:entry>qualifiers.promotionType.value</con:entry>
          <con:entry>qualifiers.residentType.promotionType</con:entry>
          <con:entry>qualifiers.residentType.state</con:entry>
          <con:entry>qualifiers.loyaltyType.promotionType</con:entry>
          <con:entry>qualifiers.loyaltyType.loyaltyTier.name</con:entry>
          <con:entry>qualifiers.loyaltyType.loyaltyTier.value</con:entry>
          <con:entry>qualifiers.airType.promotionType</con:entry>
          <con:entry>qualifiers.airType.gateway</con:entry>
          <con:entry>qualifiers.priceScope</con:entry>
          <con:entry>qualifiers.qualifierScope</con:entry>
          <con:entry>qualifiers.searchScope</con:entry>
          <con:entry>resultsPreference.includeFacets</con:entry>
          <con:entry>resultsPreference.includeResults</con:entry>
          <con:entry>resultsPreference.includeOnlyIfPriceAvailable</con:entry>
          <con:entry>resultsPreference.sortBy</con:entry>
          <con:entry>resultsPreference.sortOrder</con:entry>
          <con:entry>resultsPreference.pagination.count</con:entry>
          <con:entry>resultsPreference.pagination.offset</con:entry>
          <con:entry>resultsPreference.strictSearch</con:entry>
          <con:entry>resultsPreference.groupBy</con:entry>
          <con:entry>resultsPreference.guestPricing</con:entry>
          <con:entry>resultsPreference.priceLevel.bestPricedCategory</con:entry>
          <con:entry>resultsPreference.priceLevel.cabinClass</con:entry>
          <con:entry>resultsPreference.bundleComponent.value</con:entry>
          <con:entry>resultsPreference.includePrices</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="fb80c0e8-f76d-47b2-810a-f73b9a8b53f1">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="06e8c7b9-d4f6-4961-83f3-2298cdb6d393">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="4fedb5bd-4f85-4e65-be0d-10733b6063c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Fetch_ShipPkgFare-Code_SailDate" id="5553873c-f32c-4224-80be-f68817c41fbb">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*;
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*;
def tc = testRunner.testCase.testSuite.testCases["CreateBooking"];

def ts = testRunner.testCase.getTestStepByName("CruiseSearch");
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

def packageCode = res.resultsBySailing.sailingSummaryWithClassLevelPricing[0].sailingRef.@package.text();
testRunner.testCase.setPropertyValue("PackageCode",packageCode);

String shipCode= packageCode.substring(0,2);
testRunner.testCase.setPropertyValue("ShipCode",shipCode);

def sailDate = res.resultsBySailing.sailingSummaryWithClassLevelPricing[0].sailingRef.@saildate.text();
testRunner.testCase.setPropertyValue("SailDate",sailDate);

def id = res.resultsBySailing.sailingSummaryWithClassLevelPricing[0].cabinClassPricing[0].price[0].@priceId.text();
if(id.equals('')){
	def fareCode = res.resultsBySailing.sailingSummaryWithClassLevelPricing[0].cabinClassPricing[0].price[0].promotion.@id.text();
	testRunner.testCase.setPropertyValue("FareCode",fareCode);
 }
else{
	testRunner.testCase.setPropertyValue("FareCode",id);
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Copy of Fetch_ShipPkgFare-Code_SailDate" id="e59f7b25-bf2d-47d6-b4e9-7698d6d5f655" disabled="true">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*;
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*;
def tc = testRunner.testCase.testSuite.testCases["CreateBooking"];

def ts = testRunner.testCase.getTestStepByName("CruiseSearch");
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

def packageCode = res.resultsBySailing[1].sailingSummaryWithClassLevelPricing[2].sailingRef[1].@package.text();
testRunner.testCase.setPropertyValue("PackageCode",packageCode);

String shipCode= packageCode.substring(0,2);
testRunner.testCase.setPropertyValue("ShipCode",shipCode);

def sailDate = res.resultsBySailing.sailingSummaryWithClassLevelPricing[2].sailingRef.@saildate.text();
testRunner.testCase.setPropertyValue("SailDate",sailDate);

def id = res.resultsBySailing.sailingSummaryWithClassLevelPricing[2].cabinClassPricing[1].price[1].@priceId.text();
if(id.equals('')){
	def fareCode = res.resultsBySailing.sailingSummaryWithClassLevelPricing[2].cabinClassPricing[1].price[1].promotion.@id.text();
	testRunner.testCase.setPropertyValue("FareCode",fareCode);
 }
else{
	testRunner.testCase.setPropertyValue("FareCode",id);
}

//ns2:CruiseSearchResponse[1]/resultsBySailing[1]/sailingSummaryWithClassLevelPricing[2]/sailingRef[1]/@package
//ns2:CruiseSearchResponse[1]/resultsBySailing[1]/sailingSummaryWithClassLevelPricing[2]/sailingRef[1]/@package
//ns2:CruiseSearchResponse[1]/resultsBySailing[1]/sailingSummaryWithClassLevelPricing[2]/cabinClassPricing[1]/price[1]/promotion[1]/@id</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="RetrieveStateroomCategories" id="3da9903b-286f-4163-b8fb-7d4dfab6768a">
    <con:settings/>
    <con:config service="Booking" resourcePath="/createBooking" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="RetrieveStateroomCategories" id="3b0b3e64-59dd-4f3c-90fb-b77e895e64f7" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="AppKey" value="${Stage_AppKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://eslbservicestst01.rccl.com:14000</con:endpoint>
        <con:request/>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroomCategories</con:originalUri>
        <con:assertion type="Simple Contains" id="34054df6-38c7-4d90-9206-77579d3a63b8" name="Contains">
          <con:configuration>
            <token>Success</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.brand" value="${DataSource#Orchestration_brand}"/>
          <con:entry key="header.application" value="${DataSource#Orchestration_application}"/>
          <con:entry key="fareCode" value="BESTRATE"/>
          <con:entry key="countryCode" value="${DataSource#Orchestration_countryCode}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="militaryReqd" value="${DataSource#Orchestration_militaryReqd}"/>
          <con:entry key="policeReqd" value="${DataSource#Orchestration_policeReqd}"/>
          <con:entry key="includeDeckInfo" value="${DataSource#Orchestration_includeDeckInfo}"/>
          <con:entry key="seniorReqd" value="${DataSource#Orchestration_seniorReqd}"/>
          <con:entry key="includeAllStaterooms" value="${DataSource#Orchestration_includeAllStaterooms}"/>
          <con:entry key="fireFighterReqd" value="${DataSource#Orchestration_fireFighterReqd}"/>
          <con:entry key="guestAge" value="${DataSource#Orchestration_guestAge}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="accessibleReqd" value="${DataSource#Orchestration_accessibleReqd}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="fb80c0e8-f76d-47b2-810a-f73b9a8b53f1">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="06e8c7b9-d4f6-4961-83f3-2298cdb6d393">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="4fedb5bd-4f85-4e65-be0d-10733b6063c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="FetchCatagoryCode - 6V" id="0250924e-e46a-4ed7-b582-1227c74ec981" disabled="true">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*;
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*;
def tc = testRunner.testCase.testSuite.testCases["CreateBooking"];

def ts = testRunner.testCase.getTestStepByName("RetrieveStateroomCategories");
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

def categoryCode = res.stateroomCategoryTypes.e[0].categories.e[0].stateroomCategoryCode.text();
testRunner.testCase.setPropertyValue("Category",categoryCode);

def selectedFareCode = res.stateroomCategoryTypes.e[0].categories.e[0].selectedFareCode.text();
testRunner.testCase.setPropertyValue("FareCode",selectedFareCode);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="FetchCatagoryCode - 4V" id="78f02d1c-81d4-48ab-81a4-6a391e76c52c">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*;
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*;
def tc = testRunner.testCase.testSuite.testCases["CreateBooking"];

def ts = testRunner.testCase.getTestStepByName("RetrieveStateroomCategories");
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

def categoryCode = res.stateroomCategoryTypes.e[0].categories.e[1].stateroomCategoryCode.text();
testRunner.testCase.setPropertyValue("Category",categoryCode);

def selectedFareCode = res.stateroomCategoryTypes.e[0].categories.e[1].selectedFareCode.text();
testRunner.testCase.setPropertyValue("FareCode",selectedFareCode);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="RetrieveStateroomsForCategory" id="b3e89a51-a8a3-40df-b491-222a9d773236">
    <con:settings/>
    <con:config service="Booking" resourcePath="/createBooking" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="RetrieveStateroomsForCategory" id="c2271e12-b35c-4d4d-99ab-12aa471a0db9" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="AppKey" value="${Stage_AppKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://eslbservicestst01.rccl.com:14000</con:endpoint>
        <con:request/>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroomsForCategory</con:originalUri>
        <con:assertion type="Simple Contains" id="fe0a0def-9263-4c7e-97c6-61655b4b1d0d" name="Contains">
          <con:configuration>
            <token>Success</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.application" value="${DataSource#Orchestration_application}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource#Orchestration_guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#Orchestration_countryCode}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource#Orchestration_seniorReqd}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="categoryCode" value="${#TestCase#Category}"/>
          <con:entry key="header.brand" value="${DataSource#Orchestration_brand}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource#Orchestration_accessibleReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="stateroomOccupancy.fareCode" value="${#TestCase#FareCode}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>countryCode</con:entry>
          <con:entry>agencyId</con:entry>
          <con:entry>bookingAccessToken</con:entry>
          <con:entry>shipCode</con:entry>
          <con:entry>sailDate</con:entry>
          <con:entry>packageId</con:entry>
          <con:entry>categoryCode</con:entry>
          <con:entry>currencyCode</con:entry>
          <con:entry>stateroomOccupancy.guestAge</con:entry>
          <con:entry>stateroomOccupancy.fareCode</con:entry>
          <con:entry>stateroomOccupancy.seniorReqd</con:entry>
          <con:entry>stateroomOccupancy.accessibleReqd</con:entry>
          <con:entry>deckCode</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="fb80c0e8-f76d-47b2-810a-f73b9a8b53f1">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="06e8c7b9-d4f6-4961-83f3-2298cdb6d393">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="4fedb5bd-4f85-4e65-be0d-10733b6063c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="FetchCabinValue" id="50438983-ffdb-4acb-88c5-0c9c05a6c255">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*;
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*;
def tc = testRunner.testCase.testSuite.testCases["CreateBooking_TestCase"];

def ts = testRunner.testCase.getTestStepByName("RetrieveStateroomsForCategory");
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

def cabinNumber = res.cabin.e[1].cabinNumber.text();
testRunner.testCase.setPropertyValue("CabinNumber",cabinNumber);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="UpdateStateroomLock" id="262da290-1d48-479f-8cf4-3b8d761baf20">
    <con:settings/>
    <con:config service="Booking" resourcePath="/createBooking" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="UpdateStateroomLock" id="2f932aaa-b326-4cd4-b9dc-1ac157bd6457" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="AppKey" value="${Stage_AppKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://eslbservicestst01.rccl.com:14000</con:endpoint>
        <con:request>{
    "header": {
        "application": "${DataSource#Orchestration_application}",
        "brand": "${DataSource#Orchestration_brand}"
    },
    "countryCode": "${DataSource#Orchestration_countryCode}",
    "shipCode": "${#TestCase#ShipCode}",
    "sailDate": "${#TestCase#SailDate}",
    "lockStaterooms":{
      "fareCode":"${#TestCase#FareCode}",
      "stateroomCategoryCode":"${#TestCase#Category}",
      "guestCount":"${DataSource#Orchestration_guestCount}",
      "stateroomNumber":["${#TestCase#CabinNumber}"]
    }
}</con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/updateStateroomLock</con:originalUri>
        <con:assertion type="Simple Contains" id="6b910529-4a02-4c36-b53a-4c3ac0b18d05" name="Contains">
          <con:configuration>
            <token>Success</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="fb80c0e8-f76d-47b2-810a-f73b9a8b53f1">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="06e8c7b9-d4f6-4961-83f3-2298cdb6d393">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="4fedb5bd-4f85-4e65-be0d-10733b6063c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="FetchAccessToken" id="6432203f-1686-47e5-82ad-0ce30ca634d6">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*
def tc = testRunner.testCase.testSuite.testCases["CreateBooking"];

def ts = testRunner.testCase.getTestStepByName("UpdateStateroomLock")
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

def accessToken = res.bookingAccessToken.text();
testRunner.testCase.setPropertyValue("AccessToken",accessToken)</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Groovy Script_TheWayItWas" id="b8d5471d-77eb-416d-be66-2e533ec72a47" disabled="true">
    <con:settings/>
    <con:config>
      <script><![CDATA[import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*

def alert = com.eviware.soapui.support.UISupport;
def tc= testRunner.testCase.testSuite.testCases["CreateBooking"];
       
def stepResult;
def req_status;
def rerun;
def TCpointer = context.expand('${DataSource#TestCaseName}') ;
def ExecutionFlag = context.expand('${DataSource#ExecutionFlag}') ;
tc.setPropertyValue("Request","");
tc.setPropertyValue("Response","");


def orc1 = testRunner.testCase.getTestStepByName("CruiseSearch");
def orc1_assertion_data = orc1.getAssertionStatus();

def orc2 = testRunner.testCase.getTestStepByName("RetrieveStateroomCategories");
def orc2_assertion_data = orc2.getAssertionStatus();

def orc3 = testRunner.testCase.getTestStepByName("RetrieveStateroomsForCategory");
def orc3_assertion_data = orc3.getAssertionStatus();

def orc4 = testRunner.testCase.getTestStepByName("UpdateStateroomLock");
def orc4_assertion_data = orc4.getAssertionStatus();

List<String> orc_assertion_data = Arrays.asList(orc1_assertion_data,orc2_assertion_data,orc3_assertion_data,orc4_assertion_data);

if(!orc_assertion_data.toString().contains("FAILED"))
{

//For FunctionalTest1
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC1")
	{
		 stepResult = testRunner.runTestStepByName( "FunctionalTest1");
		 req_status = stepResult.getStatus().toString();
		 if(req_status == "OK")
	         {
	          tc.setPropertyValue("Status","PASS");
	          }
	          else if(req_status == "FAILED")
	          {
	           tc.setPropertyValue("Status","FAIL");
	           }
	           else if(req_status == "UNKNOWN")
	           {
	            tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	            }
	
	ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest1");
	List <TestAssertion> TA_List=ts_handler.getAssertionList();
	TA_List.each{i ->
	tc.setPropertyValue("Validation1"," ");
	tc.setPropertyValue("Validation2"," ");
	tc.setPropertyValue("Validation"," ");
	tc.setPropertyValue("Description"," ");
	tc.setPropertyValue("Description1"," ");
	tc.setPropertyValue("Description2"," ");
	tc.setPropertyValue("Request"," ");
	tc.setPropertyValue("Response"," ");
	tc.setPropertyValue("Request1"," ");
	tc.setPropertyValue("Response1"," ");
		
	for( assertion in ts_handler.assertionList )
	{
	
	//For Invalid HTTP Status Codes
	if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString();
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation1",Val_Prop_Message);
	          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
		}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation1","**Response schema is validated**");
	     tc.setPropertyValue("Description1"," ");
	}
	
	//For contains
	if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString(); 
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation2",Val_Prop_Message);
	          tc.setPropertyValue("Description2","**Success is expected in Response**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
	  	}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation2","***'Success' in status is shown as expected***");
	     tc.setPropertyValue("Description2"," ");
	}

	}
	}
	testRunner.runTestStepByName("Delay");
	stepResult_orchestration = testRunner.runTestStepByName("RetrieveBooking_CourtesyHold");
	req_status_orchestration = stepResult_orchestration.getStatus().toString();
		 if(req_status_orchestration == "OK")
	         {
	          tc.setPropertyValue("Status","PASS");
	          }
	          else if(req_status_orchestration == "FAILED")
	          {
	           tc.setPropertyValue("Status","FAIL");
	           }
	           else if(req_status_orchestration == "UNKNOWN")
	           {
	            tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	            }
  	ts_handler_orchestration = testRunner.testCase.getTestStepByName("RetrieveBooking_CourtesyHold");
  	List <TestAssertion> TA_List_orchestration=ts_handler_orchestration.getAssertionList();
 	TA_List_orchestration.each{j ->
		tc.setPropertyValue("Validation3"," ");
	 	tc.setPropertyValue("Validation4"," ");
	 	tc.setPropertyValue("Description3"," ");
	 	tc.setPropertyValue("Description4"," "); 
 
		for( assertion in ts_handler_orchestration.assertionList )
		{
			//For XpathMatch
			if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
			{
			     for( e in assertion.errors )
			     {
			     	def Val_Prop_Message=e.message.toString(); 
			          //log.info "Message" + Val_Prop_Message;
			          tc.setPropertyValue("Validation3", Val_Prop_Message);
			          tc.setPropertyValue("Description3","**The created Booking Id should be displayed in Retrieve Booking**");
			          def request_holder = ts_handler.getProperty("Request").getValue();
					def response_holder = ts_handler.getProperty("Response").getValue();
					tc.setPropertyValue("Request1",request_holder);
					tc.setPropertyValue("Response1",response_holder);
				}
			                                                    
			}
			else if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID")
			{
			     tc.setPropertyValue("Validation3","**The created Booking Id is displayed in Retrieve Booking**");
			     tc.setPropertyValue("Description3","");
			}
			 
			  //For JsonPath Match 1
			 if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "FAILED")
			 {
			      for( e in assertion.errors )
			      {
			       def Val_Prop_Message=e.message.toString(); 
			           //log.info "Message" + Val_Prop_Message;
			           tc.setPropertyValue("Validation4", Val_Prop_Message);
			           tc.setPropertyValue("Description4","**The Booking status should be displayed in Retrieve Booking**");
			           def request_holder = ts_handler.getProperty("Request").getValue();
					 def response_holder = ts_handler.getProperty("Response").getValue();
					 tc.setPropertyValue("Request1",request_holder);
					 tc.setPropertyValue("Response1",response_holder);
			  }
			                                                     
			 }
			 else if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "VALID")
			 {
			      tc.setPropertyValue("Validation4","**The Booking status should be displayed in Retrieve Booking**");
			      tc.setPropertyValue("Description4","");
			 }
	 	}
	}
	
	tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString()+"   " + tc.getPropertyValue("Validation4").toString());
	tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString()+"   " + tc.getPropertyValue("Description4").toString());
	tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
	tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	testRunner.runTestStepByName("CancelBooking_CourtesyHold");
	}
}

//For FunctionalTest1_International
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC2")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName("FunctionalTest1_International");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
	         {
	          tc.setPropertyValue("Status","PASS");
	          }
	          else if(req_status == "FAILED")
	          {
	           tc.setPropertyValue("Status","FAIL");
	           }
	           else if(req_status == "UNKNOWN")
	           {
	            tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	            }
	
	ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest1_International");
	List <TestAssertion> TA_List=ts_handler.getAssertionList();
	TA_List.each{i ->
	tc.setPropertyValue("Validation1"," ");
	tc.setPropertyValue("Validation2"," ");
	tc.setPropertyValue("Validation3"," ");
	tc.setPropertyValue("Validation"," ");
	tc.setPropertyValue("Description"," ");
	tc.setPropertyValue("Description1"," ");
	tc.setPropertyValue("Description2"," ");
	tc.setPropertyValue("Description3"," ");
	tc.setPropertyValue("Request"," ");
	tc.setPropertyValue("Response"," ");
	tc.setPropertyValue("Request1"," ");
	tc.setPropertyValue("Response1"," ");
		
	for( assertion in ts_handler.assertionList )
	{
	
	//For Invalid HTTP Status Codes
	if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString();
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation1",Val_Prop_Message);
	          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
		}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation1","**Response schema is validated**");
	     tc.setPropertyValue("Description1"," ");
	}
	
	//For contains
	if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString(); 
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation2",Val_Prop_Message);
	          tc.setPropertyValue("Description2","**Success is expected in Response**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
	  	}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation2","***'Success' in status is shown as expected***");
	     tc.setPropertyValue("Description2"," ");
	}

	}
	}
	testRunner.runTestStepByName("Delay");
	stepResult_orchestration = testRunner.runTestStepByName("RetrieveBooking_CourtesyInternational");
	req_status_orchestration = stepResult_orchestration.getStatus().toString();
		 if(req_status_orchestration == "OK")
	         {
	          tc.setPropertyValue("Status","PASS");
	          }
	          else if(req_status_orchestration == "FAILED")
	          {
	           tc.setPropertyValue("Status","FAIL");
	           }
	           else if(req_status_orchestration == "UNKNOWN")
	           {
	            tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	            }
  	ts_handler_orchestration = testRunner.testCase.getTestStepByName("RetrieveBooking_CourtesyInternational");
  	List <TestAssertion> TA_List_orchestration=ts_handler_orchestration.getAssertionList();
 	TA_List_orchestration.each{j ->
		tc.setPropertyValue("Validation3"," ");
	 	tc.setPropertyValue("Validation4"," ");
	 	tc.setPropertyValue("Description3"," ");
	 	tc.setPropertyValue("Description4"," "); 
 
		for( assertion in ts_handler_orchestration.assertionList )
		{
			//For XpathMatch
			if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
			{
			     for( e in assertion.errors )
			     {
			     	def Val_Prop_Message=e.message.toString(); 
			          //log.info "Message" + Val_Prop_Message;
			          tc.setPropertyValue("Validation3", Val_Prop_Message);
			          tc.setPropertyValue("Description3","**The created Booking Id should be displayed in Retrieve Booking**");
			          def request_holder = ts_handler.getProperty("Request").getValue();
					def response_holder = ts_handler.getProperty("Response").getValue();
					tc.setPropertyValue("Request1",request_holder);
					tc.setPropertyValue("Response1",response_holder);
				}
			                                                    
			}
			else if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID")
			{
			     tc.setPropertyValue("Validation3","**The created Booking Id is displayed in Retrieve Booking**");
			     tc.setPropertyValue("Description3","");
			}
			 
			  //For JsonPath Match 1
			 if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "FAILED")
			 {
			      for( e in assertion.errors )
			      {
			       def Val_Prop_Message=e.message.toString(); 
			           //log.info "Message" + Val_Prop_Message;
			           tc.setPropertyValue("Validation4", Val_Prop_Message);
			           tc.setPropertyValue("Description4","**The Booking status should be displayed in Retrieve Booking**");
			           def request_holder = ts_handler.getProperty("Request").getValue();
					 def response_holder = ts_handler.getProperty("Response").getValue();
					 tc.setPropertyValue("Request1",request_holder);
					 tc.setPropertyValue("Response1",response_holder);
			  }
			                                                     
			 }
			 else if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "VALID")
			 {
			      tc.setPropertyValue("Validation4","**The Booking status should be displayed in Retrieve Booking**");
			      tc.setPropertyValue("Description4","");
			 }
	 	}
	}
	
	tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString()+"   " + tc.getPropertyValue("Validation4").toString());
	tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString()+"   " + tc.getPropertyValue("Description4").toString());
	tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
	tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	testRunner.runTestStepByName("CancelBooking_CourtesyInternational");
	}
}

//For FunctionalTest2
if(ExecutionFlag == "Yes")
{
if(TCpointer=="CreateBooking_TC3")
{
stepResult = testRunner.runTestStepByName("FunctionalTest2");
req_status = stepResult.getStatus().toString();
         if(req_status == "OK")
         {
          tc.setPropertyValue("Status","PASS");
          }
          else if(req_status == "FAILED")
          {
           tc.setPropertyValue("Status","FAIL");
           }
           else if(req_status == "UNKNOWN")
           {
            tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
            }

ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest2");
List <TestAssertion> TA_List=ts_handler.getAssertionList();
TA_List.each{i ->
tc.setPropertyValue("Validation1"," ");
tc.setPropertyValue("Validation2"," ");
tc.setPropertyValue("Validation"," ");
tc.setPropertyValue("Description"," ");
tc.setPropertyValue("Description1"," ");
tc.setPropertyValue("Description2"," ");
tc.setPropertyValue("Request"," ");
tc.setPropertyValue("Response"," ");
tc.setPropertyValue("Request1"," ");
tc.setPropertyValue("Response1"," ");

for( assertion in ts_handler.assertionList )
{
//For Invalid HTTP Status Codes
	if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString();
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation1",Val_Prop_Message);
	          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
		}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation1","**Response schema is validated**");
	     tc.setPropertyValue("Description1"," ");
	}
	
	//For contains
	if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString(); 
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation2",Val_Prop_Message);
	          tc.setPropertyValue("Description2","**Success is expected in Response**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
	  	}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation2","***'Success' in status is shown as expected***");
	     tc.setPropertyValue("Description2"," ");
	}
		
	}
	}
	
	tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
	tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
	tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
	tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());

}
}

//For FunctionalTest3
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC4")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName("FunctionalTest3");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
	         {
	          tc.setPropertyValue("Status","PASS");
	          }
	          else if(req_status == "FAILED")
	          {
	           tc.setPropertyValue("Status","FAIL");
	           }
	           else if(req_status == "UNKNOWN")
	           {
	            tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	            }
	
	ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest3");
	List <TestAssertion> TA_List=ts_handler.getAssertionList();
	TA_List.each{i ->
	tc.setPropertyValue("Validation1"," ");
	tc.setPropertyValue("Validation2"," ");
	tc.setPropertyValue("Validation3"," ");
	tc.setPropertyValue("Validation"," ");
	tc.setPropertyValue("Description"," ");
	tc.setPropertyValue("Description1"," ");
	tc.setPropertyValue("Description2"," ");
	tc.setPropertyValue("Description3"," ");
	tc.setPropertyValue("Request"," ");
	tc.setPropertyValue("Response"," ");
	tc.setPropertyValue("Request1"," ");
	tc.setPropertyValue("Response1"," ");
		
	for( assertion in ts_handler.assertionList )
	{
	
	//For Invalid HTTP Status Codes
	if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString();
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation1",Val_Prop_Message);
	          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
		}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation1","**Response schema is validated**");
	     tc.setPropertyValue("Description1"," ");
	}
	
	//For contains
	if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString(); 
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation2",Val_Prop_Message);
	          tc.setPropertyValue("Description2","**Success is expected in Response**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
	  	}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation2","***'Success' in status is shown as expected***");
	     tc.setPropertyValue("Description2"," ");
	}

	}
	}
	testRunner.runTestStepByName("Delay");
	stepResult_orchestration = testRunner.runTestStepByName("RetrieveBooking_Payment");
	req_status_orchestration = stepResult_orchestration.getStatus().toString();
		 if(req_status_orchestration == "OK")
	         {
	          tc.setPropertyValue("Status","PASS");
	          }
	          else if(req_status_orchestration == "FAILED")
	          {
	           tc.setPropertyValue("Status","FAIL");
	           }
	           else if(req_status_orchestration == "UNKNOWN")
	           {
	            tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	            }
  	ts_handler_orchestration = testRunner.testCase.getTestStepByName("RetrieveBooking_Payment");
  	List <TestAssertion> TA_List_orchestration=ts_handler_orchestration.getAssertionList();
 	TA_List_orchestration.each{j ->
		tc.setPropertyValue("Validation3"," ");
	 	tc.setPropertyValue("Validation4"," ");
	 	tc.setPropertyValue("Description3"," ");
	 	tc.setPropertyValue("Description4"," "); 
 
		for( assertion in ts_handler_orchestration.assertionList )
		{
			//For XpathMatch
			if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
			{
			     for( e in assertion.errors )
			     {
			     	def Val_Prop_Message=e.message.toString(); 
			          //log.info "Message" + Val_Prop_Message;
			          tc.setPropertyValue("Validation3", Val_Prop_Message);
			          tc.setPropertyValue("Description3","**The created Booking Id should be displayed in Retrieve Booking**");
			          def request_holder = ts_handler.getProperty("Request").getValue();
					def response_holder = ts_handler.getProperty("Response").getValue();
					tc.setPropertyValue("Request1",request_holder);
					tc.setPropertyValue("Response1",response_holder);
				}
			                                                    
			}
			else if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID")
			{
			     tc.setPropertyValue("Validation3","**The created Booking Id is displayed in Retrieve Booking**");
			     tc.setPropertyValue("Description3","");
			}
			 
			  //For JsonPath Match 1
			 if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "FAILED")
			 {
			      for( e in assertion.errors )
			      {
			       def Val_Prop_Message=e.message.toString(); 
			           //log.info "Message" + Val_Prop_Message;
			           tc.setPropertyValue("Validation4", Val_Prop_Message);
			           tc.setPropertyValue("Description4","**The Booking status should be displayed in Retrieve Booking**");
			           def request_holder = ts_handler.getProperty("Request").getValue();
					 def response_holder = ts_handler.getProperty("Response").getValue();
					 tc.setPropertyValue("Request1",request_holder);
					 tc.setPropertyValue("Response1",response_holder);
			  }
			                                                     
			 }
			 else if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "VALID")
			 {
			      tc.setPropertyValue("Validation4","**The Booking status should be displayed in Retrieve Booking**");
			      tc.setPropertyValue("Description4","");
			 }
	 	}
	}
	
	tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString()+"   " + tc.getPropertyValue("Validation4").toString());
	tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString()+"   " + tc.getPropertyValue("Description4").toString());
	tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
	tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	testRunner.runTestStepByName("CancelBooking_Payment");
	}
}

//For FunctionalTest4
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC5")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName("FunctionalTest4");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest4");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed with courtesyHold as false with no credit card details**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed with courtesyHold as false with no credit card details**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed with courtesyHold as false with no credit card details**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed with courtesyHold as false with no credit card details**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest5
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC6")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "FunctionalTest5");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest5");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed with courtesyHold as true with credit card details**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed with courtesyHold as true with credit card details**");
				     tc.setPropertyValue("Description2"," ");
				}

			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
		testRunner.runTestStepByName("Delay");
		testRunner.runTestStepByName("RetrieveBooking_FT5");
		testRunner.runTestStepByName("CancelBooking_FT5");
	}
}

//For FunctionalTest6
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC7")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "FunctionalTest6");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest6");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed when GuestAge greater than 55yrs and seniorReqd is false**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when GuestAge greater than 55yrs and seniorReqd is false**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For Not Contains
				if(assertion.assertable.getAssertionByName("Not Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Booking Id should not be displayed when GuestAge greater than 55yrs and seniorReqd is false**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Not Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Booking Id not displayed when GuestAge greater than 55yrs and seniorReqd is false**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest7
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC8")
	{
		stepResult = testRunner.runTestStepByName( "FunctionalTest7");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest7");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed when GuestAge is less than 25yrs**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when GuestAge is less than 25yrs**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For Not Contains
				if(assertion.assertable.getAssertionByName("Not Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Booking Id should not be displayed when GuestAge is less than 25yrs**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Not Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Booking Id not displayed when GuestAge is less than 25yrs**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest8
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC9")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "FunctionalTest8");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest8");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed when GuestAge is 25yrs and seniorReqd is true**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when GuestAge is 25yrs and seniorReqd is true**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For Not Contains
				if(assertion.assertable.getAssertionByName("Not Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Booking Id should not be displayed when GuestAge is 25yrs and seniorReqd is true**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Not Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Booking Id not displayed when GuestAge is 25yrs and seniorReqd is true**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest1
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC10" || TCpointer == "CreateBooking_TC11")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest1");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest1");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid application**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no or invalid application**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no or invalid application**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no or invalid application**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest2
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC12")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest2");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest2");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no brand**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no brand**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest3
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC13")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest3");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest3");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid brand**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid brand**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest4
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC14")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest4");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest4");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no domainId**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no domainId**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no domainId**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no domainId**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest5
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC15")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest5");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest5");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid domainId**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid domainId**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid domainId**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid domainId**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest6
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC16")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest6");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest6");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no countryCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no countryCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest7
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC17")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest7");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest7");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid countryCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid countryCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest8
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC18")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest8");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest8");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no bookingAccessToken**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no bookingAccessToken**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no bookingAccessToken**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no bookingAccessToken**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest9
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC19")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest9");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest9");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid bookingAccessToken**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid bookingAccessToken**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid bookingAccessToken**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid bookingAccessToken**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest10
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC20" || TCpointer == "CreateBooking_TC21")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest10");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest10");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid shipCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For XPath Match
				if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nor or invalid shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for nor or invalid shipCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest11
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC22" || TCpointer == "CreateBooking_TC23")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest11");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest11");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid sailDate**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid sailDate**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nor or invalid sailDate**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for nor or invalid sailDate**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest12
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC24" || TCpointer == "CreateBooking_TC25")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest12");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest12");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid packageCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid packageCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For XPath Match
				if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nor or invalid packageCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for nor or invalid packageCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest13
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC26" || TCpointer == "CreateBooking_TC27")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest13");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest13");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid currencyCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid currencyCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nor or invalid currencyCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for nor or invalid currencyCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest14
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC28" || TCpointer == "CreateBooking_TC29")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest14");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest14");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid berthCategoryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid berthCategoryCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For XPath Match
				if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nor or invalid berthCategoryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for nor or invalid berthCategoryCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest15
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC30" || TCpointer == "CreateBooking_TC31")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest15");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest15");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid fareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid fareCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For XPath Match
				if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nor or invalid fareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for nor or invalid fareCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest16
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC32" || TCpointer == "CreateBooking_TC33")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest16");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest16");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid cabin number**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid cabin number**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For XPath Match
				if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nor or invalid cabin number**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for nor or invalid cabin number**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest17
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC34")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest17");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest17");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no sitting**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no sitting**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nositting**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no sitting**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest18
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC35")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest18");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest18");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid sitting**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid sitting**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid sitting**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid sitting**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest19
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC36")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest19");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest19");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no sitting Type**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no sitting Type**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest20
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC37")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest20");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest20");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid sitting Type**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid sitting Type**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid sitting Type**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid sitting Type**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest21
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC38" || TCpointer == "CreateBooking_TC39")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest21");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest21");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid sitting Instance**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid sitting Instance**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest22
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC40")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest22");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest22");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no firstName**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no firstName**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no firstName**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no firstName**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest23
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC41")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest23");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest23");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no lastName**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no lastName**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no lastName**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no lastName**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest24
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC42")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest24");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest24");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no guestAge**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no guestAge**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest25
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC43" || TCpointer == "CreateBooking_TC44")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest25");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest25");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid cardType**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid cardType**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest26
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC45" || TCpointer == "CreateBooking_TC46")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest26");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest26");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid cardToken**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid cardToken**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest27
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC47" || TCpointer == "CreateBooking_TC48")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest27");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest27");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid expireDate**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid expireDate**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

if(ExecutionFlag == "No")
{
	tc.setPropertyValue("Validation","NA")
	tc.setPropertyValue("Description","NA")
	tc.setPropertyValue("Status","NA")
}
}

if(orc_assertion_data.toString().contains("FAILED"))
{
	tc.setPropertyValue("Description","Error in the services used for orchestration")
	tc.setPropertyValue("Validation","")
	tc.setPropertyValue("Status","Fail")
}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Groovy Script _Modifiend with New" id="15cdde86-6205-4090-81d2-9bee5af3be3d" disabled="true">
    <con:settings/>
    <con:config>
      <script><![CDATA[import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*

def alert = com.eviware.soapui.support.UISupport;
def tc= testRunner.testCase.testSuite.testCases["CreateBooking"];
       
def stepResult;
def req_status;
def rerun;
def TCpointer = context.expand('${DataSource#TestCaseName}') ;
def ExecutionFlag = context.expand('${DataSource#ExecutionFlag}') ;
tc.setPropertyValue("Request","");
tc.setPropertyValue("Response","");


def orc1 = testRunner.testCase.getTestStepByName("CruiseSearch");
def orc1_assertion_data = orc1.getAssertionStatus();

def orc2 = testRunner.testCase.getTestStepByName("RetrieveStateroomCategories");
def orc2_assertion_data = orc2.getAssertionStatus();

def orc3 = testRunner.testCase.getTestStepByName("RetrieveStateroomsForCategory");
def orc3_assertion_data = orc3.getAssertionStatus();

def orc4 = testRunner.testCase.getTestStepByName("UpdateStateroomLock");
def orc4_assertion_data = orc4.getAssertionStatus();

List<String> orc_assertion_data = Arrays.asList(orc1_assertion_data,orc2_assertion_data,orc3_assertion_data,orc4_assertion_data);

if(!orc_assertion_data.toString().contains("FAILED"))
{

//For FunctionalTest1
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking")
	{
		 stepResult = testRunner.runTestStepByName( "CreateBooking _allParameterize");
		 req_status = stepResult.getStatus().toString();
		 if(req_status == "OK")
	         {
	          tc.setPropertyValue("Status","PASS");
	          }
	          else if(req_status == "FAILED")
	          {
	           tc.setPropertyValue("Status","FAIL");
	           }
	           else if(req_status == "UNKNOWN")
	           {
	            tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	            }
	
	ts_handler = testRunner.testCase.getTestStepByName("CreateBooking _allParameterize");
	List <TestAssertion> TA_List=ts_handler.getAssertionList();
	TA_List.each{i ->
	tc.setPropertyValue("Validation1"," ");
	tc.setPropertyValue("Validation2"," ");
	tc.setPropertyValue("Validation"," ");
	tc.setPropertyValue("Description"," ");
	tc.setPropertyValue("Description1"," ");
	tc.setPropertyValue("Description2"," ");
	tc.setPropertyValue("Request"," ");
	tc.setPropertyValue("Response"," ");
	tc.setPropertyValue("Request1"," ");
	tc.setPropertyValue("Response1"," ");
		
	for( assertion in ts_handler.assertionList )
	{
	
	//For Invalid HTTP Status Codes
	if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString();
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation1",Val_Prop_Message);
	          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
		}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation1","**Response schema is validated**");
	     tc.setPropertyValue("Description1"," ");
	}
	
	//For contains
	if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString(); 
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation2",Val_Prop_Message);
	          tc.setPropertyValue("Description2","**Success is expected in Response**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
	  	}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation2","***'Success' in status is shown as expected***");
	     tc.setPropertyValue("Description2"," ");
	}

	}
	}
	testRunner.runTestStepByName("Delay");
	stepResult_orchestration = testRunner.runTestStepByName("RetrieveBooking_CourtesyHold");
	req_status_orchestration = stepResult_orchestration.getStatus().toString();
		 if(req_status_orchestration == "OK")
	         {
	          tc.setPropertyValue("Status","PASS");
	          }
	          else if(req_status_orchestration == "FAILED")
	          {
	           tc.setPropertyValue("Status","FAIL");
	           }
	           else if(req_status_orchestration == "UNKNOWN")
	           {
	            tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	            }
  	ts_handler_orchestration = testRunner.testCase.getTestStepByName("RetrieveBooking_CourtesyHold");
  	List <TestAssertion> TA_List_orchestration=ts_handler_orchestration.getAssertionList();
 	TA_List_orchestration.each{j ->
		tc.setPropertyValue("Validation3"," ");
	 	tc.setPropertyValue("Validation4"," ");
	 	tc.setPropertyValue("Description3"," ");
	 	tc.setPropertyValue("Description4"," "); 
 
		for( assertion in ts_handler_orchestration.assertionList )
		{
			//For XpathMatch
			if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
			{
			     for( e in assertion.errors )
			     {
			     	def Val_Prop_Message=e.message.toString(); 
			          //log.info "Message" + Val_Prop_Message;
			          tc.setPropertyValue("Validation3", Val_Prop_Message);
			          tc.setPropertyValue("Description3","**The created Booking Id should be displayed in Retrieve Booking**");
			          def request_holder = ts_handler.getProperty("Request").getValue();
					def response_holder = ts_handler.getProperty("Response").getValue();
					tc.setPropertyValue("Request1",request_holder);
					tc.setPropertyValue("Response1",response_holder);
				}
			                                                    
			}
			else if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID")
			{
			     tc.setPropertyValue("Validation3","**The created Booking Id is displayed in Retrieve Booking**");
			     tc.setPropertyValue("Description3","");
			}
			 
			  //For JsonPath Match 1
			 if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "FAILED")
			 {
			      for( e in assertion.errors )
			      {
			       def Val_Prop_Message=e.message.toString(); 
			           //log.info "Message" + Val_Prop_Message;
			           tc.setPropertyValue("Validation4", Val_Prop_Message);
			           tc.setPropertyValue("Description4","**The Booking status should be displayed in Retrieve Booking**");
			           def request_holder = ts_handler.getProperty("Request").getValue();
					 def response_holder = ts_handler.getProperty("Response").getValue();
					 tc.setPropertyValue("Request1",request_holder);
					 tc.setPropertyValue("Response1",response_holder);
			  }
			                                                     
			 }
			 else if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "VALID")
			 {
			      tc.setPropertyValue("Validation4","**The Booking status should be displayed in Retrieve Booking**");
			      tc.setPropertyValue("Description4","");
			 }
	 	}
	}
	
	tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString()+"   " + tc.getPropertyValue("Validation4").toString());
	tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString()+"   " + tc.getPropertyValue("Description4").toString());
	tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
	tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	testRunner.runTestStepByName("CancelBooking_CourtesyHold");
	}
}

//For FunctionalTest1_International
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC2")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName("FunctionalTest1_International");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
	         {
	          tc.setPropertyValue("Status","PASS");
	          }
	          else if(req_status == "FAILED")
	          {
	           tc.setPropertyValue("Status","FAIL");
	           }
	           else if(req_status == "UNKNOWN")
	           {
	            tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	            }
	
	ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest1_International");
	List <TestAssertion> TA_List=ts_handler.getAssertionList();
	TA_List.each{i ->
	tc.setPropertyValue("Validation1"," ");
	tc.setPropertyValue("Validation2"," ");
	tc.setPropertyValue("Validation3"," ");
	tc.setPropertyValue("Validation"," ");
	tc.setPropertyValue("Description"," ");
	tc.setPropertyValue("Description1"," ");
	tc.setPropertyValue("Description2"," ");
	tc.setPropertyValue("Description3"," ");
	tc.setPropertyValue("Request"," ");
	tc.setPropertyValue("Response"," ");
	tc.setPropertyValue("Request1"," ");
	tc.setPropertyValue("Response1"," ");
		
	for( assertion in ts_handler.assertionList )
	{
	
	//For Invalid HTTP Status Codes
	if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString();
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation1",Val_Prop_Message);
	          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
		}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation1","**Response schema is validated**");
	     tc.setPropertyValue("Description1"," ");
	}
	
	//For contains
	if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString(); 
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation2",Val_Prop_Message);
	          tc.setPropertyValue("Description2","**Success is expected in Response**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
	  	}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation2","***'Success' in status is shown as expected***");
	     tc.setPropertyValue("Description2"," ");
	}

	}
	}
	testRunner.runTestStepByName("Delay");
	stepResult_orchestration = testRunner.runTestStepByName("RetrieveBooking_CourtesyInternational");
	req_status_orchestration = stepResult_orchestration.getStatus().toString();
		 if(req_status_orchestration == "OK")
	         {
	          tc.setPropertyValue("Status","PASS");
	          }
	          else if(req_status_orchestration == "FAILED")
	          {
	           tc.setPropertyValue("Status","FAIL");
	           }
	           else if(req_status_orchestration == "UNKNOWN")
	           {
	            tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	            }
  	ts_handler_orchestration = testRunner.testCase.getTestStepByName("RetrieveBooking_CourtesyInternational");
  	List <TestAssertion> TA_List_orchestration=ts_handler_orchestration.getAssertionList();
 	TA_List_orchestration.each{j ->
		tc.setPropertyValue("Validation3"," ");
	 	tc.setPropertyValue("Validation4"," ");
	 	tc.setPropertyValue("Description3"," ");
	 	tc.setPropertyValue("Description4"," "); 
 
		for( assertion in ts_handler_orchestration.assertionList )
		{
			//For XpathMatch
			if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
			{
			     for( e in assertion.errors )
			     {
			     	def Val_Prop_Message=e.message.toString(); 
			          //log.info "Message" + Val_Prop_Message;
			          tc.setPropertyValue("Validation3", Val_Prop_Message);
			          tc.setPropertyValue("Description3","**The created Booking Id should be displayed in Retrieve Booking**");
			          def request_holder = ts_handler.getProperty("Request").getValue();
					def response_holder = ts_handler.getProperty("Response").getValue();
					tc.setPropertyValue("Request1",request_holder);
					tc.setPropertyValue("Response1",response_holder);
				}
			                                                    
			}
			else if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID")
			{
			     tc.setPropertyValue("Validation3","**The created Booking Id is displayed in Retrieve Booking**");
			     tc.setPropertyValue("Description3","");
			}
			 
			  //For JsonPath Match 1
			 if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "FAILED")
			 {
			      for( e in assertion.errors )
			      {
			       def Val_Prop_Message=e.message.toString(); 
			           //log.info "Message" + Val_Prop_Message;
			           tc.setPropertyValue("Validation4", Val_Prop_Message);
			           tc.setPropertyValue("Description4","**The Booking status should be displayed in Retrieve Booking**");
			           def request_holder = ts_handler.getProperty("Request").getValue();
					 def response_holder = ts_handler.getProperty("Response").getValue();
					 tc.setPropertyValue("Request1",request_holder);
					 tc.setPropertyValue("Response1",response_holder);
			  }
			                                                     
			 }
			 else if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "VALID")
			 {
			      tc.setPropertyValue("Validation4","**The Booking status should be displayed in Retrieve Booking**");
			      tc.setPropertyValue("Description4","");
			 }
	 	}
	}
	
	tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString()+"   " + tc.getPropertyValue("Validation4").toString());
	tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString()+"   " + tc.getPropertyValue("Description4").toString());
	tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
	tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	testRunner.runTestStepByName("CancelBooking_CourtesyInternational");
	}
}

//For FunctionalTest2
if(ExecutionFlag == "Yes")
{
if(TCpointer=="CreateBooking_TC3")
{
stepResult = testRunner.runTestStepByName("FunctionalTest2");
req_status = stepResult.getStatus().toString();
         if(req_status == "OK")
         {
          tc.setPropertyValue("Status","PASS");
          }
          else if(req_status == "FAILED")
          {
           tc.setPropertyValue("Status","FAIL");
           }
           else if(req_status == "UNKNOWN")
           {
            tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
            }

ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest2");
List <TestAssertion> TA_List=ts_handler.getAssertionList();
TA_List.each{i ->
tc.setPropertyValue("Validation1"," ");
tc.setPropertyValue("Validation2"," ");
tc.setPropertyValue("Validation"," ");
tc.setPropertyValue("Description"," ");
tc.setPropertyValue("Description1"," ");
tc.setPropertyValue("Description2"," ");
tc.setPropertyValue("Request"," ");
tc.setPropertyValue("Response"," ");
tc.setPropertyValue("Request1"," ");
tc.setPropertyValue("Response1"," ");

for( assertion in ts_handler.assertionList )
{
//For Invalid HTTP Status Codes
	if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString();
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation1",Val_Prop_Message);
	          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
		}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation1","**Response schema is validated**");
	     tc.setPropertyValue("Description1"," ");
	}
	
	//For contains
	if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString(); 
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation2",Val_Prop_Message);
	          tc.setPropertyValue("Description2","**Success is expected in Response**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
	  	}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation2","***'Success' in status is shown as expected***");
	     tc.setPropertyValue("Description2"," ");
	}
		
	}
	}
	
	tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
	tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
	tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
	tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());

}
}

//For FunctionalTest3
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC4")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName("FunctionalTest3");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
	         {
	          tc.setPropertyValue("Status","PASS");
	          }
	          else if(req_status == "FAILED")
	          {
	           tc.setPropertyValue("Status","FAIL");
	           }
	           else if(req_status == "UNKNOWN")
	           {
	            tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	            }
	
	ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest3");
	List <TestAssertion> TA_List=ts_handler.getAssertionList();
	TA_List.each{i ->
	tc.setPropertyValue("Validation1"," ");
	tc.setPropertyValue("Validation2"," ");
	tc.setPropertyValue("Validation3"," ");
	tc.setPropertyValue("Validation"," ");
	tc.setPropertyValue("Description"," ");
	tc.setPropertyValue("Description1"," ");
	tc.setPropertyValue("Description2"," ");
	tc.setPropertyValue("Description3"," ");
	tc.setPropertyValue("Request"," ");
	tc.setPropertyValue("Response"," ");
	tc.setPropertyValue("Request1"," ");
	tc.setPropertyValue("Response1"," ");
		
	for( assertion in ts_handler.assertionList )
	{
	
	//For Invalid HTTP Status Codes
	if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString();
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation1",Val_Prop_Message);
	          tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
		}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation1","**Response schema is validated**");
	     tc.setPropertyValue("Description1"," ");
	}
	
	//For contains
	if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
	{
	     for( e in assertion.errors )
	     {
	     	def Val_Prop_Message=e.message.toString(); 
	          //log.info "Message" + Val_Prop_Message;
	          tc.setPropertyValue("Validation2",Val_Prop_Message);
	          tc.setPropertyValue("Description2","**Success is expected in Response**");
	          def request_holder = ts_handler.getProperty("Request").getValue();
			def response_holder = ts_handler.getProperty("Response").getValue();
			tc.setPropertyValue("Request1",request_holder);
			tc.setPropertyValue("Response1",response_holder);
	  	}
	                                                    
	}
	else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
	{
	     tc.setPropertyValue("Validation2","***'Success' in status is shown as expected***");
	     tc.setPropertyValue("Description2"," ");
	}

	}
	}
	testRunner.runTestStepByName("Delay");
	stepResult_orchestration = testRunner.runTestStepByName("RetrieveBooking_Payment");
	req_status_orchestration = stepResult_orchestration.getStatus().toString();
		 if(req_status_orchestration == "OK")
	         {
	          tc.setPropertyValue("Status","PASS");
	          }
	          else if(req_status_orchestration == "FAILED")
	          {
	           tc.setPropertyValue("Status","FAIL");
	           }
	           else if(req_status_orchestration == "UNKNOWN")
	           {
	            tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
	            }
  	ts_handler_orchestration = testRunner.testCase.getTestStepByName("RetrieveBooking_Payment");
  	List <TestAssertion> TA_List_orchestration=ts_handler_orchestration.getAssertionList();
 	TA_List_orchestration.each{j ->
		tc.setPropertyValue("Validation3"," ");
	 	tc.setPropertyValue("Validation4"," ");
	 	tc.setPropertyValue("Description3"," ");
	 	tc.setPropertyValue("Description4"," "); 
 
		for( assertion in ts_handler_orchestration.assertionList )
		{
			//For XpathMatch
			if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
			{
			     for( e in assertion.errors )
			     {
			     	def Val_Prop_Message=e.message.toString(); 
			          //log.info "Message" + Val_Prop_Message;
			          tc.setPropertyValue("Validation3", Val_Prop_Message);
			          tc.setPropertyValue("Description3","**The created Booking Id should be displayed in Retrieve Booking**");
			          def request_holder = ts_handler.getProperty("Request").getValue();
					def response_holder = ts_handler.getProperty("Response").getValue();
					tc.setPropertyValue("Request1",request_holder);
					tc.setPropertyValue("Response1",response_holder);
				}
			                                                    
			}
			else if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID")
			{
			     tc.setPropertyValue("Validation3","**The created Booking Id is displayed in Retrieve Booking**");
			     tc.setPropertyValue("Description3","");
			}
			 
			  //For JsonPath Match 1
			 if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "FAILED")
			 {
			      for( e in assertion.errors )
			      {
			       def Val_Prop_Message=e.message.toString(); 
			           //log.info "Message" + Val_Prop_Message;
			           tc.setPropertyValue("Validation4", Val_Prop_Message);
			           tc.setPropertyValue("Description4","**The Booking status should be displayed in Retrieve Booking**");
			           def request_holder = ts_handler.getProperty("Request").getValue();
					 def response_holder = ts_handler.getProperty("Response").getValue();
					 tc.setPropertyValue("Request1",request_holder);
					 tc.setPropertyValue("Response1",response_holder);
			  }
			                                                     
			 }
			 else if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "VALID")
			 {
			      tc.setPropertyValue("Validation4","**The Booking status should be displayed in Retrieve Booking**");
			      tc.setPropertyValue("Description4","");
			 }
	 	}
	}
	
	tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString()+"   " + tc.getPropertyValue("Validation4").toString());
	tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString()+"   " + tc.getPropertyValue("Description4").toString());
	tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
	tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	testRunner.runTestStepByName("CancelBooking_Payment");
	}
}

//For FunctionalTest4
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC5")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName("FunctionalTest4");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest4");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed with courtesyHold as false with no credit card details**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed with courtesyHold as false with no credit card details**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed with courtesyHold as false with no credit card details**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed with courtesyHold as false with no credit card details**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest5
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC6")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "FunctionalTest5");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest5");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed with courtesyHold as true with credit card details**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed with courtesyHold as true with credit card details**");
				     tc.setPropertyValue("Description2"," ");
				}

			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
		testRunner.runTestStepByName("Delay");
		testRunner.runTestStepByName("RetrieveBooking_FT5");
		testRunner.runTestStepByName("CancelBooking_FT5");
	}
}

//For FunctionalTest6
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC7")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "FunctionalTest6");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest6");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed when GuestAge greater than 55yrs and seniorReqd is false**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when GuestAge greater than 55yrs and seniorReqd is false**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For Not Contains
				if(assertion.assertable.getAssertionByName("Not Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Booking Id should not be displayed when GuestAge greater than 55yrs and seniorReqd is false**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Not Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Booking Id not displayed when GuestAge greater than 55yrs and seniorReqd is false**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest7
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC8")
	{
		stepResult = testRunner.runTestStepByName( "FunctionalTest7");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest7");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed when GuestAge is less than 25yrs**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when GuestAge is less than 25yrs**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For Not Contains
				if(assertion.assertable.getAssertionByName("Not Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Booking Id should not be displayed when GuestAge is less than 25yrs**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Not Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Booking Id not displayed when GuestAge is less than 25yrs**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest8
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC9")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "FunctionalTest8");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest8");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed when GuestAge is 25yrs and seniorReqd is true**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when GuestAge is 25yrs and seniorReqd is true**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For Not Contains
				if(assertion.assertable.getAssertionByName("Not Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Booking Id should not be displayed when GuestAge is 25yrs and seniorReqd is true**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Not Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Booking Id not displayed when GuestAge is 25yrs and seniorReqd is true**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest1
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC10" || TCpointer == "CreateBooking_TC11")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest1");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest1");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid application**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no or invalid application**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no or invalid application**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no or invalid application**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest2
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC12")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest2");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest2");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no brand**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no brand**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest3
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC13")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest3");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest3");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid brand**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid brand**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest4
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC14")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest4");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest4");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no domainId**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no domainId**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no domainId**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no domainId**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest5
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC15")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest5");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest5");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid domainId**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid domainId**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid domainId**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid domainId**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest6
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC16")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest6");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest6");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no countryCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no countryCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest7
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC17")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest7");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest7");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid countryCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid countryCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest8
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC18")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest8");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest8");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no bookingAccessToken**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no bookingAccessToken**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no bookingAccessToken**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no bookingAccessToken**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest9
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC19")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest9");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest9");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid bookingAccessToken**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid bookingAccessToken**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid bookingAccessToken**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid bookingAccessToken**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest10
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC20" || TCpointer == "CreateBooking_TC21")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest10");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest10");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid shipCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For XPath Match
				if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nor or invalid shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for nor or invalid shipCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest11
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC22" || TCpointer == "CreateBooking_TC23")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest11");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest11");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid sailDate**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid sailDate**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nor or invalid sailDate**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for nor or invalid sailDate**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest12
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC24" || TCpointer == "CreateBooking_TC25")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest12");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest12");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid packageCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid packageCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For XPath Match
				if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nor or invalid packageCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for nor or invalid packageCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest13
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC26" || TCpointer == "CreateBooking_TC27")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest13");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest13");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid currencyCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid currencyCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nor or invalid currencyCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for nor or invalid currencyCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest14
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC28" || TCpointer == "CreateBooking_TC29")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest14");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest14");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid berthCategoryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid berthCategoryCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For XPath Match
				if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nor or invalid berthCategoryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for nor or invalid berthCategoryCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest15
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC30" || TCpointer == "CreateBooking_TC31")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest15");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest15");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid fareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid fareCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For XPath Match
				if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nor or invalid fareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for nor or invalid fareCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest16
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC32" || TCpointer == "CreateBooking_TC33")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest16");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest16");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid cabin number**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid cabin number**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For XPath Match
				if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nor or invalid cabin number**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for nor or invalid cabin number**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest17
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC34")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest17");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest17");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no sitting**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no sitting**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for nositting**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no sitting**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest18
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC35")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest18");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest18");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid sitting**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid sitting**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid sitting**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid sitting**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest19
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC36")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest19");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest19");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no sitting Type**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no sitting Type**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest20
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC37")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest20");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest20");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid sitting Type**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid sitting Type**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid sitting Type**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid sitting Type**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest21
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC38" || TCpointer == "CreateBooking_TC39")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest21");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest21");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid sitting Instance**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid sitting Instance**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest22
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC40")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest22");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest22");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no firstName**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no firstName**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no firstName**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no firstName**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest23
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC41")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest23");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest23");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no lastName**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no lastName**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no lastName**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no lastName**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest24
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC42")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest24");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest24");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no guestAge**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no guestAge**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest25
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC43" || TCpointer == "CreateBooking_TC44")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest25");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest25");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid cardType**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid cardType**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest26
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC45" || TCpointer == "CreateBooking_TC46")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest26");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest26");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid cardToken**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid cardToken**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest27
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "CreateBooking_TC47" || TCpointer == "CreateBooking_TC48")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomsForCategory");
		testRunner.runTestStepByName("FetchCabinValue");
		testRunner.runTestStepByName("UpdateStateroomLock");
		testRunner.runTestStepByName("FetchAccessToken");
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest27");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest27");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid expireDate**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for nor or invalid expireDate**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

if(ExecutionFlag == "No")
{
	tc.setPropertyValue("Validation","NA")
	tc.setPropertyValue("Description","NA")
	tc.setPropertyValue("Status","NA")
}
}

if(orc_assertion_data.toString().contains("FAILED"))
{
	tc.setPropertyValue("Description","Error in the services used for orchestration")
	tc.setPropertyValue("Validation","")
	tc.setPropertyValue("Status","Fail")
}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CreateBooking_FromOld" id="db4d5938-5c86-4982-91ee-dbbbc7f98bce" disabled="true">
    <con:settings/>
    <con:config service="Booking" resourcePath="/createBooking" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="CreateBooking_FromOld" id="11440270-6113-4dbd-ae45-70a60fb5f6e0" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="AppKey" value="${Stage_AppKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request>{
   "header":{
      "application":"${DataSource#application}",
      "brand":"${DataSource#brand}",
      "domainId":"${DataSource#domainID}",
      "language":"${DataSource#language}"
   },
   "countryCode":"${DataSource#countryCode}",
   "bookingAccessToken":"${#TestCase#AccessToken}",
   "sailingInfo":{
      "shipCode":"${#TestCase#ShipCode}",
      "sailDate":"${#TestCase#SailDate}",
      "packageCode":"${#TestCase#PackageCode}",
      "currencyCode":"${DataSource#currencyCode}"
   },
   "reservations":[{
      "cabin":{
         "berthedCategoryCode":"${#TestCase#Category}",
         "fareCode":"${#TestCase#FareCode}",
         "pricedCategoryCode":"${#TestCase#Category}",
         "waitListed":"${DataSource#waitListed}",
         "accessible":"${DataSource#accessible}",
         "number":"${#TestCase#CabinNumber}"
      },
      "dining":[{
         "sitting":"${DataSource#sitting}",
         "sittingType":"${DataSource#sittingType}",
         "sittingInstance":"${DataSource#sittingInstance}",
         "waitListed":"${DataSource#dine waitListed}"
      }],
      "gratuitiesPrepaid":"${DataSource#gratuitiesPrepaid}",
      "fareQualifiers":{
         "seniorReqd":"${DataSource#seniorReqd}",
         "militaryReqd":"${DataSource#militaryReqd}",
         "policeReqd":"${DataSource#policeReqd}",
         "fireFighterReqd":"${DataSource#fireFighterReqd}"
      },
      "guestDetails":[{
         "guestContact":{
            "personalInfo":{
               "name":{
                  "title":"${DataSource#title}",
                  "firstName":"${DataSource#firstName}",
                  "lastName":"${DataSource#lastName}"
               },
               "age":"${DataSource#age}",
               "birthDate":"${DataSource#birthDate}",
               "gender":"${DataSource#gender}",
               "nationality":"${DataSource#nationality}"
            },
            "telephoneInfo":{
               "telephoneNumber":"${DataSource#telephoneNumber}",
               "telephoneCountryCode":"${DataSource#telephoneCountryCode}",
               "telephoneType":"${DataSource#telephoneType}"
            },
            "address":{
               "address1":"${DataSource#address1}",
               "city":"${DataSource#city}",
               "stateCode":"${DataSource#stateCode}",
               "postalCode":"${DataSource#postalCode}",
               "countryName":"${DataSource#add countryName}"
            },
            "email":"${DataSource#email}"
         },
         "cruiseDocument":{
            "deliveryMethod":"${DataSource#deliveryMethod}"
         },
         "guestTransportation":{
            "airportCityCode":"${DataSource#airportCityCode}",
            "airportCityName":"${DataSource#airportCityName}",
            "status":"${DataSource#trans status}"
         }
      }]
   }],
   "courtesyHold":"${DataSource#courtesyHold}"
}</con:request>
        <con:originalUri>https://stg1-int.api.rccl.com/esl/booking/stg1/rest/v3/createBooking</con:originalUri>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="fb80c0e8-f76d-47b2-810a-f73b9a8b53f1">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="06e8c7b9-d4f6-4961-83f3-2298cdb6d393">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="4fedb5bd-4f85-4e65-be0d-10733b6063c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CreateBooking_someParameterize" id="a8fea30b-ead1-4b45-96fb-279c5a61433f" disabled="true">
    <con:settings/>
    <con:config service="Booking" resourcePath="/createBooking" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="CreateBooking_someParameterize" id="11440270-6113-4dbd-ae45-70a60fb5f6e0" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="AppKey" value="${Stage_AppKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request>{
    "header": {
      "application": "${DataSource#application}",
      "brand": "${DataSource#brand}",
      "domainId": "${DataSource#domainID}",
      "language": "${DataSource#language}"
    },
    "countryCode": "${DataSource#countryCode}",
    "sailingInfo": {
	 "shipCode":"${#TestCase#ShipCode}",
      "sailDate":"${#TestCase#SailDate}",
      "packageCode":"${#TestCase#PackageCode}",
      "currencyCode":"${DataSource#currencyCode}"
    },
    "reservations": [{
      "cabin": {
      	"berthedCategoryCode":"${#TestCase#Category}",
      	"fareCode":"${#TestCase#FareCode}",
      	"pricedCategoryCode":"${#TestCase#Category}",
      	"waitListed":"${DataSource#waitListed}",
      	"accessible":"${DataSource#accessible}",
      	"number":"${#TestCase#CabinNumber}"
      },
      "dining": [{
        "sitting": "${DataSource#sitting}",
         "sittingType":"${DataSource#sittingType}",
         "sittingInstance":"${DataSource#sittingInstance}"
      }],
      "gratuitiesPrepaid": "${DataSource#gratuitiesPrepaid}",
      "insurance": {
        "code": "CRCR",
        "optionIndicator": "false"
      },
      "fareQualifiers": {
         "seniorReqd":"${DataSource#seniorReqd}",
         "militaryReqd":"${DataSource#militaryReqd}",
         "policeReqd":"${DataSource#policeReqd}",
         "fireFighterReqd":"${DataSource#fireFighterReqd}"
      },
      "guestDetails": [
        {
          "guestContact": {
           "guestRefNumber": "0",
            "personalInfo": {
              "name": {
                "title":"${DataSource#title}",
                "firstName":"${DataSource#firstName}",
                "lastName":"${DataSource#lastName}"
              },
               "age":"${DataSource#age}",
               "birthDate":"${DataSource#birthDate}",
               "gender":"${DataSource#gender}",
               "nationality":"${DataSource#nationality}"
            },
            "address": {
               "address1":"${DataSource#address1}",
               "city":"${DataSource#city}",
               "stateCode":"${DataSource#stateCode}",
               "postalCode":"${DataSource#postalCode}",
               "countryName":"${DataSource#add countryName}"
            },
            "email": "${DataSource#email}"
          }
        },
        {
          "guestContact": {
            "guestRefNumber": "0",
            "personalInfo": {
              "name": {
                "title": "MR",
                "firstName": "firstTwo",
                "lastName": "lastTwo"
              },
              "age": "55",
              "birthDate": "1960-05-13",
              "gender": "M",
              "nationality": "USA"
            },
            "address": {
              "address1": "addr1",
              "city": "city1",
              "stateCode": "NA",
              "postalCode": "48034",
              "countryName": "USA"
            },
            "email": "test2@gmail.com"
          }
        }
      ],
      "listOfCardPayments": {
        "cardPayment": [{
          "cardType": "${DataSource#CC_cardType}",
          "cardToken": "${DataSource#CCNum_Token}",
          "expireDate": "${DataSource#CC_expireDate}",
          "amount": "${DataSource#CC_amount}",
          "currency": "${DataSource#CC_currency}",
          "extendPayments": "${DataSource#CC_extendPayments}",
          "contact": {
            "firstName": "${DataSource#CC_FirstName}",
            "lastName": "${DataSource#CC_LastName}",
            "address": {
              "address1": "${DataSource#CC_address}",
              "city": "${DataSource#CC_city}",
              "stateCode": "${DataSource#CC_stateCode}",
              "postalCode": "${DataSource#CC_postalCode}",
              "countryCode": "${DataSource#CC_countryCode}",
              "countryName": "${DataSource#CC_countryName}"
            }
          }
        }]
      }
    }],
    "courtesyHold": "${DataSource#courtesyHold}"
  }</con:request>
        <con:originalUri>https://stg1-int.api.rccl.com/esl/booking/stg1/rest/v3/createBooking</con:originalUri>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="fb80c0e8-f76d-47b2-810a-f73b9a8b53f1">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="06e8c7b9-d4f6-4961-83f3-2298cdb6d393">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="4fedb5bd-4f85-4e65-be0d-10733b6063c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CreateBooking-allParameterize" id="a7ee5241-ce9d-4589-bf7c-b76ed672cc66" disabled="true">
    <con:settings/>
    <con:config service="Booking" resourcePath="/createBooking" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="CreateBooking-allParameterize" id="11440270-6113-4dbd-ae45-70a60fb5f6e0" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${Stage_AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request>{
    "header": {
      "application": "${DataSource#application}",
      "brand": "${DataSource#brand}",
      "domainId": "${DataSource#domainID}",
      "language": "${DataSource#language}"
    },
    "countryCode": "${DataSource#countryCode}",
    "bookingAccessToken":"${#TestCase#AccessToken}",
    "sailingInfo": {
	 "shipCode":"${#TestCase#ShipCode}",
      "sailDate":"${#TestCase#SailDate}",
      "packageCode":"${#TestCase#PackageCode}",
      "currencyCode":"${DataSource#currencyCode}"
    },
    "reservations": [{
      "cabin": {
      	"berthedCategoryCode":"${#TestCase#Category}",
      	"fareCode":"${#TestCase#FareCode}",
      	"pricedCategoryCode":"${#TestCase#Category}",
      	"waitListed":"${DataSource#waitListed}",
      	"accessible":"${DataSource#accessible}",
      	"number":"${#TestCase#CabinNumber}"
      },
      "dining": [{
        "sitting": "${DataSource#sitting}",
         "sittingType":"${DataSource#sittingType}",
         "sittingInstance":"${DataSource#sittingInstance}"
      }],
      "gratuitiesPrepaid": "${DataSource#gratuitiesPrepaid}",
	 "fareQualifiers": {
         "seniorReqd":"${DataSource#seniorReqd}",
         "militaryReqd":"${DataSource#militaryReqd}",
         "policeReqd":"${DataSource#policeReqd}",
         "fireFighterReqd":"${DataSource#fireFighterReqd}"
      },
      "guestDetails": [
        {
          "guestContact": {
            "personalInfo": {
              "name": {
                "title":"${DataSource#title}",
                "firstName":"${DataSource#firstName}",
                "lastName":"${DataSource#lastName}"
              },
               "age":"${DataSource#age}",
               "birthDate":"${DataSource#birthDate}",
               "gender":"${DataSource#gender}",
               "nationality":"${DataSource#nationality}"
            },
            "address": {
               "address1":"${DataSource#address1}",
               "city":"${DataSource#city}",
               "stateCode":"${DataSource#stateCode}",
               "postalCode":"${DataSource#postalCode}",
               "countryName":"${DataSource#countryName}"
            },
            "email": "${DataSource#email}"
          }
        },
        {
          "guestContact": {
            "personalInfo": {
              "name": {
                "title": "${DataSource#title2}",
                "firstName": "${DataSource#firstName2}",
                "lastName": "${DataSource#lastName2}"
              },
              "age": "${DataSource#age2}",
              "birthDate": "${DataSource#birthDate2}",
              "gender": "${DataSource#gender2}",
              "nationality": "${DataSource#nationality2}"
            },
            "address": {
               "address1":"${DataSource#address1}",
               "city":"${DataSource#city}",
               "stateCode":"${DataSource#stateCode}",
               "postalCode":"${DataSource#postalCode}",
               "countryName":"${DataSource#countryName}"
            },
            "email": "${DataSource#email2}"
          }
        }
      ],
      "listOfCardPayments": {
        "cardPayment": [{
          "cardType": "${DataSource#CC_cardType}",
          "cardToken": "${DataSource#CCNum_Token}",
          "expireDate": "${DataSource#CC_expireDate}",
          "amount": "1713.5",
          "currency": "${DataSource#CC_currency}",
          "extendPayments": "${DataSource#CC_extendPayments}",
          "contact": {
            "firstName": "${DataSource#CC_FirstName}",
            "lastName": "${DataSource#CC_LastName}",
            "address": {
              "address1": "${DataSource#CC_address}",
              "city": "${DataSource#CC_city}",
              "stateCode": "${DataSource#CC_stateCode}",
              "postalCode": "${DataSource#CC_postalCode}",
              "countryCode": "${DataSource#CC_countryCode}",
              "countryName": "${DataSource#CC_countryName}"
            }
          }
        }]
      }
    }],
    "courtesyHold": "${DataSource#courtesyHold}"
  }</con:request>
        <con:originalUri>https://stg1-int.api.rccl.com/esl/booking/stg1/rest/v3/createBooking</con:originalUri>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="fb80c0e8-f76d-47b2-810a-f73b9a8b53f1">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="06e8c7b9-d4f6-4961-83f3-2298cdb6d393">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="4fedb5bd-4f85-4e65-be0d-10733b6063c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CreateBooking-allParameterize-no BrandID" id="84342d00-e735-4e93-bc95-fa25f1a43520">
    <con:settings/>
    <con:config service="Booking" resourcePath="/createBooking" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="CreateBooking-allParameterize-no BrandID" id="11440270-6113-4dbd-ae45-70a60fb5f6e0" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${Stage_AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request>{
    "header": {
      "application": "${DataSource#application}",
      
      "domainId": "${DataSource#domainID}",
      "language": "${DataSource#language}"
    },
    "countryCode": "${DataSource#countryCode}",
    "bookingAccessToken":"${#TestCase#AccessToken}",
    "sailingInfo": {
	 "shipCode":"${#TestCase#ShipCode}",
      "sailDate":"${#TestCase#SailDate}",
      "packageCode":"${#TestCase#PackageCode}",
      "currencyCode":"${DataSource#currencyCode}"
    },
    "reservations": [{
      "cabin": {
      	"berthedCategoryCode":"${#TestCase#Category}",
      	"fareCode":"${#TestCase#FareCode}",
      	"pricedCategoryCode":"${#TestCase#Category}",
      	"waitListed":"${DataSource#waitListed}",
      	"accessible":"${DataSource#accessible}",
      	"number":"${#TestCase#CabinNumber}"
      },
      "dining": [{
        "sitting": "${DataSource#sitting}",
         "sittingType":"${DataSource#sittingType}",
         "sittingInstance":"${DataSource#sittingInstance}"
      }],
      "gratuitiesPrepaid": "${DataSource#gratuitiesPrepaid}",
	 "fareQualifiers": {
         "seniorReqd":"${DataSource#seniorReqd}",
         "militaryReqd":"${DataSource#militaryReqd}",
         "policeReqd":"${DataSource#policeReqd}",
         "fireFighterReqd":"${DataSource#fireFighterReqd}"
      },
      "guestDetails": [
        {
          "guestContact": {
            "personalInfo": {
              "name": {
                "title":"${DataSource#title}",
                "firstName":"${DataSource#firstName}",
                "lastName":"${DataSource#lastName}"
              },
               "age":"${DataSource#age}",
               "birthDate":"${DataSource#birthDate}",
               "gender":"${DataSource#gender}",
               "nationality":"${DataSource#nationality}"
            },
            "address": {
               "address1":"${DataSource#address1}",
               "city":"${DataSource#city}",
               "stateCode":"${DataSource#stateCode}",
               "postalCode":"${DataSource#postalCode}",
               "countryName":"${DataSource#countryName}"
            },
            "email": "${DataSource#email}"
          }
        },
        {
          "guestContact": {
            "personalInfo": {
              "name": {
                "title": "${DataSource#title2}",
                "firstName": "${DataSource#firstName2}",
                "lastName": "${DataSource#lastName2}"
              },
              "age": "${DataSource#age2}",
              "birthDate": "${DataSource#birthDate2}",
              "gender": "${DataSource#gender2}",
              "nationality": "${DataSource#nationality2}"
            },
            "address": {
               "address1":"${DataSource#address1}",
               "city":"${DataSource#city}",
               "stateCode":"${DataSource#stateCode}",
               "postalCode":"${DataSource#postalCode}",
               "countryName":"${DataSource#countryName}"
            },
            "email": "${DataSource#email2}"
          }
        }
      ],
      "listOfCardPayments": {
        "cardPayment": [{
          "cardType": "${DataSource#CC_cardType}",
          "cardToken": "${DataSource#CCNum_Token}",
          "expireDate": "${DataSource#CC_expireDate}",
          "amount": "1713.5",
          "currency": "${DataSource#CC_currency}",
          "extendPayments": "${DataSource#CC_extendPayments}",
          "contact": {
            "firstName": "${DataSource#CC_FirstName}",
            "lastName": "${DataSource#CC_LastName}",
            "address": {
              "address1": "${DataSource#CC_address}",
              "city": "${DataSource#CC_city}",
              "stateCode": "${DataSource#CC_stateCode}",
              "postalCode": "${DataSource#CC_postalCode}",
              "countryCode": "${DataSource#CC_countryCode}",
              "countryName": "${DataSource#CC_countryName}"
            }
          }
        }]
      }
    }],
    "courtesyHold": "${DataSource#courtesyHold}"
  }</con:request>
        <con:originalUri>https://stg1-int.api.rccl.com/esl/booking/stg1/rest/v3/createBooking</con:originalUri>
        <con:assertion type="JsonPath Match" id="ed698b43-a443-460d-98b3-438c1f7505b1" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="774c264e-116a-40de-be1b-7835be93d463" name="Match content of [description]">
          <con:configuration>
            <path>$['header']['error'][0]['description']</path>
            <content>Value is required for brandCode</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="fb80c0e8-f76d-47b2-810a-f73b9a8b53f1">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="06e8c7b9-d4f6-4961-83f3-2298cdb6d393">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="4fedb5bd-4f85-4e65-be0d-10733b6063c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CreateBooking-allParameterize-no Sailing Info" id="355abfaf-ffa6-4a11-82f4-0502701a4d3a">
    <con:settings/>
    <con:config service="Booking" resourcePath="/createBooking" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="CreateBooking-allParameterize-no Sailing Info" id="11440270-6113-4dbd-ae45-70a60fb5f6e0" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${Stage_AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request>{
    "header": {
      "application": "${DataSource#application}",
      "brand": "${DataSource#brand}",
      "domainId": "${DataSource#domainID}",
      "language": "${DataSource#language}"
    },
    "countryCode": "${DataSource#countryCode}",
    "bookingAccessToken":"${#TestCase#AccessToken}",

    "reservations": [{
      "cabin": {
      	"berthedCategoryCode":"${#TestCase#Category}",
      	"fareCode":"${#TestCase#FareCode}",
      	"pricedCategoryCode":"${#TestCase#Category}",
      	"waitListed":"${DataSource#waitListed}",
      	"accessible":"${DataSource#accessible}",
      	"number":"${#TestCase#CabinNumber}"
      },
      "dining": [{
        "sitting": "${DataSource#sitting}",
         "sittingType":"${DataSource#sittingType}",
         "sittingInstance":"${DataSource#sittingInstance}"
      }],
      "gratuitiesPrepaid": "${DataSource#gratuitiesPrepaid}",
      "insurance": {
      	"code": "CRCR",
      	"optionIndicator": "false"
      },
	 "fareQualifiers": {
         "seniorReqd":"${DataSource#seniorReqd}",
         "militaryReqd":"${DataSource#militaryReqd}",
         "policeReqd":"${DataSource#policeReqd}",
         "fireFighterReqd":"${DataSource#fireFighterReqd}"
      },
      "guestDetails": [{
          "guestContact": {
            "personalInfo": {
              "name": {
                "title":"${DataSource#title}",
                "firstName":"${DataSource#firstName}",
                "lastName":"${DataSource#lastName}"
              },
               "age":"${DataSource#age}",
               "birthDate":"${DataSource#birthDate}",
               "gender":"${DataSource#gender}",
               "nationality":"${DataSource#nationality}"
            },
            "address": {
               "address1":"${DataSource#address1}",
               "city":"${DataSource#city}",
               "stateCode":"${DataSource#stateCode}",
               "postalCode":"${DataSource#postalCode}",
               "countryName":"${DataSource#countryName}"
            },
            "email": "${DataSource#email}"
          }
        }],
      "listOfCardPayments": {
        "cardPayment": [{
          "cardType": "${DataSource#CC_cardType}",
          "cardToken": "${DataSource#CCNum_Token}",
          "expireDate": "${DataSource#CC_expireDate}",
          "amount": "1713.50",
          "currency": "${DataSource#CC_currency}",
          "extendPayments": "${DataSource#CC_extendPayments}",
          "contact": {
            "firstName": "${DataSource#CC_FirstName}",
            "lastName": "${DataSource#CC_LastName}",
            "address": {
              "address1": "${DataSource#CC_address}",
              "city": "${DataSource#CC_city}",
              "stateCode": "${DataSource#CC_stateCode}",
              "postalCode": "${DataSource#CC_postalCode}",
              "countryCode": "${DataSource#CC_countryCode}",
              "countryName": "${DataSource#CC_countryName}"
            }
          }
        }]
      }
    }],
    "courtesyHold": "${DataSource#courtesyHold}"
  }</con:request>
        <con:originalUri>https://stg1-int.api.rccl.com/esl/booking/stg1/rest/v3/createBooking</con:originalUri>
        <con:assertion type="JsonPath Match" id="ed698b43-a443-460d-98b3-438c1f7505b1" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="76f1f577-419d-4d51-889a-81b9fef7b2f2" name="Match content of [description]">
          <con:configuration>
            <path>$['header']['error'][0]['description']</path>
            <content>Unknown failure in orchestration layer: null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="fb80c0e8-f76d-47b2-810a-f73b9a8b53f1">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="06e8c7b9-d4f6-4961-83f3-2298cdb6d393">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="4fedb5bd-4f85-4e65-be0d-10733b6063c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CreateBooking-allParameterize-no Cabin Info" id="3da272b5-c614-4665-8918-3632db3b744c">
    <con:settings/>
    <con:config service="Booking" resourcePath="/createBooking" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="CreateBooking-allParameterize-no Cabin Info" id="11440270-6113-4dbd-ae45-70a60fb5f6e0" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${Stage_AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request>{
    "header": {
      "application": "${DataSource#application}",
      "brand": "${DataSource#brand}",
      "domainId": "${DataSource#domainID}",
      "language": "${DataSource#language}"
    },
    "countryCode": "${DataSource#countryCode}",
    "bookingAccessToken":"${#TestCase#AccessToken}",
    "sailingInfo": {
	 "shipCode":"${#TestCase#ShipCode}",
      "sailDate":"${#TestCase#SailDate}",
      "packageCode":"${#TestCase#PackageCode}",
      "currencyCode":"${DataSource#currencyCode}"
    },
    "reservations": [{

      "dining": [{
        "sitting": "${DataSource#sitting}",
         "sittingType":"${DataSource#sittingType}",
         "sittingInstance":"${DataSource#sittingInstance}"
      }],
      "gratuitiesPrepaid": "${DataSource#gratuitiesPrepaid}",
	 "fareQualifiers": {
         "seniorReqd":"${DataSource#seniorReqd}",
         "militaryReqd":"${DataSource#militaryReqd}",
         "policeReqd":"${DataSource#policeReqd}",
         "fireFighterReqd":"${DataSource#fireFighterReqd}"
      },
      "guestDetails": [
        {
          "guestContact": {
            "personalInfo": {
              "name": {
                "title":"${DataSource#title}",
                "firstName":"${DataSource#firstName}",
                "lastName":"${DataSource#lastName}"
              },
               "age":"${DataSource#age}",
               "birthDate":"${DataSource#birthDate}",
               "gender":"${DataSource#gender}",
               "nationality":"${DataSource#nationality}"
            },
            "address": {
               "address1":"${DataSource#address1}",
               "city":"${DataSource#city}",
               "stateCode":"${DataSource#stateCode}",
               "postalCode":"${DataSource#postalCode}",
               "countryName":"${DataSource#countryName}"
            },
            "email": "${DataSource#email}"
          }
        },
        {
          "guestContact": {
            "personalInfo": {
              "name": {
                "title": "${DataSource#title2}",
                "firstName": "${DataSource#firstName2}",
                "lastName": "${DataSource#lastName2}"
              },
              "age": "${DataSource#age2}",
              "birthDate": "${DataSource#birthDate2}",
              "gender": "${DataSource#gender2}",
              "nationality": "${DataSource#nationality2}"
            },
            "address": {
               "address1":"${DataSource#address1}",
               "city":"${DataSource#city}",
               "stateCode":"${DataSource#stateCode}",
               "postalCode":"${DataSource#postalCode}",
               "countryName":"${DataSource#countryName}"
            },
            "email": "${DataSource#email2}"
          }
        }
      ],
      "listOfCardPayments": {
        "cardPayment": [{
          "cardType": "${DataSource#CC_cardType}",
          "cardToken": "${DataSource#CCNum_Token}",
          "expireDate": "${DataSource#CC_expireDate}",
          "amount": "1713.5",
          "currency": "${DataSource#CC_currency}",
          "extendPayments": "${DataSource#CC_extendPayments}",
          "contact": {
            "firstName": "${DataSource#CC_FirstName}",
            "lastName": "${DataSource#CC_LastName}",
            "address": {
              "address1": "${DataSource#CC_address}",
              "city": "${DataSource#CC_city}",
              "stateCode": "${DataSource#CC_stateCode}",
              "postalCode": "${DataSource#CC_postalCode}",
              "countryCode": "${DataSource#CC_countryCode}",
              "countryName": "${DataSource#CC_countryName}"
            }
          }
        }]
      }
    }],
    "courtesyHold": "${DataSource#courtesyHold}"
  }</con:request>
        <con:originalUri>https://stg1-int.api.rccl.com/esl/booking/stg1/rest/v3/createBooking</con:originalUri>
        <con:assertion type="JsonPath Match" id="9426991f-4705-4ba3-a55a-3e3c78c22bcd" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="d1cada15-3919-4f7b-9ce8-e4e161a9745d" name="Match content of [description]">
          <con:configuration>
            <path>$['header']['error'][0]['description']</path>
            <content>Unknown failure in orchestration layer: null</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters/>
        <con:environmentSpec>
          <con:entry environmentId="fb80c0e8-f76d-47b2-810a-f73b9a8b53f1">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="06e8c7b9-d4f6-4961-83f3-2298cdb6d393">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="4fedb5bd-4f85-4e65-be0d-10733b6063c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>PackageCode</con:name>
      <con:value>BR07M428</con:value>
    </con:property>
    <con:property>
      <con:name>ShipCode</con:name>
      <con:value>BR</con:value>
    </con:property>
    <con:property>
      <con:name>SailDate</con:name>
      <con:value>2019-09-22</con:value>
    </con:property>
    <con:property>
      <con:name>FareCode</con:name>
      <con:value>C8187482</con:value>
    </con:property>
    <con:property>
      <con:name>Category</con:name>
      <con:value>4V</con:value>
    </con:property>
    <con:property>
      <con:name>CabinNumber</con:name>
      <con:value>8025</con:value>
    </con:property>
    <con:property>
      <con:name>AccessToken</con:name>
      <con:value>3d65c9e8-4908-4612-befa-7a2e1777198e</con:value>
    </con:property>
    <con:property>
      <con:name>Request</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Response</con:name>
      <con:value/>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>77cadc0b-0633-4cef-9070-7f02dba07058</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>e4c5f9ab-af4d-40c9-937e-13d4aa680a78</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>9b824a94-117e-4ab0-a452-88cff9fec4af</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>206da2e8-fd15-4e51-a0b1-14f15f9020a9</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>57155be8-4a77-4de6-9096-ded9752d78ad</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>59985c86-5275-4025-928e-4d210f6d0921</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>9e506c37-b33e-43f7-90d4-540efcbfacfb</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>f349e65e-8b4f-4824-a3ff-76ebed5e999a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>0b0a027f-d882-45a1-9b94-ccfd7dff9b15</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>f3df2d4e-877c-4ed0-bf8d-281495b6c821</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>aa4aff55-41d1-41db-a69b-f52592dd7a22</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>3749e2a0-b058-47bf-99b0-c0a2b8350d17</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>642de0dc-afbb-42e4-be1c-b880b666bfb4</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:environmentSpec>
    <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
</con:testCase>