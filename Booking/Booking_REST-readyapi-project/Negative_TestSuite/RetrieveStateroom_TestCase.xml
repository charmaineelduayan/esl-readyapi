<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="e5a4eaa4-407e-404d-b27e-9c5e1cc58d5a" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RetrieveStateroom_TestCase" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="e5a4eaa4-407e-404d-b27e-9c5e1cc58d5afileName">RetrieveStateroom_TestCase</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="datasource" name="DataSource" id="2b238150-b5cf-4bf6-8682-97dd229c4d08">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration><file>Booking_REST_Input.xls</file><worksheet>RetrieveStateroom</worksheet><cell>A2</cell><ignoreEmpty>false</ignoreEmpty><evaluateFormulas>false</evaluateFormulas></con:configuration>
      </con:dataSource>
      <con:shared>false</con:shared>
      <con:restartShared>false</con:restartShared>
      <con:property>S.No</con:property>
      <con:property>ServiceName</con:property>
      <con:property>Operation Name</con:property>
      <con:property>ExecutionFlag</con:property>
      <con:property>TestCaseName</con:property>
      <con:property>TestCaseDescription</con:property>
      <con:property>application</con:property>
      <con:property>brand</con:property>
      <con:property>domainId</con:property>
      <con:property>language</con:property>
      <con:property>uuid</con:property>
      <con:property>countryCode</con:property>
      <con:property>agencyId</con:property>
      <con:property>bookingId</con:property>
      <con:property>bookingAccessToken</con:property>
      <con:property>shipCode</con:property>
      <con:property>sailDate</con:property>
      <con:property>packageId</con:property>
      <con:property>cabinNumber</con:property>
      <con:property>currency</con:property>
      <con:property>guestAge</con:property>
      <con:property>accessibleReqd</con:property>
      <con:property>seniorReqd</con:property>
      <con:property>militaryReqd</con:property>
      <con:property>policeReqd</con:property>
      <con:property>fireFighterReqd</con:property>
      <con:property>stateCode</con:property>
      <con:property>loyaltyId</con:property>
      <con:property>couponCodes</con:property>
      <con:property>fareCode</con:property>
      <con:property>selectedFareCode</con:property>
      <con:property>includeDeckInfo</con:property>
      <con:property>noShowOfUpgrades</con:property>
      <con:property>connectedCabinsReqd</con:property>
      <con:property>guestAge_CO</con:property>
      <con:property>accessibleReqd_CO</con:property>
      <con:property>seniorReqd_CO</con:property>
      <con:property>militaryReqd_CO</con:property>
      <con:property>policeReqd_CO</con:property>
      <con:property>fireFighterReqd_CO</con:property>
      <con:property>stateCode_CO</con:property>
      <con:property>loyaltyId_CO</con:property>
      <con:property>couponCodes_CO</con:property>
      <con:property>Orchestration_application</con:property>
      <con:property>Orchestration_brand</con:property>
      <con:property>Orchestration_office</con:property>
      <con:property>Orchestration_channel</con:property>
      <con:property>Orchestration_countryCode</con:property>
      <con:property>Orchestration_bookingType</con:property>
      <con:property>Orchestration_cruiseType</con:property>
      <con:property>Orchestration_accessibleCabins</con:property>
      <con:property>Orchestration_results</con:property>
      <con:property>Orchestration_pagination</con:property>
      <con:property>Orchestration_Prices</con:property>
      <con:property>Orchestration_guestAge</con:property>
      <con:property>Orchestration_includeDeckInfo</con:property>
      <con:property>Orchestration_seniorReqd</con:property>
      <con:property>Orchestration_militaryReqd</con:property>
      <con:property>Orchestration_policeReqd</con:property>
      <con:property>Orchestration_fireFighterReqd</con:property>
      <con:property>Orchestration_includeAllStaterooms</con:property>
      <con:property>Orchestration_includeUpsell</con:property>
      <con:property>Orchestration_includePromoContent</con:property>
      <con:property>Orchestration_includeCategory</con:property>
      <con:property>Orchestration_accessibleReqd</con:property>
      <con:property>Orchestration_currencyCode</con:property>
      <con:property>Orchestration_fareCode</con:property>
      <con:startRow>1</con:startRow>
      <con:endRow>1</con:endRow>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:trimValues>false</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
      <con:stopDatasourceExhausted>false</con:stopDatasourceExhausted>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="CruiseSearch" id="00303284-5c09-4294-81c1-1f0bc8c1d6ef">
    <con:settings/>
    <con:config service="CruiseSearch" resourcePath="/cruiseSearch?" methodName="CruiseSearch" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="CruiseSearch" id="311d37c2-2066-49ea-aeb4-3adc006be12d" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>http://eslbservicestst01.rccl.com:13000</con:endpoint>
        <con:request/>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/search/rest/cruiseSearch</con:originalUri>
        <con:assertion type="Simple Contains" id="e44e4c7c-54c2-4365-8eff-1ff92ab06c83" name="Contains">
          <con:configuration>
            <token>Success</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="criteria.brand.value" value="${DataSource#brand}"/>
          <con:entry key="header.application" value="${DataSource#Orchestration_application}"/>
          <con:entry key="criteria.channel" value="${DataSource#Orchestration_channel}"/>
          <con:entry key="resultsPreference.includeResults" value="${DataSource#Orchestration_results}"/>
          <con:entry key="criteria.accessibleCabins" value="${DataSource#Orchestration_accessibleCabins}"/>
          <con:entry key="criteria.office" value="${DataSource#Orchestration_office}"/>
          <con:entry key="criteria.currency" value="${DataSource#Orchestration_currencyCode}"/>
          <con:entry key="resultsPreference.includePrices" value="${DataSource#Orchestration_Prices}"/>
          <con:entry key="criteria.bookingType" value="${DataSource#Orchestration_bookingType}"/>
          <con:entry key="resultsPreference.pagination.count" value="${DataSource#Orchestration_pagination}"/>
          <con:entry key="criteria.country" value="${DataSource#Orchestration_countryCode}"/>
          <con:entry key="criteria.cruiseType.value" value="${DataSource#Orchestration_cruiseType}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>criteria.office</con:entry>
          <con:entry>criteria.country</con:entry>
          <con:entry>criteria.currency</con:entry>
          <con:entry>criteria.channel</con:entry>
          <con:entry>criteria.bookingType</con:entry>
          <con:entry>criteria.cruiseType.value</con:entry>
          <con:entry>criteria.brand.value</con:entry>
          <con:entry>criteria.ship.value</con:entry>
          <con:entry>criteria.port.value</con:entry>
          <con:entry>criteria.portOfCall.value</con:entry>
          <con:entry>criteria.tourCity.value</con:entry>
          <con:entry>criteria.region.value</con:entry>
          <con:entry>criteria.duration.value</con:entry>
          <con:entry>criteria.packageId.value</con:entry>
          <con:entry>criteria.marketingPromotionType.value</con:entry>
          <con:entry>criteria.marketingPromotionId.value</con:entry>
          <con:entry>criteria.onboardActivity.value</con:entry>
          <con:entry>criteria.sailingDate.dateRange.from</con:entry>
          <con:entry>criteria.sailingDate.dateRange.to</con:entry>
          <con:entry>criteria.startDate.dateRange.from</con:entry>
          <con:entry>criteria.startDate.dateRange.to</con:entry>
          <con:entry>criteria.occupancy.adult</con:entry>
          <con:entry>criteria.occupancy.child</con:entry>
          <con:entry>criteria.occupancy.infant</con:entry>
          <con:entry>criteria.priceRange.min</con:entry>
          <con:entry>criteria.priceRange.max</con:entry>
          <con:entry>criteria.priceRange.cabinClass</con:entry>
          <con:entry>criteria.accessibleCabins</con:entry>
          <con:entry>qualifiers.priceId.value</con:entry>
          <con:entry>qualifiers.promotionId.value</con:entry>
          <con:entry>qualifiers.promotionType.value</con:entry>
          <con:entry>qualifiers.residentType.promotionType</con:entry>
          <con:entry>qualifiers.residentType.state</con:entry>
          <con:entry>qualifiers.loyaltyType.promotionType</con:entry>
          <con:entry>qualifiers.loyaltyType.loyaltyTier.name</con:entry>
          <con:entry>qualifiers.loyaltyType.loyaltyTier.value</con:entry>
          <con:entry>qualifiers.airType.promotionType</con:entry>
          <con:entry>qualifiers.airType.gateway</con:entry>
          <con:entry>qualifiers.priceScope</con:entry>
          <con:entry>qualifiers.qualifierScope</con:entry>
          <con:entry>qualifiers.searchScope</con:entry>
          <con:entry>resultsPreference.includeFacets</con:entry>
          <con:entry>resultsPreference.includeResults</con:entry>
          <con:entry>resultsPreference.includeOnlyIfPriceAvailable</con:entry>
          <con:entry>resultsPreference.sortBy</con:entry>
          <con:entry>resultsPreference.sortOrder</con:entry>
          <con:entry>resultsPreference.pagination.count</con:entry>
          <con:entry>resultsPreference.pagination.offset</con:entry>
          <con:entry>resultsPreference.strictSearch</con:entry>
          <con:entry>resultsPreference.groupBy</con:entry>
          <con:entry>resultsPreference.guestPricing</con:entry>
          <con:entry>resultsPreference.priceLevel.bestPricedCategory</con:entry>
          <con:entry>resultsPreference.priceLevel.cabinClass</con:entry>
          <con:entry>resultsPreference.bundleComponent.value</con:entry>
          <con:entry>resultsPreference.includePrices</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="FetchValues" id="35a65412-c935-4704-8141-74e883610765">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*
def tc = testRunner.testCase.testSuite.testCases["RetrieveStateroom_TestCase"];

def ts = testRunner.testCase.getTestStepByName("CruiseSearch")
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

def packageCode = res.resultsBySailing.sailingSummaryWithClassLevelPricing[0].sailingRef.@package.text();
testRunner.testCase.setPropertyValue("PackageCode",packageCode)

String shipCode= packageCode.substring(0,2);
testRunner.testCase.setPropertyValue("ShipCode",shipCode)

def sailDate = res.resultsBySailing.sailingSummaryWithClassLevelPricing[0].sailingRef.@saildate.text();
testRunner.testCase.setPropertyValue("SailDate",sailDate)</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="RetrieveStateroomCategories" id="164b0dd4-6a10-431f-836b-77fd7c6cb08b">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroomCategories" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="RetrieveStateroomCategories" id="5fba8706-403e-4671-b10c-17fe0c3f35b3" mediaType="application/json" postQueryString="false">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="AppKey" value="${#Project#AppKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://stg1.mesos.rccl.com/booking-stg1/v4/booking/rest/v3/</con:endpoint>
        <con:request/>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroomCategories</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="93da5785-2c7d-4a72-916d-30c090caa0a5" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="Simple Contains" id="4a8da4a7-ccf5-4f22-998a-18ea0f33bb0a" name="Contains">
          <con:configuration>
            <token>Success</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:assertion type="Simple Contains" id="fac3c05f-e8da-4c41-84e0-6a5d787f3bfb" name="Contains 1">
          <con:configuration>
            <token>"stateroomCategoryTypes"</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:assertion type="Simple Contains" id="bc1019af-2e73-4c66-a7fb-bf3e6116c239" name="Contains 2">
          <con:configuration>
            <token>"categories"</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="accessibleReqd" value="${DataSource#accessibleReqd}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="policeReqd" value="${DataSource#policeReqd}"/>
          <con:entry key="includeDeckInfo" value="${DataSource#includeDeckInfo}"/>
          <con:entry key="includeAllStaterooms" value="true"/>
          <con:entry key="includeUpsell" value="${DataSource#includeUpsell}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="militaryReqd" value="${DataSource#militaryReqd}"/>
          <con:entry key="debugId" value=""/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="seniorReqd" value="${DataSource#seniorReqd}"/>
          <con:entry key="guestAge[0]" value="${DataSource#guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="fareCode" value="${DataSource#fareCode}"/>
          <con:entry key="fireFighterReqd" value="${DataSource#fireFighterReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>countryCode</con:entry>
          <con:entry>agencyId</con:entry>
          <con:entry>bookingAccessToken</con:entry>
          <con:entry>bookingId</con:entry>
          <con:entry>shipCode</con:entry>
          <con:entry>sailDate</con:entry>
          <con:entry>packageId</con:entry>
          <con:entry>stateroomType</con:entry>
          <con:entry>currency</con:entry>
          <con:entry>guestAge[0]</con:entry>
          <con:entry>fareCode</con:entry>
          <con:entry>selectedFareCode</con:entry>
          <con:entry>numberOfCabins</con:entry>
          <con:entry>includeDeckInfo</con:entry>
          <con:entry>accessibleReqd</con:entry>
          <con:entry>seniorReqd</con:entry>
          <con:entry>militaryReqd</con:entry>
          <con:entry>policeReqd</con:entry>
          <con:entry>fireFighterReqd</con:entry>
          <con:entry>stateCode</con:entry>
          <con:entry>loyaltyId</con:entry>
          <con:entry>couponCodes</con:entry>
          <con:entry>includeAllStaterooms</con:entry>
          <con:entry>includeUpsell</con:entry>
          <con:entry>includePromoContent</con:entry>
          <con:entry>includeCategory</con:entry>
          <con:entry>debugId</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b30addaa-2177-45d9-85a7-b9dc93b7fcdf">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="FetchCategoryCode" id="01167680-9a93-4cc6-aaf1-28054b0c798b">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*
def tc = testRunner.testCase.testSuite.testCases["LinkBooking_TestCase"];

def ts = testRunner.testCase.getTestStepByName("RetrieveStateroomCategories")
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

def categoryCode = res.stateroomCategoryTypes.e[1].categories.e[0].stateroomCategoryCode.text();
testRunner.testCase.setPropertyValue("CategoryCode",categoryCode)

def selectedFareCode = res.stateroomCategoryTypes.e[1].categories.e[0].selectedFareCode.text();
testRunner.testCase.setPropertyValue("FareCode",selectedFareCode)</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="RetrieveStateroomForCategory" id="c9e00325-5d18-41e3-9455-2a9fccd9c9a0">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroomsForCategory" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="RetrieveStateroomForCategory" id="c2271e12-b35c-4d4d-99ab-12aa471a0db9" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="AppKey" value="${#Project#AppKey}" xmlns="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>http://eslbservicestst01.rccl.com:13000</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst2/rest/v3/retrieveStateroomsForCategory?header.application=celebritycruises.com&header.brand=C&header.domainId=1&header.language=en_US&countryCode=USA&shipCode=AT&sailDate=2022-11-08&packageId=AT05W396&stateroomOccupancy.guestAge=24&stateroomOccupancy.fareCode=BESTRATE&stateroomOccupancy.seniorReqd=false&stateroomOccupancy.accessibleReqd=false&categoryCode=O1&debugId=]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroomsForCategory</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="f77dcaac-0017-49d8-919b-543b16a80b12" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="Simple Contains" id="0b906ba9-ee33-412d-ad9b-63148df655c7" name="Contains">
          <con:configuration>
            <token>Success</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:assertion type="Simple Contains" id="cb593238-44d9-472b-9cce-294b221f5674" name="Contains 1">
          <con:configuration>
            <token>"cabin"</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="04c34f4b-f766-4b33-a535-24779120222d" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:username xsi:nil="true"/>
          <con:password xsi:nil="true"/>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource#seniorReqd}"/>
          <con:entry key="debugId" value=""/>
          <con:entry key="categoryCode" value="${#TestCase#CategoryCode}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource#accessibleReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource#guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="stateroomOccupancy.fareCode" value="${DataSource#fareCode}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>countryCode</con:entry>
          <con:entry>agencyId</con:entry>
          <con:entry>bookingAccessToken</con:entry>
          <con:entry>shipCode</con:entry>
          <con:entry>sailDate</con:entry>
          <con:entry>packageId</con:entry>
          <con:entry>currencyCode</con:entry>
          <con:entry>stateroomOccupancy.guestAge</con:entry>
          <con:entry>stateroomOccupancy.fareCode</con:entry>
          <con:entry>stateroomOccupancy.seniorReqd</con:entry>
          <con:entry>stateroomOccupancy.accessibleReqd</con:entry>
          <con:entry>deckCode</con:entry>
          <con:entry>categoryCode</con:entry>
          <con:entry>debugId</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="FetchCabinNumber" id="98422efe-d2a7-4c4f-b6be-3d73a89b12e3">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*
def tc = testRunner.testCase.testSuite.testCases["LinkBooking_TestCase"];

def ts = testRunner.testCase.getTestStepByName("RetrieveStateroomForCategory")
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

def cabinNumber = res.cabin.e[0].cabinNumber.text();
testRunner.testCase.setPropertyValue("CabinNumber",cabinNumber)

def cabinNumber_linkBooking = res.cabin.e[1].cabinNumber.text();
testRunner.testCase.setPropertyValue("CabinNumber_LinkBooking",cabinNumber_linkBooking)</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="RetrieveStateroomOffers" id="32f643de-142a-40cc-a6e9-97633da5898a" disabled="true">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroomOffers" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="RetrieveStateroomOffers" id="85d1b8d4-339d-482c-bd43-0c1def066991" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request/>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroomOffers</con:originalUri>
        <con:assertion type="Simple Contains" id="c0218ff9-9600-480a-8fbe-663e32a690c1" name="Contains">
          <con:configuration>
            <token>Success</token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="accessibleReqd" value="${DataSource#Orchestration_accessibleReqd}"/>
          <con:entry key="fares[0]" value=""/>
          <con:entry key="header.application" value="${DataSource#Orchestration_application}"/>
          <con:entry key="fares[1]" value=""/>
          <con:entry key="policeReqd" value="${DataSource#Orchestration_policeReqd}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="militaryReqd" value="${DataSource#Orchestration_militaryReqd}"/>
          <con:entry key="header.brand" value="${DataSource#Orchestration_brand}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="seniorReqd" value="${DataSource#Orchestration_seniorReqd}"/>
          <con:entry key="guestAge" value="${DataSource#Orchestration_guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#Orchestration_countryCode}"/>
          <con:entry key="currency" value="${DataSource#Orchestration_currencyCode}"/>
          <con:entry key="fireFighterReqd" value="${DataSource#Orchestration_fireFighterReqd}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>header.application</con:entry>
          <con:entry>header.brand</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.uuid</con:entry>
          <con:entry>countryCode</con:entry>
          <con:entry>agencyId</con:entry>
          <con:entry>bookingAccessToken</con:entry>
          <con:entry>bookingId</con:entry>
          <con:entry>shipCode</con:entry>
          <con:entry>sailDate</con:entry>
          <con:entry>packageId</con:entry>
          <con:entry>currency</con:entry>
          <con:entry>guestAge</con:entry>
          <con:entry>accessibleReqd</con:entry>
          <con:entry>seniorReqd</con:entry>
          <con:entry>militaryReqd</con:entry>
          <con:entry>policeReqd</con:entry>
          <con:entry>fireFighterReqd</con:entry>
          <con:entry>fares[0]</con:entry>
          <con:entry>fares[1]</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Groovy Script" id="05751990-d088-41ba-856d-8107167bfa35" disabled="true">
    <con:settings/>
    <con:config>
      <script><![CDATA[import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*

def alert = com.eviware.soapui.support.UISupport;
def tc= testRunner.testCase.testSuite.testCases["RetrieveStateroom_TestCase"];
       
def stepResult;
def req_status;
def TCpointer = context.expand('${DataSource#TestCaseName}') ;
def ExecutionFlag = context.expand('${DataSource#ExecutionFlag}') ;
tc.setPropertyValue("Request","");
tc.setPropertyValue("Response","");

def orc1 = testRunner.testCase.getTestStepByName("CruiseSearch");
def orc1_assertion_data = orc1.getAssertionStatus();

def orc2 = testRunner.testCase.getTestStepByName("RetrieveStateroomCategories");
def orc2_assertion_data = orc2.getAssertionStatus();

def orc3 = testRunner.testCase.getTestStepByName("RetrieveStateroomForCategory");
def orc3_assertion_data = orc3.getAssertionStatus();

def orc4 = testRunner.testCase.getTestStepByName("RetrieveStateroomOffers");
def orc4_assertion_data = orc4.getAssertionStatus();


List<String> orc_assertion_data = Arrays.asList(orc1_assertion_data,orc2_assertion_data,orc3_assertion_data,orc4_assertion_data);

if(!orc_assertion_data.toString().contains("FAILED"))
{

//For FunctionalTest1
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC1")
	{
		stepResult = testRunner.runTestStepByName( "FunctionalTest1");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest1");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation4"," ");
			tc.setPropertyValue("Validation5"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Description4"," ");
			tc.setPropertyValue("Description5"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Success is expected in Response when all valid inputs are given to the request**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Success in status is shown as expected when all the valid inputs are given to the request**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**The categoryCode should be the same as in StateroomCategories response**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**The categoryCode is the same as in StateroomCategories response**");
				     tc.setPropertyValue("Description3"," ");
				}

				//For JsonPath Match 1
				if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation4",Val_Prop_Message);
				          tc.setPropertyValue("Description4","**The stateroomSubType should be the same as in StateroomCategories response**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation4","**The stateroomSubType is the same as in StateroomCategories response**");
				     tc.setPropertyValue("Description4"," ");
				}

				//For JsonPath Match 2
				if(assertion.assertable.getAssertionByName("JsonPath Match 2").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation5",Val_Prop_Message);
				          tc.setPropertyValue("Description5","**The offer code should be the same as in RetrieveStateroomOffers response**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match 2").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation5","**The offer code is the same as in RetrieveStateroomOffers response**");
				     tc.setPropertyValue("Description5"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString()+"   " + tc.getPropertyValue("Validation4").toString()+"   " + tc.getPropertyValue("Validation5").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString()+"   " + tc.getPropertyValue("Description4").toString()+"   " + tc.getPropertyValue("Description5").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest1_International
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC2")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomForCategory");
		testRunner.runTestStepByName("FetchCabinNumber");
		testRunner.runTestStepByName("RetrieveStateroomOffers");
		stepResult = testRunner.runTestStepByName("FunctionalTest1_International");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest1_International");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation4"," ");
			tc.setPropertyValue("Validation5"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Description4"," ");
			tc.setPropertyValue("Description5"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Success is expected in Response when all valid inputs are given to the request**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Success in status is shown as expected when all the valid inputs are given to the request**");
				     tc.setPropertyValue("Description2"," ");
				}
				
				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**The categoryCode should be the same as in StateroomCategories response**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**The categoryCode is the same as in StateroomCategories response**");
				     tc.setPropertyValue("Description3"," ");
				}

				//For JsonPath Match 1
				if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation4",Val_Prop_Message);
				          tc.setPropertyValue("Description4","**The stateroomSubType should be the same as in StateroomCategories response**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match 1").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation4","**The stateroomSubType is the same as in StateroomCategories response**");
				     tc.setPropertyValue("Description4"," ");
				}

				//For JsonPath Match 2
				if(assertion.assertable.getAssertionByName("JsonPath Match 2").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation5",Val_Prop_Message);
				          tc.setPropertyValue("Description5","**The offer code should be the same as in RetrieveStateroomOffers response**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match 2").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation5","**The offer code is the same as in RetrieveStateroomOffers response**");
				     tc.setPropertyValue("Description5"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString()+"   " + tc.getPropertyValue("Validation4").toString()+"   " + tc.getPropertyValue("Validation5").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString()+"   " + tc.getPropertyValue("Description4").toString()+"   " + tc.getPropertyValue("Description5").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest2
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC3")
	{
		testRunner.runTestStepByName("CruiseSearch");
		testRunner.runTestStepByName("FetchValues");
		testRunner.runTestStepByName("RetrieveStateroomCategories");
		testRunner.runTestStepByName("FetchCategoryCode");
		testRunner.runTestStepByName("RetrieveStateroomForCategory");
		testRunner.runTestStepByName("FetchCabinNumber");
		testRunner.runTestStepByName("RetrieveStateroomOffers");
		stepResult = testRunner.runTestStepByName("FunctionalTest2");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest2");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Success should be displayed when a stateroom is unlocked**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Success is displayed when a stateroom is unlocked**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Should display the connecting staterooms when connectedCabinsReqd is true**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Displays the connecting staterooms when connectedCabinsReqd is true**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest3
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC4")
	{
		stepResult = testRunner.runTestStepByName("FunctionalTest3");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest3");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Success should be displayed when the same fareCode is displayed in the response as in the TestCase properties**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Success is displayed when the same fareCode is displayed in the response as in the TestCase properties**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Response should have the fareCode same as in stateroomCategories response**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Response has the fareCode same as in stateroomCategories response**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest4
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC5")
	{
		stepResult = testRunner.runTestStepByName("FunctionalTest4");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest4");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected when connectedCabinReqd is true and data for connecting cabins is not given**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when connectedCabinReqd is true and data for connecting cabins is not given**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed when connectedCabinReqd is true and data for connecting cabins is not given**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed when connectedCabinReqd is true and data for connecting cabins is not given**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest5
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC6")
	{
		stepResult = testRunner.runTestStepByName("FunctionalTest5");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest5");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected when guestAge is less than 21 yrs**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when guestAge is less than 21 yrs**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed when guestAge is less than 21 yrs**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed when guestAge is less than 21 yrs**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest6
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC7")
	{
		stepResult = testRunner.runTestStepByName("FunctionalTest6");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest6");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected when guestAge is less than 55 yrs and seniorReqd is true**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when guestAge is less than 55 yrs and seniorReqd is true**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed when guestAge is less than 55 yrs and seniorReqd is true**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed when guestAge is less than 55 yrs and seniorReqd is true**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest7
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC8")
	{
		stepResult = testRunner.runTestStepByName("FunctionalTest7");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest7");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected when both the choice fields are given**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when both the choice fields are given**");
				     tc.setPropertyValue("Description2"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For FunctionalTest8
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC9")
	{
		stepResult = testRunner.runTestStepByName("FunctionalTest8");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("FunctionalTest8");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure is expected when both of the choice fields are not given**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when both of the choice fields are not given**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed when both of the choice fields are not given**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed when both of the choice fields are not given**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest1
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC10")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest1");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest1");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no brand**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no brand**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest2
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC11")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest2");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest2");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid brand**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid brand**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid brand**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest3
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC12")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest3");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest3");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no countryCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no countryCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest4
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC13")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest4");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest4");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid countryCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid countryCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid countryCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest5
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC14")
	{
		stepResult = testRunner.runTestStepByName("MandatoryFieldsTest5");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest5");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no shipCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no shipCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest6
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC15")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest6");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest6");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed invalid shipCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid shipCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid shipCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest7
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC16" || TCpointer == "RetrieveStateroom_TC17")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest7");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest7");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid sailDate**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no or invalid sailDate**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no or invalid sailDate**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no or invalid sailDate**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest8
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC18")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest8");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest8");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no packageCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no packageCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no packageCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no packageCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest9
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC19")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest9");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest9");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid packageCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid packageCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid packageCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid packageCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest10
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC20")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest10");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest10");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no cabinNumber**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no cabinNumber**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no cabinNumber**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no cabinNumber**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest11
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC21")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest11");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest11");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid cabinNumber**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid cabinNumber**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid cabinNumber**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid cabinNumber**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest12
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC22")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest12");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest12");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed when guestAge is null**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed when guestAge is null**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed when guestAge is null**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed when guestAge is null**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest13
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC23" || TCpointer == "RetrieveStateroom_TC24")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest13");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest13");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no or invalid fareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no or invalid fareCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For XPath Match
				if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no or invalid fareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("XPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no or invalid fareCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest14
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC25")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest14");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest14");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for no selectedFareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for no selectedFareCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for no selectedFareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for no selectedFareCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

//For MandatoryFieldsTest15
if(ExecutionFlag == "Yes")
{
	if(TCpointer == "RetrieveStateroom_TC26")
	{
		stepResult = testRunner.runTestStepByName( "MandatoryFieldsTest15");
		req_status = stepResult.getStatus().toString();
		if(req_status == "OK")
		{
			tc.setPropertyValue("Status","PASS");
		}
		else if(req_status == "FAILED")
		{
	     	tc.setPropertyValue("Status","FAIL");
		}
	     else if(req_status == "UNKNOWN")
	     {
	     	tc.setPropertyValue("Status","UNKNOWN: Add some assertions to the response");
		}
	
		ts_handler = testRunner.testCase.getTestStepByName("MandatoryFieldsTest15");
		List <TestAssertion> TA_List=ts_handler.getAssertionList();
		TA_List.each{i ->
			tc.setPropertyValue("Validation1"," ");
			tc.setPropertyValue("Validation2"," ");
			tc.setPropertyValue("Validation3"," ");
			tc.setPropertyValue("Validation"," ");
			tc.setPropertyValue("Description"," ");
			tc.setPropertyValue("Description1"," ");
			tc.setPropertyValue("Description2"," ");
			tc.setPropertyValue("Description3"," ");
			tc.setPropertyValue("Request"," ");
			tc.setPropertyValue("Response"," ");
			tc.setPropertyValue("Request1"," ");
			tc.setPropertyValue("Response1"," ");
	
			for( assertion in ts_handler.assertionList )
			{
			
				//For Invalid HTTP Status Codes
				if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "FAILED")
				{
			     	for( e in assertion.errors )
			     	{
			     		def Val_Prop_Message=e.message.toString();
			          	tc.setPropertyValue("Validation1",Val_Prop_Message);
			          	tc.setPropertyValue("Description1","**Invalid HTTP Status Codes Error**");
			          	def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
					}
				}
				else  if(assertion.assertable.getAssertionByName("Invalid HTTP Status Codes").assertionStatus.toString() == "VALID" )
				{
					tc.setPropertyValue("Validation1","**Response schema is validated**");
				     tc.setPropertyValue("Description1"," ");
				}
			
				//For contains
				if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation2",Val_Prop_Message);
				          tc.setPropertyValue("Description2","**Failure should be displayed for invalid selectedFareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("Contains").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation2","**Failure is displayed for invalid selectedFareCode**");
				     tc.setPropertyValue("Description2"," ");
				}

				//For JsonPath Match
				if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "FAILED")
				{
				     for( e in assertion.errors )
				     {
				     	def Val_Prop_Message=e.message.toString(); 
				          //log.info "Message" + Val_Prop_Message;
				          tc.setPropertyValue("Validation3",Val_Prop_Message);
				          tc.setPropertyValue("Description3","**Error description should be displayed for invalid selectedFareCode**");
				          def request_holder = ts_handler.getProperty("Request").getValue();
						def response_holder = ts_handler.getProperty("Response").getValue();
						tc.setPropertyValue("Request1",request_holder);
						tc.setPropertyValue("Response1",response_holder);
				  	}
				}
				else  if(assertion.assertable.getAssertionByName("JsonPath Match").assertionStatus.toString() == "VALID" )
				{
				     tc.setPropertyValue("Validation3","**Error description is displayed for invalid selectedFareCode**");
				     tc.setPropertyValue("Description3"," ");
				}
			}
		}
	
		tc.setPropertyValue("Validation",tc.getPropertyValue("Validation1").toString()+"   " + tc.getPropertyValue("Validation2").toString()+"   " + tc.getPropertyValue("Validation3").toString());
		tc.setPropertyValue("Description",tc.getPropertyValue("Description1").toString()+"   " + tc.getPropertyValue("Description2").toString()+"   " + tc.getPropertyValue("Description3").toString());
		tc.setPropertyValue("Request",tc.getPropertyValue("Request1").toString());
		tc.setPropertyValue("Response",tc.getPropertyValue("Response1").toString());
	}
}

if(ExecutionFlag == "No")
{
	tc.setPropertyValue("Status","NA");
	tc.setPropertyValue("Validation","NA")
	tc.setPropertyValue("Description","NA")
}
}

if(orc_assertion_data.toString().contains("FAILED"))
{
	tc.setPropertyValue("Description","Error in the services used for orchestration")
	tc.setPropertyValue("Validation","")
	tc.setPropertyValue("Status","Fail")
}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="datasource" name="DataSource1" id="e7e79d69-e4f6-4c5c-b3bc-dafe98315e7a">
    <con:settings/>
    <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dataSource type="Excel">
        <con:configuration><file>Booking_REST_Input.xls</file><worksheet>RetrieveStateroom</worksheet><cell>A2</cell><ignoreEmpty>false</ignoreEmpty><evaluateFormulas>false</evaluateFormulas></con:configuration>
      </con:dataSource>
      <con:shared>false</con:shared>
      <con:restartShared>false</con:restartShared>
      <con:property>S.No</con:property>
      <con:property>ServiceName</con:property>
      <con:property>Operation Name</con:property>
      <con:property>ExecutionFlag</con:property>
      <con:property>TestCaseName</con:property>
      <con:property>TestCaseDescription</con:property>
      <con:property>application</con:property>
      <con:property>brand</con:property>
      <con:property>domainId</con:property>
      <con:property>language</con:property>
      <con:property>uuid</con:property>
      <con:property>countryCode</con:property>
      <con:property>agencyId</con:property>
      <con:property>bookingId</con:property>
      <con:property>bookingAccessToken</con:property>
      <con:property>shipCode</con:property>
      <con:property>sailDate</con:property>
      <con:property>packageId</con:property>
      <con:property>cabinNumber</con:property>
      <con:property>currency</con:property>
      <con:property>guestAge</con:property>
      <con:property>accessibleReqd</con:property>
      <con:property>seniorReqd</con:property>
      <con:property>militaryReqd</con:property>
      <con:property>policeReqd</con:property>
      <con:property>fireFighterReqd</con:property>
      <con:property>stateCode</con:property>
      <con:property>loyaltyId</con:property>
      <con:property>couponCodes</con:property>
      <con:property>fareCode</con:property>
      <con:property>selectedFareCode</con:property>
      <con:property>includeDeckInfo</con:property>
      <con:property>noShowOfUpgrades</con:property>
      <con:property>connectedCabinsReqd</con:property>
      <con:property>guestAge_CO</con:property>
      <con:property>accessibleReqd_CO</con:property>
      <con:property>seniorReqd_CO</con:property>
      <con:property>militaryReqd_CO</con:property>
      <con:property>policeReqd_CO</con:property>
      <con:property>fireFighterReqd_CO</con:property>
      <con:property>stateCode_CO</con:property>
      <con:property>loyaltyId_CO</con:property>
      <con:property>couponCodes_CO</con:property>
      <con:property>Orchestration_application</con:property>
      <con:property>Orchestration_brand</con:property>
      <con:property>Orchestration_office</con:property>
      <con:property>Orchestration_channel</con:property>
      <con:property>Orchestration_countryCode</con:property>
      <con:property>Orchestration_bookingType</con:property>
      <con:property>Orchestration_cruiseType</con:property>
      <con:property>Orchestration_accessibleCabins</con:property>
      <con:property>Orchestration_results</con:property>
      <con:property>Orchestration_pagination</con:property>
      <con:property>Orchestration_Prices</con:property>
      <con:property>Orchestration_guestAge</con:property>
      <con:property>Orchestration_includeDeckInfo</con:property>
      <con:property>Orchestration_seniorReqd</con:property>
      <con:property>Orchestration_militaryReqd</con:property>
      <con:property>Orchestration_policeReqd</con:property>
      <con:property>Orchestration_fireFighterReqd</con:property>
      <con:property>Orchestration_includeAllStaterooms</con:property>
      <con:property>Orchestration_includeUpsell</con:property>
      <con:property>Orchestration_includePromoContent</con:property>
      <con:property>Orchestration_includeCategory</con:property>
      <con:property>Orchestration_accessibleReqd</con:property>
      <con:property>Orchestration_currencyCode</con:property>
      <con:property>Orchestration_fareCode</con:property>
      <con:startRow>2</con:startRow>
      <con:endRow>2</con:endRow>
      <con:recordsPerIteration>1</con:recordsPerIteration>
      <con:completeLastOperation>true</con:completeLastOperation>
      <con:trimValues>false</con:trimValues>
      <con:entitizeValues>false</con:entitizeValues>
      <con:restartOnRun>true</con:restartOnRun>
      <con:expandProperties>false</con:expandProperties>
      <con:stopDatasourceExhausted>false</con:stopDatasourceExhausted>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest1-invalid brand" id="285a57b2-5b9e-4b72-b487-cb095f570a80">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroom" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest1-invalid brand" id="b173cb06-2d3a-427c-8210-084cee76d752" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst2/rest/v3/retrieveStateroom?header.application=celebritycruises.com&header.brand=CC&header.domainId=1&header.language=en_US&countryCode=USA&shipCode=AT&sailDate=2022-11-08&packageId=AT05W396&cabinNumber=3160&stateroomOccupancy.guestAge=24&stateroomOccupancy.accessibleReqd=false&stateroomOccupancy.seniorReqd=false&stateroomOccupancy.militaryReqd=false&stateroomOccupancy.policeReqd=false&stateroomOccupancy.fireFighterReqd=false&fareCode=BESTRATE&includeDeckInfo=false&noShowOfUpgrades=false&connectedCabinsReqd=false]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroom</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="c2ffc8ea-757e-4eee-b7ea-6f1ba229b64f" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="16e9dc11-e229-42f4-bf9b-49389fd9566a" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="3f6c0368-dc99-430b-8ed7-17d7eb3cceff" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="ab3ea5dd-761f-4cec-8ee8-32129b42f886" name="Match content of [code]">
          <con:configuration>
            <path>$['header']['error'][0]['code']</path>
            <content>CATL-005</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="1347f3c2-09b8-461e-b5d9-e4eee563c449" name="Match content of [description]">
          <con:configuration>
            <path>$['header']['error'][0]['description']</path>
            <content>Invalid brand.</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="noShowOfUpgrades" value="${DataSource#noShowOfUpgrades}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="header.application" value="${DataSource1#application}"/>
          <con:entry key="includeDeckInfo" value="${DataSource#includeDeckInfo}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource#seniorReqd}"/>
          <con:entry key="cabinNumber" value="${#TestCase#CabinNumber}"/>
          <con:entry key="header.brand" value="CC"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource#accessibleReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="connectedCabinsReqd" value="${DataSource#connectedCabinsReqd}"/>
          <con:entry key="stateroomOccupancy.fireFighterReqd" value="${DataSource#fireFighterReqd}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource#guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="fareCode" value="${DataSource#fareCode}"/>
          <con:entry key="stateroomOccupancy.policeReqd" value="${DataSource#policeReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="stateroomOccupancy.militaryReqd" value="${DataSource#militaryReqd}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest2-invalid countryCode" id="d927ca14-87b8-4f14-9161-9dd5b6c8657d">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroom" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest2-invalid countryCode" id="b173cb06-2d3a-427c-8210-084cee76d752" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst2/rest/v3/retrieveStateroom?header.application=celebritycruises.com&header.brand=C&header.domainId=1&header.language=en_US&countryCode=AUS&shipCode=AT&sailDate=2022-11-08&packageId=AT05W396&cabinNumber=3160&stateroomOccupancy.guestAge=24&stateroomOccupancy.accessibleReqd=false&stateroomOccupancy.seniorReqd=false&stateroomOccupancy.militaryReqd=false&stateroomOccupancy.policeReqd=false&stateroomOccupancy.fireFighterReqd=false&fareCode=BESTRATE&includeDeckInfo=false&noShowOfUpgrades=false&connectedCabinsReqd=false]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroom</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="c2ffc8ea-757e-4eee-b7ea-6f1ba229b64f" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="9e00d5ce-c14a-4088-9142-785d55f20e9c" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="noShowOfUpgrades" value="${DataSource#noShowOfUpgrades}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="includeDeckInfo" value="${DataSource#includeDeckInfo}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource#seniorReqd}"/>
          <con:entry key="cabinNumber" value="${#TestCase#CabinNumber}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource#accessibleReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="connectedCabinsReqd" value="${DataSource#connectedCabinsReqd}"/>
          <con:entry key="stateroomOccupancy.fireFighterReqd" value="${DataSource#fireFighterReqd}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource#guestAge}"/>
          <con:entry key="countryCode" value="${DataSource1#countryCode}"/>
          <con:entry key="fareCode" value="${DataSource#fareCode}"/>
          <con:entry key="stateroomOccupancy.policeReqd" value="${DataSource#policeReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="stateroomOccupancy.militaryReqd" value="${DataSource#militaryReqd}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest3-blank countryCode, agencyId" id="63261ad7-7f1e-4f67-b277-10df51c6d913">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroom" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest3-blank countryCode, agencyId" id="b173cb06-2d3a-427c-8210-084cee76d752" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst2/rest/v3/retrieveStateroom?header.application=celebritycruises.com&header.brand=C&header.domainId=1&header.language=en_US&shipCode=AT&sailDate=2022-11-08&packageId=AT05W396&cabinNumber=3160&stateroomOccupancy.guestAge=24&stateroomOccupancy.accessibleReqd=false&stateroomOccupancy.seniorReqd=false&stateroomOccupancy.militaryReqd=false&stateroomOccupancy.policeReqd=false&stateroomOccupancy.fireFighterReqd=false&includeDeckInfo=false&noShowOfUpgrades=false&connectedCabinsReqd=false&connectingOccupancy.guestAge=45]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroom</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="c2ffc8ea-757e-4eee-b7ea-6f1ba229b64f" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="a3bc61d7-3ca8-4791-b57a-f2a213eae0ec" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a09042bc-9a71-4169-874d-872512998484" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="e2d0c553-f8d0-4a79-a9c5-52f1cb4a8f0f" name="Match content of [description]">
          <con:configuration>
            <path>$['header']['error'][0]['description']</path>
            <content>One of these is required. [countryCode, agencyId]</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="connectingOccupancy.seniorReqd" value="${DataSource#seniorReqd_CO}"/>
          <con:entry key="includeDeckInfo" value="${DataSource#includeDeckInfo}"/>
          <con:entry key="connectingOccupancy.guestAge" value="${DataSource#guestAge_CO}"/>
          <con:entry key="connectingOccupancy.fireFighterReqd" value="${DataSource#fireFighterReqd_CO}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="connectedCabinsReqd" value="${DataSource#connectedCabinsReqd}"/>
          <con:entry key="connectingOccupancy.policeReqd" value="${DataSource#policeReqd_CO}"/>
          <con:entry key="connectingOccupancy.accessibleReqd" value="${DataSource#accessibleReqd_CO}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="stateroomOccupancy.militaryReqd" value="${DataSource#militaryReqd}"/>
          <con:entry key="selectedFareCode" value="${FTest1-invalid brand#Response#$['category']['selectedFareCode']}"/>
          <con:entry key="noShowOfUpgrades" value="${DataSource#noShowOfUpgrades}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="connectingOccupancy.militaryReqd" value="${DataSource#militaryReqd_CO}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource#seniorReqd}"/>
          <con:entry key="cabinNumber" value="${#TestCase#CabinNumber}"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource#accessibleReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="stateroomOccupancy.fireFighterReqd" value="${DataSource#fireFighterReqd}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource#guestAge}"/>
          <con:entry key="stateroomOccupancy.policeReqd" value="${DataSource#policeReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest4-blank shipCode, packageCode, cabinNumber" id="2cd2ee7c-ee22-4b9f-8296-f4be73caa19d">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroom" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest4-blank shipCode, packageCode, cabinNumber" id="b173cb06-2d3a-427c-8210-084cee76d752" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst2/rest/v3/retrieveStateroom?header.application=celebritycruises.com&header.brand=C&header.domainId=1&header.language=en_US&countryCode=USA&agencyId=108869&sailDate=2022-11-08&currency=USD&stateroomOccupancy.guestAge=24&stateroomOccupancy.accessibleReqd=false&stateroomOccupancy.seniorReqd=false&stateroomOccupancy.militaryReqd=false&stateroomOccupancy.policeReqd=false&stateroomOccupancy.fireFighterReqd=false&selectedFareCode=I1773897&includeDeckInfo=false&noShowOfUpgrades=false&connectedCabinsReqd=false]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroom</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="c2ffc8ea-757e-4eee-b7ea-6f1ba229b64f" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="b9480286-c093-467f-9fb6-0d82cf92f1ea" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="20c4865b-036e-4805-8706-febdad4fa499" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="noShowOfUpgrades" value="${DataSource#noShowOfUpgrades}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="includeDeckInfo" value="${DataSource#includeDeckInfo}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource#seniorReqd}"/>
          <con:entry key="agencyId" value="${DataSource#agencyId}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource#accessibleReqd}"/>
          <con:entry key="connectedCabinsReqd" value="${DataSource#connectedCabinsReqd}"/>
          <con:entry key="stateroomOccupancy.fireFighterReqd" value="${DataSource#fireFighterReqd}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource#guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="stateroomOccupancy.policeReqd" value="${DataSource#policeReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="currency" value="${DataSource#currency}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="stateroomOccupancy.militaryReqd" value="${DataSource#militaryReqd}"/>
          <con:entry key="selectedFareCode" value="${#TestCase#FareCode}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest5-blank sailDate" id="cbfc08ff-b174-449d-a52f-7f70454eb819">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroom" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest5-blank sailDate" id="b173cb06-2d3a-427c-8210-084cee76d752" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst2/rest/v3/retrieveStateroom?header.application=celebritycruises.com&header.brand=C&header.domainId=1&header.language=en_US&countryCode=USA&shipCode=AT&packageId=AT05W396&cabinNumber=3160&currency=USD&stateroomOccupancy.guestAge=24&stateroomOccupancy.accessibleReqd=false&stateroomOccupancy.seniorReqd=false&stateroomOccupancy.militaryReqd=false&stateroomOccupancy.policeReqd=false&stateroomOccupancy.fireFighterReqd=false&selectedFareCode=I1773897&includeDeckInfo=false&noShowOfUpgrades=false&connectedCabinsReqd=false]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroom</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="c2ffc8ea-757e-4eee-b7ea-6f1ba229b64f" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="b9480286-c093-467f-9fb6-0d82cf92f1ea" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="89eec021-4981-4898-b97d-2b3f235e6f51" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="a7833fad-74b0-4f4b-8b66-4f23181a4c88" name="Match content of [code]">
          <con:configuration>
            <path>$['header']['error'][0]['code']</path>
            <content>InvalidDate</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="noShowOfUpgrades" value="${DataSource#noShowOfUpgrades}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="includeDeckInfo" value="${DataSource#includeDeckInfo}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource#seniorReqd}"/>
          <con:entry key="cabinNumber" value="${#TestCase#CabinNumber}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource#accessibleReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="connectedCabinsReqd" value="${DataSource#connectedCabinsReqd}"/>
          <con:entry key="stateroomOccupancy.fireFighterReqd" value="${DataSource#fireFighterReqd}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource#guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="stateroomOccupancy.policeReqd" value="${DataSource#policeReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="currency" value="${DataSource#currency}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="stateroomOccupancy.militaryReqd" value="${DataSource#militaryReqd}"/>
          <con:entry key="selectedFareCode" value="${#TestCase#FareCode}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest6-invalid sailDate" id="469c5aee-392e-4828-a879-41bcb836b9e6">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroom" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest6-invalid sailDate" id="b173cb06-2d3a-427c-8210-084cee76d752" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst2/rest/v3/retrieveStateroom?header.application=celebritycruises.com&header.brand=C&header.domainId=1&header.language=en_US&countryCode=USA&shipCode=AT&sailDate=2019-05-05&packageId=AT05W396&cabinNumber=3160&currency=USD&stateroomOccupancy.guestAge=24&stateroomOccupancy.accessibleReqd=false&stateroomOccupancy.seniorReqd=false&stateroomOccupancy.militaryReqd=false&stateroomOccupancy.policeReqd=false&stateroomOccupancy.fireFighterReqd=false&selectedFareCode=I1773897&includeDeckInfo=false&noShowOfUpgrades=false&connectedCabinsReqd=false]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroom</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="c2ffc8ea-757e-4eee-b7ea-6f1ba229b64f" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="b9480286-c093-467f-9fb6-0d82cf92f1ea" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="JsonPath Match" id="dfe344a4-be99-4298-b72c-5bbb921eae60" name="Match content of [status]">
          <con:configuration>
            <path>$['header']['status']</path>
            <content>Failure</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="noShowOfUpgrades" value="${DataSource#noShowOfUpgrades}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="includeDeckInfo" value="${DataSource#includeDeckInfo}"/>
          <con:entry key="packageId" value="${#TestCase#PackageCode}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource#seniorReqd}"/>
          <con:entry key="cabinNumber" value="${#TestCase#CabinNumber}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource#accessibleReqd}"/>
          <con:entry key="shipCode" value="${#TestCase#ShipCode}"/>
          <con:entry key="connectedCabinsReqd" value="${DataSource#connectedCabinsReqd}"/>
          <con:entry key="stateroomOccupancy.fireFighterReqd" value="${DataSource#fireFighterReqd}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource#guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="stateroomOccupancy.policeReqd" value="${DataSource#policeReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="currency" value="${DataSource#currency}"/>
          <con:entry key="sailDate" value="${DataSource1#sailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="stateroomOccupancy.militaryReqd" value="${DataSource#militaryReqd}"/>
          <con:entry key="selectedFareCode" value="${#TestCase#FareCode}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="FTest7-invalid shipCode, packageCode" id="a7c258dc-a8ee-4adf-b647-fba2857a444c">
    <con:settings/>
    <con:config service="Booking" resourcePath="/retrieveStateroom" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="FTest7-invalid shipCode, packageCode" id="b173cb06-2d3a-427c-8210-084cee76d752" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:endpoint>${#Global#Booking_REST_Endpoint}</con:endpoint>
        <con:request><![CDATA[https://tst1-int.api.rccl.com/esl/booking/tst2/rest/v3/retrieveStateroom?header.application=celebritycruises.com&header.brand=C&header.domainId=1&header.language=en_US&countryCode=USA&agencyId=108869&sailDate=2022-11-08&cabinNumber=3160&currency=USD&stateroomOccupancy.guestAge=24&stateroomOccupancy.accessibleReqd=false&stateroomOccupancy.seniorReqd=false&stateroomOccupancy.militaryReqd=false&stateroomOccupancy.policeReqd=false&stateroomOccupancy.fireFighterReqd=false&selectedFareCode=I1773897&includeDeckInfo=false&noShowOfUpgrades=false&connectedCabinsReqd=false]]></con:request>
        <con:originalUri>http://eslbservicestst01.rccl.com/esl/booking/rest/v3/retrieveStateroom</con:originalUri>
        <con:assertion type="Invalid HTTP Status Codes" id="c2ffc8ea-757e-4eee-b7ea-6f1ba229b64f" name="Invalid HTTP Status Codes">
          <con:configuration>
            <codes>500</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="b9480286-c093-467f-9fb6-0d82cf92f1ea" name="Script Assertion">
          <con:configuration>
            <scriptText>import java.io.*;
import java.util.*;
import com.eviware.soapui.impl.support.http.HttpRequestTestStep

def rawRequest = new String(messageExchange.getRawRequestData(), "UTF-8")
def rawrequest1 = rawRequest.indexOf("GET")+4;
def rawrequest2 = rawRequest.indexOf("HTTP")
def url = rawRequest.substring(rawrequest1,rawrequest2)

messageExchange.modelItem.testStep.setPropertyValue("Request", url)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:parameters>
          <con:entry key="noShowOfUpgrades" value="${DataSource#noShowOfUpgrades}"/>
          <con:entry key="header.language" value="${DataSource#language}"/>
          <con:entry key="header.application" value="${DataSource#application}"/>
          <con:entry key="includeDeckInfo" value="${DataSource#includeDeckInfo}"/>
          <con:entry key="packageId" value="${#DataSource1#PackageCode}"/>
          <con:entry key="stateroomOccupancy.seniorReqd" value="${DataSource#seniorReqd}"/>
          <con:entry key="agencyId" value="${DataSource#agencyId}"/>
          <con:entry key="cabinNumber" value="${#TestCase#CabinNumber}"/>
          <con:entry key="header.brand" value="${DataSource#brand}"/>
          <con:entry key="stateroomOccupancy.accessibleReqd" value="${DataSource#accessibleReqd}"/>
          <con:entry key="shipCode" value="${#DataSource1#ShipCode}"/>
          <con:entry key="connectedCabinsReqd" value="${DataSource#connectedCabinsReqd}"/>
          <con:entry key="stateroomOccupancy.fireFighterReqd" value="${DataSource#fireFighterReqd}"/>
          <con:entry key="stateroomOccupancy.guestAge" value="${DataSource#guestAge}"/>
          <con:entry key="countryCode" value="${DataSource#countryCode}"/>
          <con:entry key="stateroomOccupancy.policeReqd" value="${DataSource#policeReqd}"/>
          <con:entry key="header.domainId" value="${DataSource#domainId}"/>
          <con:entry key="currency" value="${DataSource#currency}"/>
          <con:entry key="sailDate" value="${#TestCase#SailDate}"/>
          <con:entry key="header.uuid" value="${DataSource#uuid}"/>
          <con:entry key="stateroomOccupancy.militaryReqd" value="${DataSource#militaryReqd}"/>
          <con:entry key="selectedFareCode" value="${#TestCase#FareCode}"/>
        </con:parameters>
        <con:environmentSpec>
          <con:entry environmentId="7d1e8c91-121f-4b55-96d1-8ca75c1cd945">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e320b7c4-301b-41bd-8c4d-4804f4e6f1ed">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="e9641255-6aaf-4b0d-b953-99b56bdf930b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="235f0c88-661e-471f-af64-6b02ede3e408">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="aefc0c06-2768-4736-a8d8-fcad7da98c16">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="706edc95-d046-4617-ae79-da8bc2c4ae4b">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="8f3a309f-d6f4-489c-9861-4611d598e9b4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="07590858-b342-4c54-8198-bedf1bc0ac61">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="40bf441a-bcdb-4db5-b3e7-470754e41840">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6420117f-650f-4baf-92a0-850ffdd2aa49">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7a10e7fd-d882-4f61-b73b-6f4dcda11154">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4e89681c-9601-4fb8-a9ef-234c3fd76897">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f8dfa3ed-98ae-4c72-819e-1f129985913f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="cfd35c17-9793-420e-9f15-61622ba978ea">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9922ee0f-40db-4a49-9447-17f361e3096c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="adb2fdf9-b64b-4691-95d1-df289b06431d">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0833c981-c533-4700-abe7-81135fb5a38a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="7f6a785a-2702-40d0-9d34-84682b9da9d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="16f53452-9022-476e-9f4b-48f5bffe559a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b81067df-dd43-4f98-805e-853175fd61e9">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="a75bec4f-654f-4b06-9c6e-7424ad504573">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="f3ea9050-4e80-4d71-bbed-e23be33c100c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1328077e-edb5-4f23-99ac-ba2884c570c2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="9395442b-b075-4c90-9dc7-175d79a7b708">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1a635486-274f-4491-b2dd-13fea67b7bdc">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="3c6154ae-6919-4433-b530-0006545db4d2">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="f6d9482e-3953-4c54-a617-6a743f6ca440">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="0f63911f-118f-4814-9ee0-13a012cbd1ba">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="78366991-1005-4019-b46c-c36122958cb5">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6fff4ff9-f0d4-4d0d-89e1-a5f205ec4546">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="d9c61de5-a3a7-4183-8bd0-92bf86872f5a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="1b22dd5c-2e3d-4a03-a9b6-6798d35431d3">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6f3087d8-30e1-40b5-a7a0-c78078035746">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="05d1995b-507d-4e9b-a0ae-b4b3914430c6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="c664df8a-1bc9-4fd0-b9df-f335d0d1d097">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="6487e236-41f2-4f62-890c-d58853f938d8">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b7e2c48e-a234-4c1b-b92c-fa60171fbaa6">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="755bdcf9-70a8-4132-844d-e5cd8d24e80c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="47074864-6f72-4d97-bae4-21c8ed49aa75">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="b90fdab2-9475-4f32-8f02-297fa386bc5c">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="30e190d4-5cca-4b41-a9d3-1723c6ff34d4">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="361d8992-6d1c-42db-abc6-a3db88088a91">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4ffc1287-e3e9-4aba-aa44-a81cbddd261a">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>PackageCode</con:name>
      <con:value>AT05W396</con:value>
    </con:property>
    <con:property>
      <con:name>ShipCode</con:name>
      <con:value>AT</con:value>
    </con:property>
    <con:property>
      <con:name>SailDate</con:name>
      <con:value>2022-11-08</con:value>
    </con:property>
    <con:property>
      <con:name>CategoryCode</con:name>
      <con:value>O1</con:value>
    </con:property>
    <con:property>
      <con:name>FareCode</con:name>
      <con:value>I1773897</con:value>
    </con:property>
    <con:property>
      <con:name>CabinNumber</con:name>
      <con:value>3160</con:value>
    </con:property>
    <con:property>
      <con:name>CabinNumber_LinkBooking</con:name>
      <con:value>3164</con:value>
    </con:property>
    <con:property>
      <con:name>Request</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Response</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Status</con:name>
      <con:value>PASS</con:value>
    </con:property>
    <con:property>
      <con:name>Validation1</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Validation2</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Validation3</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Validation4</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Validation5</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Validation</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Description</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Description1</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Description2</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Description3</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Description4</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Description5</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Request1</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>Response1</con:name>
      <con:value/>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>bdfb498f-ca71-4406-af9c-0acea1b4b891</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>e8ae6672-3046-4f32-8fc7-dac6d89e9df9</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>ffca4c0f-a6f9-4a84-ab34-396ba0b3d6c1</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>e7e79d69-e4f6-4c5c-b3bc-dafe98315e7a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:environmentSpec>
    <con:entry environmentId="25855cac-8c80-49bd-93ff-6e22fcdde5d9">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
</con:testCase>