<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="3b733be0-b6d6-44ba-9f0f-7b626af07f4f" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="Test1-P-RetrieveSailingMaster" searchProperties="true" timeout="0" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="3b733be0-b6d6-44ba-9f0f-7b626af07f4ffileName">Test1-P-RetrieveSailingMaster</con:setting>
  </con:settings>
  <con:testStep type="restrequest" name="cruiseSearch-ROYAL" id="24aaef43-7060-4221-98e8-b4480bf1c8aa">
    <con:settings/>
    <con:config service="Cruise Search" methodName="cruiseSearch" resourcePath="/esl/search/rest/cruiseSearch" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="cruiseSearch-ROYAL" id="4b83a4b3-3cb3-4dac-ab4a-9f8353f23135" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:request/>
        <con:originalUri>http://eslaservicestst01.rccl.com/esl/search/rest/cruiseSearch</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="aeea0b73-a636-43f8-9e7e-592c253cb5c6" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="970f9f2a-b98c-4157-a7d0-bdb110cadbb3" name="Script Assertion">
          <con:configuration>
            <scriptText>def xmlRes = messageExchange.getResponse().contentAsString
def xmlSlurper = new groovy.xml.XmlSlurper();
def parse = xmlSlurper.parseText(xmlRes)
log.info parse


def totalHits = (parse.resultsSummary.totalHits.text()).toInteger()
log.info totalHits
assert totalHits!=0</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="qualifiers.qualifierScope" value="SEARCH_AND_PRICE"/>
          <con:entry key="header.language" value="en_us"/>
          <con:entry key="criteria.brand.value" value="R"/>
          <con:entry key="header.application" value="royalcaribbean.com"/>
          <con:entry key="resultsPreference.includeOnlyIfPriceAvailable" value="true"/>
          <con:entry key="criteria.channel" value="VP"/>
          <con:entry key="qualifiers.offersType.strictPricingFlag" value="true"/>
          <con:entry key="qualifiers.priceScope" value="REQUESTED_AVAILABLE"/>
          <con:entry key="resultsPreference.includeResults" value="true"/>
          <con:entry key="criteria.currency" value="USD"/>
          <con:entry key="resultsPreference.strictSearch" value="true"/>
          <con:entry key="criteria.ship.value" value="${#Global#royalShip}"/>
          <con:entry key="resultsPreference.priceLevel.bestPricedCategory" value="true"/>
          <con:entry key="criteria.sailingDate.dateRange.from" value="${#Global#dateRangeFrom}"/>
          <con:entry key="criteria.sailingDate.date" value=""/>
          <con:entry key="resultsPreference.sortOrder" value="DESCENDING"/>
          <con:entry key="resultsPreference.includePrices" value="true"/>
          <con:entry key="resultsPreference.groupBy" value="PACKAGE"/>
          <con:entry key="criteria.bookingType" value="FIT"/>
          <con:entry key="resultsPreference.pagination.count" value="100"/>
          <con:entry key="header.domainId" value="1"/>
          <con:entry key="criteria.occupancy.adult" value="2"/>
          <con:entry key="resultsPreference.sortBy" value="DURATION"/>
          <con:entry key="criteria.sailingDate.dateRange.to" value="${#Global#dateRangeTo}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>criteria.channel</con:entry>
          <con:entry>criteria.bookingType</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.application</con:entry>
          <con:entry>criteria.brand.value</con:entry>
          <con:entry>criteria.ship.value</con:entry>
          <con:entry>criteria.cruiseType.value</con:entry>
          <con:entry>criteria.office</con:entry>
          <con:entry>criteria.country</con:entry>
          <con:entry>criteria.currency</con:entry>
          <con:entry>criteria.occupancy.adult</con:entry>
          <con:entry>resultsPreference.pagination.offset</con:entry>
          <con:entry>resultsPreference.pagination.count</con:entry>
          <con:entry>resultsPreference.strictSearch</con:entry>
          <con:entry>resultsPreference.sortBy</con:entry>
          <con:entry>resultsPreference.sortOrder</con:entry>
          <con:entry>resultsPreference.groupBy</con:entry>
          <con:entry>resultsPreference.includeResults</con:entry>
          <con:entry>resultsPreference.includeOnlyIfPriceAvailable</con:entry>
          <con:entry>resultsPreference.priceLevel.bestPricedCategory</con:entry>
          <con:entry>resultsPreference.includePrices</con:entry>
          <con:entry>qualifiers.priceScope</con:entry>
          <con:entry>qualifiers.qualifierScope</con:entry>
          <con:entry>qualifiers.offersType.strictPricingFlag</con:entry>
          <con:entry>qualifiers.itineraryGroup.value</con:entry>
          <con:entry>criteria.sailingDate.dateRange.from</con:entry>
          <con:entry>criteria.sailingDate.dateRange.to</con:entry>
          <con:entry>criteria.sailingDate.date</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="c3a4b580-ecc4-4d69-9e64-f4e9abf07977">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="1c5befc7-2431-43ac-871b-0634d210ea0b">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="40616221-3f9c-4753-b281-39f5bafc4e2c">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Fetch_REQ_app/country/currency" id="a932b564-48b8-40a0-9aed-02e0778dca78">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*;
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*;
import org.apache.commons.lang3.StringUtils;


def ts = testRunner.testCase.getTestStepByName("cruiseSearch-ROYAL");
String  url =  ts.getHttpRequest().getResponse().getURL(); 
log.info(url)

String app = StringUtils.substringBetween(url, "header.application=", "&amp;");
log.info(app)
testRunner.testCase.setPropertyValue("application",app);


String country = StringUtils.substringBetween(url, "criteria.country=", "&amp;");
log.info(country)
testRunner.testCase.setPropertyValue("country",country);


String currency = StringUtils.substringBetween(url, "criteria.currency=", "&amp;");
log.info(currency)
testRunner.testCase.setPropertyValue("currency",currency);

String language = StringUtils.substringBetween(url, "header.language=", "&amp;");
log.info(language)
testRunner.testCase.setPropertyValue("language",language);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Fetch_RES_brand/ship/saildate/package" id="56b916fd-2814-4145-9b65-30e5bc9f31ad">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*;
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*;


def ts = testRunner.testCase.getTestStepByName("cruiseSearch-ROYAL");
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

//Set Test Case Package Code
def packageCode = res.resultsByPackage.packageSummaryWithClassLevelPricing[0].packageReference.@code.text()
log.info(packageCode)
testRunner.testCase.setPropertyValue("packageCode",packageCode);


//Set Test Case Ship Code
def  shipCode= packageCode.substring(0,2);
log.info(shipCode)
testRunner.testCase.setPropertyValue("shipCode",shipCode);

//Set Test Case Sail Date
def sailDate = res.resultsByPackage.packageSummaryWithClassLevelPricing[0].cabinClassPriceBySailing[0].sailingRef.@saildate.text()
log.info(sailDate)
testRunner.testCase.setPropertyValue("sailDate",sailDate);

//Set Test Case Brand
def celebrityBrand = "C"
def royalBrand = "R"

def celebrityShips = ['AX', 'AT', 'BY', 'CS', 'EC', 'EG', 'EQ', 'FL', 'IN', 'ML', 'RF', 'SI', 'SL', 'SM', 'XP', 'XO']
def royalShips = ['AD', 'AL', 'AN', 'BR', 'NE', 'EN', 'EX', 'FR', 'GR', 'HM', 'IC', 'ID', 'JW', 'LB', 'MJ', 'MA', 'NV', 'NC', 'OA', 'OY', 'OV', 'QN', 'RD', 'RH', 'SR', 'SC', 'SY', 'WC', 'UT', 'VI', 'VY', 'WN']


if (celebrityShips.contains(shipCode)) {	
	testRunner.testCase.setPropertyValue("brand",celebrityBrand);
	} else {
		testRunner.testCase.setPropertyValue("brand",royalBrand);
		}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="retrieveSailingMaster-ROYAL" id="c773003f-d624-44bc-a147-e65672978e55">
    <con:settings/>
    <con:config service="ContentOperations" resourcePath="/sailingMaster" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="retrieveSailingMaster-ROYAL" id="e8347760-2229-4213-a726-ec7ced99befa" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:request/>
        <con:originalUri>https://tst1-int.api.rccl.com/esl/content/tst2/rest/v3/sailingMaster</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="175e11c8-09d3-4a17-81c9-f524346fbeee" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="efe3e5ca-f7a5-44c6-99a1-2c76bbac3f3f" name="Script Assertion">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString


def jsonSlurper = new groovy.json.JsonSlurper()
def parse = jsonSlurper.parseText(jsonRes)

def sailingMaster = parse.sailingMasterDetails.sailingMasterSummary
log.info sailingMaster
assert sailingMaster !=null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="header.language" value="${#TestCase#language}"/>
          <con:entry key="header.application" value="${#TestCase#application}"/>
          <con:entry key="startSailDate" value="${#Global#dateRangeFrom}"/>
          <con:entry key="endSailDate" value="${#Global#dateRangeTo}"/>
          <con:entry key="header.brand" value="${#TestCase#brand}"/>
        </con:parameters>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Validation-ROYAL" id="8c01aca1-b689-44d6-bf1e-ac8bac7562dc">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*;
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*;
import groovy.json.JsonSlurper
import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI 
import org.apache.commons.lang3.StringUtils;




def ts = testRunner.testCase.getTestStepByName("retrieveSailingMaster-ROYAL");
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

String  url =  ts.getHttpRequest().getResponse().getURL(); 

int countItineraries = res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.size()
log.info (countItineraries)


for(i=0; i&lt;=countItineraries-1;i++){
	
	def getShipCode = res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.shipCode[i].text()
	//log.info('shipCode: '+getShipCode)

	def celebrityBrand = "C"
	def royalBrand = "R"

	def celebrityShips = ['AX', 'AT', 'BY', 'CS', 'EC', 'EG', 'EQ', 'FL', 'IN', 'ML', 'RF', 'SI', 'SL', 'SM', 'XP', 'XO']
	def royalShips = ['AD', 'AL', 'AN', 'BR', 'NE', 'EN', 'EX', 'FR', 'GR', 'HM', 'IC', 'ID', 'JW', 'LB', 'MJ', 'MA', 'NV', 'NC', 'OA', 'OY', 'OV', 'QN', 'RD', 'RH', 'SR', 'SC', 'SY', 'WC', 'UT', 'VI', 'VY', 'WN']


	if (celebrityShips.contains(getShipCode)) {
	log.info('Celebrity Brand('+celebrityBrand+'):Ship '+getShipCode)	
	//testRunner.testCase.setPropertyValue("brand",celebrityBrand);

	
	} else {
		log.info('Royal Brand('+royalBrand+'):Ship '+getShipCode)
		//testRunner.testCase.setPropertyValue("brand",royalBrand);
		}	

	int countSailDate= res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.sailingSummary[i].e.size()

	for(x=0; x&lt;=countSailDate-1;x++){
	
	def sailDate = res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.sailingSummary[i].e.sailDate[x].text()
	

	def date = sailDate[0..6]
	

	String startSailDate = StringUtils.substringBetween(url, "startSailDate=", "&amp;");
	String endSailDate = StringUtils.substringAfter(url, "endSailDate=");
	

	if (startSailDate||endSailDate.contains(date)) {
	log.info('Passed StartSailDate '+startSailDate+' EndSailDate '+endSailDate+':SailDate '+sailDate+ ' within the range')	

	} else {
		log.info('Failed not within the range')

		}	

	
	
	}


	
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="retrieveSailingMaster-R-within 1 month range" id="a02996bf-ba3e-45d0-92c5-6c7c1d3c367b">
    <con:settings/>
    <con:config service="ContentOperations" resourcePath="/sailingMaster" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="retrieveSailingMaster-R-within 1 month range" id="e8347760-2229-4213-a726-ec7ced99befa" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:request/>
        <con:originalUri>https://tst1-int.api.rccl.com/esl/content/tst2/rest/v3/sailingMaster</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="175e11c8-09d3-4a17-81c9-f524346fbeee" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0ceaa3d2-56e5-4933-a871-bc9cf89b9043">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString


def jsonSlurper = new groovy.json.JsonSlurper()
def parse = jsonSlurper.parseText(jsonRes)

def sailingMaster = parse.sailingMasterDetails.sailingMasterSummary
log.info sailingMaster
assert sailingMaster !=null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="header.language" value="${#TestCase#language}"/>
          <con:entry key="header.application" value="${#TestCase#application}"/>
          <con:entry key="startSailDate" value="2024-01-01"/>
          <con:entry key="endSailDate" value="2024-01-31"/>
          <con:entry key="header.brand" value="${#TestCase#brand}"/>
        </con:parameters>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Validation-ROYAL 2" id="933288d6-f1c3-4a59-961e-eb50381693b8">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*;
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*;
import groovy.json.JsonSlurper
import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI 
import org.apache.commons.lang3.StringUtils;




def ts = testRunner.testCase.getTestStepByName("retrieveSailingMaster-R-within 1 month range");
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

String  url =  ts.getHttpRequest().getResponse().getURL(); 

int countItineraries = res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.size()
log.info (countItineraries)


for(i=0; i&lt;=countItineraries-1;i++){
	
	def getShipCode = res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.shipCode[i].text()
	//log.info('shipCode: '+getShipCode)

	def celebrityBrand = "C"
	def royalBrand = "R"

	def celebrityShips = ['AX', 'AT', 'BY', 'CS', 'EC', 'EG', 'EQ', 'FL', 'IN', 'ML', 'RF', 'SI', 'SL', 'SM', 'XP', 'XO']
	def royalShips = ['AD', 'AL', 'AN', 'BR', 'NE', 'EN', 'EX', 'FR', 'GR', 'HM', 'IC', 'ID', 'JW', 'LB', 'MJ', 'MA', 'NV', 'NC', 'OA', 'OY', 'OV', 'QN', 'RD', 'RH', 'SR', 'SC', 'SY', 'WC', 'UT', 'VI', 'VY', 'WN']


	if (celebrityShips.contains(getShipCode)) {
	log.info('Celebrity Brand('+celebrityBrand+'):Ship '+getShipCode)	
	//testRunner.testCase.setPropertyValue("brand",celebrityBrand);

	
	} else {
		log.info('Royal Brand('+royalBrand+'):Ship '+getShipCode)
		//testRunner.testCase.setPropertyValue("brand",royalBrand);
		}	

	int countSailDate= res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.sailingSummary[i].e.size()

	for(x=0; x&lt;=countSailDate-1;x++){
	
	def sailDate = res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.sailingSummary[i].e.sailDate[x].text()
	

	def date = sailDate[0..6]
	

	String startSailDate = StringUtils.substringBetween(url, "startSailDate=", "&amp;");
	String endSailDate = StringUtils.substringAfter(url, "endSailDate=");
	

	if (startSailDate||endSailDate.contains(date)) {
	log.info('Passed StartSailDate '+startSailDate+' EndSailDate '+endSailDate+':SailDate '+sailDate+ ' within the range')	

	} else {
		log.info('Failed not within the range')

		}	

	
	
	}


	
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="cruiseSearch-CEL" id="38e0173c-7a48-48aa-947f-83e14378a8bd">
    <con:settings/>
    <con:config service="Cruise Search" methodName="cruiseSearch" resourcePath="/esl/search/rest/cruiseSearch" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="cruiseSearch-CEL" id="4b83a4b3-3cb3-4dac-ab4a-9f8353f23135" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:request/>
        <con:originalUri>http://eslaservicestst01.rccl.com/esl/search/rest/cruiseSearch</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="aeea0b73-a636-43f8-9e7e-592c253cb5c6" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="970f9f2a-b98c-4157-a7d0-bdb110cadbb3" name="Script Assertion">
          <con:configuration>
            <scriptText>def xmlRes = messageExchange.getResponse().contentAsString
def xmlSlurper = new groovy.xml.XmlSlurper();
def parse = xmlSlurper.parseText(xmlRes)
log.info parse


def totalHits = (parse.resultsSummary.totalHits.text()).toInteger()
log.info totalHits
assert totalHits!=0</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="qualifiers.qualifierScope" value="SEARCH_AND_PRICE"/>
          <con:entry key="header.language" value="en_us"/>
          <con:entry key="resultsPreference.includeOnlyIfPriceAvailable" value="true"/>
          <con:entry key="criteria.channel" value="VP"/>
          <con:entry key="qualifiers.offersType.strictPricingFlag" value="true"/>
          <con:entry key="qualifiers.priceScope" value="REQUESTED_AVAILABLE"/>
          <con:entry key="resultsPreference.includeResults" value="true"/>
          <con:entry key="criteria.currency" value="USD"/>
          <con:entry key="resultsPreference.strictSearch" value="true"/>
          <con:entry key="criteria.ship.value" value="${#Global#celebrityShip}"/>
          <con:entry key="resultsPreference.priceLevel.bestPricedCategory" value="true"/>
          <con:entry key="criteria.sailingDate.dateRange.from" value="${#Global#dateRangeFrom}"/>
          <con:entry key="criteria.sailingDate.date" value=""/>
          <con:entry key="resultsPreference.sortOrder" value="DESCENDING"/>
          <con:entry key="resultsPreference.includePrices" value="true"/>
          <con:entry key="resultsPreference.groupBy" value="PACKAGE"/>
          <con:entry key="criteria.bookingType" value="FIT"/>
          <con:entry key="resultsPreference.pagination.count" value="100"/>
          <con:entry key="header.domainId" value="1"/>
          <con:entry key="criteria.occupancy.adult" value="2"/>
          <con:entry key="resultsPreference.sortBy" value="DURATION"/>
          <con:entry key="criteria.sailingDate.dateRange.to" value="${#Global#dateRangeTo}"/>
        </con:parameters>
        <con:parameterOrder>
          <con:entry>criteria.channel</con:entry>
          <con:entry>criteria.bookingType</con:entry>
          <con:entry>header.domainId</con:entry>
          <con:entry>header.language</con:entry>
          <con:entry>header.application</con:entry>
          <con:entry>criteria.brand.value</con:entry>
          <con:entry>criteria.ship.value</con:entry>
          <con:entry>criteria.cruiseType.value</con:entry>
          <con:entry>criteria.office</con:entry>
          <con:entry>criteria.country</con:entry>
          <con:entry>criteria.currency</con:entry>
          <con:entry>criteria.occupancy.adult</con:entry>
          <con:entry>resultsPreference.pagination.offset</con:entry>
          <con:entry>resultsPreference.pagination.count</con:entry>
          <con:entry>resultsPreference.strictSearch</con:entry>
          <con:entry>resultsPreference.sortBy</con:entry>
          <con:entry>resultsPreference.sortOrder</con:entry>
          <con:entry>resultsPreference.groupBy</con:entry>
          <con:entry>resultsPreference.includeResults</con:entry>
          <con:entry>resultsPreference.includeOnlyIfPriceAvailable</con:entry>
          <con:entry>resultsPreference.priceLevel.bestPricedCategory</con:entry>
          <con:entry>resultsPreference.includePrices</con:entry>
          <con:entry>qualifiers.priceScope</con:entry>
          <con:entry>qualifiers.qualifierScope</con:entry>
          <con:entry>qualifiers.offersType.strictPricingFlag</con:entry>
          <con:entry>qualifiers.itineraryGroup.value</con:entry>
          <con:entry>criteria.sailingDate.dateRange.from</con:entry>
          <con:entry>criteria.sailingDate.dateRange.to</con:entry>
          <con:entry>criteria.sailingDate.date</con:entry>
        </con:parameterOrder>
        <con:environmentSpec>
          <con:entry environmentId="c3a4b580-ecc4-4d69-9e64-f4e9abf07977">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="1c5befc7-2431-43ac-871b-0634d210ea0b">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="40616221-3f9c-4753-b281-39f5bafc4e2c">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Fetch_REQ_app/country/currency 2" id="675eef4d-6dd6-4b83-b23e-8ca9d044ef9b">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*;
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*;
import org.apache.commons.lang3.StringUtils;


def ts = testRunner.testCase.getTestStepByName("cruiseSearch-CEL");
String  url =  ts.getHttpRequest().getResponse().getURL(); 
log.info(url)

String app = StringUtils.substringBetween(url, "header.application=", "&amp;");
log.info(app)
testRunner.testCase.setPropertyValue("application",app);


String country = StringUtils.substringBetween(url, "criteria.country=", "&amp;");
log.info(country)
testRunner.testCase.setPropertyValue("country",country);


String currency = StringUtils.substringBetween(url, "criteria.currency=", "&amp;");
log.info(currency)
testRunner.testCase.setPropertyValue("currency",currency);

String language = StringUtils.substringBetween(url, "header.language=", "&amp;");
log.info(language)
testRunner.testCase.setPropertyValue("language",language);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Fetch_RES_brand/ship/saildate/package 2" id="fcc406ea-7121-453e-a2cf-d0756253383e">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*;
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*;


def ts = testRunner.testCase.getTestStepByName("cruiseSearch-CEL");
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

//Set Test Case Package Code
def packageCode = res.resultsByPackage.packageSummaryWithClassLevelPricing[0].packageReference.@code.text()
log.info(packageCode)
testRunner.testCase.setPropertyValue("packageCode",packageCode);


//Set Test Case Ship Code
def  shipCode= packageCode.substring(0,2);
log.info(shipCode)
testRunner.testCase.setPropertyValue("shipCode",shipCode);

//Set Test Case Sail Date
def sailDate = res.resultsByPackage.packageSummaryWithClassLevelPricing[0].cabinClassPriceBySailing[0].sailingRef.@saildate.text()
log.info(sailDate)
testRunner.testCase.setPropertyValue("sailDate",sailDate);

//Set Test Case Brand
def celebrityBrand = "C"
def royalBrand = "R"

def celebrityShips = ['AX', 'AT', 'BY', 'CS', 'EC', 'EG', 'EQ', 'FL', 'IN', 'ML', 'RF', 'SI', 'SL', 'SM', 'XP', 'XO']
def royalShips = ['AD', 'AL', 'AN', 'BR', 'NE', 'EN', 'EX', 'FR', 'GR', 'HM', 'IC', 'ID', 'JW', 'LB', 'MJ', 'MA', 'NV', 'NC', 'OA', 'OY', 'OV', 'QN', 'RD', 'RH', 'SR', 'SC', 'SY', 'WC', 'UT', 'VI', 'VY', 'WN']


if (celebrityShips.contains(shipCode)) {	
	testRunner.testCase.setPropertyValue("brand",celebrityBrand);
	} else {
		testRunner.testCase.setPropertyValue("brand",royalBrand);
		}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="retrieveSailingMaster-CEL" id="8c03a6a4-46de-499c-8506-2e45b6f1a157">
    <con:settings/>
    <con:config service="ContentOperations" resourcePath="/sailingMaster" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="retrieveSailingMaster-CEL" id="e8347760-2229-4213-a726-ec7ced99befa" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:request/>
        <con:originalUri>https://tst1-int.api.rccl.com/esl/content/tst2/rest/v3/sailingMaster</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="175e11c8-09d3-4a17-81c9-f524346fbeee" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="0afd2693-1904-4abb-81f4-dda89e7f01df">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString


def jsonSlurper = new groovy.json.JsonSlurper()
def parse = jsonSlurper.parseText(jsonRes)

def sailingMaster = parse.sailingMasterDetails.sailingMasterSummary
log.info sailingMaster
assert sailingMaster !=null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="header.language" value="${#TestCase#language}"/>
          <con:entry key="header.application" value="${#TestCase#application}"/>
          <con:entry key="startSailDate" value="${#Global#dateRangeFrom}"/>
          <con:entry key="endSailDate" value="${#Global#dateRangeTo}"/>
          <con:entry key="header.brand" value="${#TestCase#brand}"/>
        </con:parameters>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Validation-CEL" id="132a2987-12dc-4214-b03e-a37935f60de1">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*;
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*;
import groovy.json.JsonSlurper
import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI 
import org.apache.commons.lang3.StringUtils;




def ts = testRunner.testCase.getTestStepByName("retrieveSailingMaster-CEL");
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

String  url =  ts.getHttpRequest().getResponse().getURL(); 

int countItineraries = res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.size()
log.info (countItineraries)


for(i=0; i&lt;=countItineraries-1;i++){
	
	def getShipCode = res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.shipCode[i].text()
	//log.info('shipCode: '+getShipCode)

	def celebrityBrand = "C"
	def royalBrand = "R"

	def celebrityShips = ['AX', 'AT', 'BY', 'CS', 'EC', 'EG', 'EQ', 'FL', 'IN', 'ML', 'RF', 'SI', 'SL', 'SM', 'XP', 'XO']
	def royalShips = ['AD', 'AL', 'AN', 'BR', 'NE', 'EN', 'EX', 'FR', 'GR', 'HM', 'IC', 'ID', 'JW', 'LB', 'MJ', 'MA', 'NV', 'NC', 'OA', 'OY', 'OV', 'QN', 'RD', 'RH', 'SR', 'SC', 'SY', 'WC', 'UT', 'VI', 'VY', 'WN']


	if (celebrityShips.contains(getShipCode)) {
	log.info('Celebrity Brand('+celebrityBrand+'):Ship '+getShipCode)	
	//testRunner.testCase.setPropertyValue("brand",celebrityBrand);

	
	} else {
		log.info('Royal Brand('+royalBrand+'):Ship '+getShipCode)
		//testRunner.testCase.setPropertyValue("brand",royalBrand);
		}	

	int countSailDate= res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.sailingSummary[i].e.size()

	for(x=0; x&lt;=countSailDate-1;x++){
	
	def sailDate = res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.sailingSummary[i].e.sailDate[x].text()
	

	def date = sailDate[0..6]
	

	String startSailDate = StringUtils.substringBetween(url, "startSailDate=", "&amp;");
	String endSailDate = StringUtils.substringAfter(url, "endSailDate=");
	

	if (startSailDate||endSailDate.contains(date)) {
	log.info('Passed StartSailDate '+startSailDate+' EndSailDate '+endSailDate+':SailDate '+sailDate+ ' within the range')	

	} else {
		log.info('Failed not within the range')

		}	

	
	
	}


	
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="restrequest" name="retrieveSailingMaster-C-within 1 month range" id="3c91184f-cc4f-4813-ac5d-dd8b31833bd2">
    <con:settings/>
    <con:config service="ContentOperations" resourcePath="/sailingMaster" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:restRequest name="retrieveSailingMaster-C-within 1 month range" id="e8347760-2229-4213-a726-ec7ced99befa" mediaType="application/json">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;con:entry key="AppKey" value="${#Project#AppKey}" xmlns:con="http://eviware.com/soapui/config"/></con:setting>
        </con:settings>
        <con:request/>
        <con:originalUri>https://tst1-int.api.rccl.com/esl/content/tst2/rest/v3/sailingMaster</con:originalUri>
        <con:assertion type="Valid HTTP Status Codes" id="175e11c8-09d3-4a17-81c9-f524346fbeee" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="7078a31c-eac5-40f4-8f20-1f0d73123f00">
          <con:configuration>
            <scriptText>def jsonRes = messageExchange.getResponse().contentAsString


def jsonSlurper = new groovy.json.JsonSlurper()
def parse = jsonSlurper.parseText(jsonRes)

def sailingMaster = parse.sailingMasterDetails.sailingMasterSummary
log.info sailingMaster
assert sailingMaster !=null</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:parameters>
          <con:entry key="header.language" value="${#TestCase#language}"/>
          <con:entry key="header.application" value="${#TestCase#application}"/>
          <con:entry key="startSailDate" value="2024-01-01"/>
          <con:entry key="endSailDate" value="2024-01-31"/>
          <con:entry key="header.brand" value="${#TestCase#brand}"/>
        </con:parameters>
      </con:restRequest>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Validation-CEL 2" id="109697b7-43da-40a2-a0e1-9376805ed464">
    <con:settings/>
    <con:config>
      <script>import java.io.*;
import java.util.*;
import com.eviware.soapui.model.testsuite.*;
import com.eviware.soapui.impl.wsdl.teststeps.assertions.*;
import groovy.json.JsonSlurper
import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI 
import org.apache.commons.lang3.StringUtils;




def ts = testRunner.testCase.getTestStepByName("retrieveSailingMaster-C-within 1 month range");
def res = new XmlSlurper().parseText(ts.getPropertyValue("ResponseAsXml"));

String  url =  ts.getHttpRequest().getResponse().getURL(); 

int countItineraries = res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.size()
log.info (countItineraries)


for(i=0; i&lt;=countItineraries-1;i++){
	
	def getShipCode = res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.shipCode[i].text()
	//log.info('shipCode: '+getShipCode)

	def celebrityBrand = "C"
	def royalBrand = "R"

	def celebrityShips = ['AX', 'AT', 'BY', 'CS', 'EC', 'EG', 'EQ', 'FL', 'IN', 'ML', 'RF', 'SI', 'SL', 'SM', 'XP', 'XO']
	def royalShips = ['AD', 'AL', 'AN', 'BR', 'NE', 'EN', 'EX', 'FR', 'GR', 'HM', 'IC', 'ID', 'JW', 'LB', 'MJ', 'MA', 'NV', 'NC', 'OA', 'OY', 'OV', 'QN', 'RD', 'RH', 'SR', 'SC', 'SY', 'WC', 'UT', 'VI', 'VY', 'WN']


	if (celebrityShips.contains(getShipCode)) {
	log.info('Celebrity Brand('+celebrityBrand+'):Ship '+getShipCode)	
	//testRunner.testCase.setPropertyValue("brand",celebrityBrand);

	
	} else {
		log.info('Royal Brand('+royalBrand+'):Ship '+getShipCode)
		//testRunner.testCase.setPropertyValue("brand",royalBrand);
		}	

	int countSailDate= res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.sailingSummary[i].e.size()

	for(x=0; x&lt;=countSailDate-1;x++){
	
	def sailDate = res.sailingMasterDetails.sailingMasterSummary.e.shipClassSummary.e.shipSummary.e.sailingSummary[i].e.sailDate[x].text()
	

	def date = sailDate[0..6]
	

	String startSailDate = StringUtils.substringBetween(url, "startSailDate=", "&amp;");
	String endSailDate = StringUtils.substringAfter(url, "endSailDate=");
	

	if (startSailDate||endSailDate.contains(date)) {
	log.info('Passed StartSailDate '+startSailDate+' EndSailDate '+endSailDate+':SailDate '+sailDate+ ' within the range')	

	} else {
		log.info('Failed not within the range')

		}	

	
	
	}


	
}</script>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>application</con:name>
      <con:value>celebritycruises.com</con:value>
    </con:property>
    <con:property>
      <con:name>country</con:name>
      <con:value>USA</con:value>
    </con:property>
    <con:property>
      <con:name>currency</con:name>
      <con:value>USD</con:value>
    </con:property>
    <con:property>
      <con:name>language</con:name>
      <con:value>en_us</con:value>
    </con:property>
    <con:property>
      <con:name>packageCode</con:name>
      <con:value>SL17T034</con:value>
    </con:property>
    <con:property>
      <con:name>shipCode</con:name>
      <con:value>SL</con:value>
    </con:property>
    <con:property>
      <con:name>sailDate</con:name>
      <con:value>2023-10-01</con:value>
    </con:property>
    <con:property>
      <con:name>brand</con:name>
      <con:value>C</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
</con:testCase>
